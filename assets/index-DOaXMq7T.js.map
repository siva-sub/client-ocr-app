{"version":3,"file":"index-DOaXMq7T.js","sources":["../../src/ppocr-improved-engine.js","../../src/ppocr-onnx-engine.js","../../node_modules/regenerator-runtime/runtime.js","../../node_modules/tesseract.js/src/utils/getId.js","../../node_modules/tesseract.js/src/createJob.js","../../node_modules/tesseract.js/src/utils/log.js","../../node_modules/tesseract.js/src/createScheduler.js","../../node_modules/is-electron/index.js","../../node_modules/tesseract.js/src/utils/getEnvironment.js","../../node_modules/tesseract.js/src/utils/resolvePaths.js","../../node_modules/tesseract.js/src/utils/circularize.js","../../node_modules/tesseract.js/src/constants/OEM.js","../../node_modules/tesseract.js/src/constants/defaultOptions.js","../../node_modules/tesseract.js/src/worker/browser/defaultOptions.js","../../node_modules/tesseract.js/src/worker/browser/spawnWorker.js","../../node_modules/tesseract.js/src/worker/browser/terminateWorker.js","../../node_modules/tesseract.js/src/worker/browser/onMessage.js","../../node_modules/tesseract.js/src/worker/browser/send.js","../../node_modules/tesseract.js/src/worker/browser/loadImage.js","../../node_modules/tesseract.js/src/worker/browser/index.js","../../node_modules/tesseract.js/src/createWorker.js","../../node_modules/tesseract.js/src/Tesseract.js","../../node_modules/tesseract.js/src/constants/languages.js","../../node_modules/tesseract.js/src/constants/PSM.js","../../node_modules/tesseract.js/src/index.js","../../src/tesseract-ocr-engine.js","../../src/main.js"],"sourcesContent":["import * as ort from 'onnxruntime-web';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = '/client-ocr-app/pdf.worker.min.js';\n\n// Configure ONNX Runtime to use the bundled WASM files\nort.env.wasm.wasmPaths = '/client-ocr-app/assets/';\nort.env.wasm.numThreads = 1;\n\n// Model paths\nconst MODEL_BASE = '/client-ocr-app/models/';\n\n// Improved configuration based on RapidOCR and ppu-paddle-ocr - optimized for better detection\nconst CONFIG = {\n    // Detection parameters (VERY low thresholds for maximum detection)\n    det_limit_side_len: 1280,    // Higher resolution for better detail\n    det_limit_type: 'max',       // Use 'max' for consistent sizing\n    det_db_thresh: 0.05,         // VERY low threshold for maximum detection\n    det_db_box_thresh: 0.1,      // VERY low box threshold to detect all text\n    det_db_unclip_ratio: 2.5,    // Even higher ratio for better text coverage\n    det_db_min_size: 2,          // Smaller minimum size for tiny text\n    det_db_max_candidates: 2000,  // More candidates for complex images\n    det_use_dilation: true,      // Enable for better text connectivity\n    det_dilation_kernel: 3,      // Dilation kernel size\n    \n    // Recognition parameters (lower thresholds)\n    rec_image_height: 48,\n    rec_image_width: 320,        // Dynamic width calculation\n    rec_batch_num: 6,\n    drop_score: 0.05,            // VERY low threshold to keep all results\n    \n    // Preprocessing parameters (PP-OCRv5 style)\n    det_mean: [0.485, 0.456, 0.406],\n    det_std: [0.229, 0.224, 0.225],\n    rec_mean: 0.5,\n    rec_std: 0.5,\n    \n    // Area thresholds\n    min_area_thresh: 2,          // Very small area threshold\n    \n    // Text line merging\n    vertical_gap_threshold: 0.5,  // Standard gap threshold\n    \n    // English-specific optimizations\n    english_mode: true,\n    min_word_confidence: 0.1,    // Very low confidence threshold\n    enable_word_splitting: true,  // Split connected words in English\n    \n    // Grid parameters for finer detection\n    grid_size: 16,               // Much smaller grid size (was 32)\n    overlap_ratio: 0.2           // Overlap between grid cells\n};\n\nexport class PPOCRImprovedEngine {\n    constructor() {\n        this.detectionSession = null;\n        this.recognitionSession = null;\n        this.charDict = [];\n        this.initialized = false;\n        this.canvas = null;\n        this.ctx = null;\n        this.modelConfig = {\n            detection: 'PP-OCRv5_mobile_det_infer.onnx',  // PP-OCRv5 mobile detection\n            recognition: 'PP-OCRv5_mobile_rec_infer.onnx',  // PP-OCRv5 mobile recognition\n            dictionary: 'ppocr_keys_v1.txt'  // PP-OCRv5 uses unified dictionary\n        };\n    }\n\n    setModelConfig(config) {\n        // Update model configuration\n        if (config.detection) this.modelConfig.detection = config.detection;\n        if (config.recognition) this.modelConfig.recognition = config.recognition;\n        if (config.dictionary) this.modelConfig.dictionary = config.dictionary;\n        \n        // Mark as not initialized to force reload\n        this.initialized = false;\n    }\n\n    async initialize(progressCallback) {\n        try {\n            // Create canvas for image processing with willReadFrequently for better performance\n            this.canvas = document.createElement('canvas');\n            this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });\n\n            // Load dictionary\n            progressCallback?.({ status: 'loading', message: 'Loading dictionary...', progress: 10 });\n            await this.loadDictionary();\n\n            // Load detection model\n            const detectionName = this.modelConfig.detection.replace('.onnx', '').replace(/_/g, ' ');\n            progressCallback?.({ status: 'loading', message: `Loading ${detectionName}...`, progress: 30 });\n            \n            // Release existing session if any\n            if (this.detectionSession) {\n                await this.detectionSession.release();\n            }\n            \n            this.detectionSession = await ort.InferenceSession.create(\n                MODEL_BASE + this.modelConfig.detection, \n                {\n                    executionProviders: ['wasm'],\n                    graphOptimizationLevel: 'all'\n                }\n            );\n            console.log('Detection model loaded:', this.detectionSession.inputNames, this.detectionSession.outputNames);\n\n            // Load recognition model\n            const recognitionName = this.modelConfig.recognition.replace('.onnx', '').replace(/_/g, ' ');\n            progressCallback?.({ status: 'loading', message: `Loading ${recognitionName}...`, progress: 70 });\n            \n            // Release existing session if any\n            if (this.recognitionSession) {\n                await this.recognitionSession.release();\n            }\n            \n            this.recognitionSession = await ort.InferenceSession.create(\n                MODEL_BASE + this.modelConfig.recognition, \n                {\n                    executionProviders: ['wasm'],\n                    graphOptimizationLevel: 'all'\n                }\n            );\n            console.log('Recognition model loaded:', this.recognitionSession.inputNames, this.recognitionSession.outputNames);\n\n            this.initialized = true;\n            progressCallback?.({ status: 'ready', message: 'PP-OCR ready!', progress: 100 });\n\n        } catch (error) {\n            console.error('Failed to initialize PP-OCR models:', error);\n            throw error;\n        }\n    }\n\n    async loadDictionary() {\n        try {\n            const response = await fetch(MODEL_BASE + this.modelConfig.dictionary);\n            const text = await response.text();\n            this.charDict = text.split('\\n').filter(line => line.trim());\n            // Add blank token at the beginning\n            this.charDict.unshift(' ');\n            console.log(`Loaded dictionary ${this.modelConfig.dictionary} with ${this.charDict.length} characters`);\n        } catch (error) {\n            console.error('Failed to load dictionary:', error);\n            // Use basic ASCII as fallback\n            this.charDict = [' '];\n            for (let i = 32; i < 127; i++) {\n                this.charDict.push(String.fromCharCode(i));\n            }\n        }\n    }\n\n    async process(imageBlob) {\n        if (!this.initialized) {\n            throw new Error('OCR engine not initialized');\n        }\n\n        // Check if it's a PDF\n        if (imageBlob.type === 'application/pdf') {\n            return await this.processPDF(imageBlob);\n        }\n\n        // Convert blob to image\n        const imageData = await this.blobToImage(imageBlob);\n        \n        // Detect text regions\n        const boxes = await this.detectText(imageData);\n        \n        // Recognize text in each region\n        const results = await this.recognizeText(imageData, boxes);\n        \n        // Post-process: merge text lines\n        return this.mergeTextLines(results);\n    }\n\n    async detectText(imageData) {\n        if (!this.detectionSession) {\n            throw new Error('Detection model not loaded');\n        }\n\n        try {\n            // Resize image for detection\n            console.log('Starting image resize...');\n            const { resizedImage, ratio } = await this.resizeForDetection(imageData);\n            console.log('Image resized, ratio:', ratio);\n            \n            // Preprocess for detection\n            console.log('Starting preprocessing...');\n            const inputTensor = await this.preprocessForDetection(resizedImage);\n            console.log('Preprocessing complete, tensor shape:', inputTensor.dims);\n            \n            // Run detection\n            console.log('Running detection model...');\n            const feeds = { [this.detectionSession.inputNames[0]]: inputTensor };\n            const output = await this.detectionSession.run(feeds);\n            console.log('Detection complete');\n            \n            // Post-process detection results\n            const boxes = await this.postprocessDetection(\n                output[this.detectionSession.outputNames[0]], \n                resizedImage.width, \n                resizedImage.height, \n                ratio\n            );\n            \n            console.log(`Detected ${boxes.length} text regions`);\n            return this.sortBoxes(boxes);\n        } catch (error) {\n            console.error('Error in detectText:', error);\n            console.error('Error details:', {\n                message: error.message,\n                stack: error.stack,\n                name: error.name,\n                code: error.code\n            });\n            // Return empty array instead of throwing to allow partial results\n            return [];\n        }\n    }\n\n    async resizeForDetection(imageData) {\n        const limitSideLen = CONFIG.det_limit_side_len;\n        const limitType = CONFIG.det_limit_type;\n        let newW = imageData.width;\n        let newH = imageData.height;\n        \n        // Calculate resize ratio based on RapidOCR approach\n        let ratio = 1;\n        if (limitType === 'max') {\n            if (Math.max(newH, newW) > limitSideLen) {\n                ratio = newH > newW ? limitSideLen / newH : limitSideLen / newW;\n            }\n        } else {\n            // 'min' type - better for small text\n            if (Math.min(newH, newW) < limitSideLen) {\n                ratio = newH < newW ? limitSideLen / newH : limitSideLen / newW;\n            }\n        }\n        \n        newW = Math.round(newW * ratio);\n        newH = Math.round(newH * ratio);\n        \n        // Make dimensions divisible by grid size for finer detection\n        const gridSize = CONFIG.grid_size;\n        const targetW = Math.round(newW / gridSize) * gridSize;\n        const targetH = Math.round(newH / gridSize) * gridSize;\n        \n        // Apply preprocessing to improve image quality\n        const preprocessedImage = await this.preprocessImage(imageData, targetW, targetH);\n        \n        const resizedImage = new Image();\n        return new Promise((resolve) => {\n            this.canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                resizedImage.onload = () => {\n                    URL.revokeObjectURL(url);\n                    resolve({ resizedImage, ratio });\n                };\n                resizedImage.src = url;\n            });\n        });\n    }\n    \n    async preprocessImage(imageData, targetW, targetH) {\n        // Resize image\n        this.canvas.width = targetW;\n        this.canvas.height = targetH;\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, targetW, targetH);\n        \n        // Enable image smoothing for better quality\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n        \n        // Draw with proper scaling\n        const scale = Math.min(targetW / imageData.width, targetH / imageData.height);\n        const scaledW = imageData.width * scale;\n        const scaledH = imageData.height * scale;\n        const offsetX = (targetW - scaledW) / 2;\n        const offsetY = (targetH - scaledH) / 2;\n        \n        this.ctx.drawImage(imageData, offsetX, offsetY, scaledW, scaledH);\n        \n        // Apply moderate contrast enhancement to preserve text\n        const imgData = this.ctx.getImageData(0, 0, targetW, targetH);\n        const pixels = imgData.data;\n        \n        // Convert to grayscale and enhance contrast\n        for (let i = 0; i < pixels.length; i += 4) {\n            // Convert to grayscale\n            const gray = 0.299 * pixels[i] + 0.587 * pixels[i + 1] + 0.114 * pixels[i + 2];\n            \n            // Moderate contrast enhancement - less aggressive\n            let enhanced = ((gray - 128) * 1.2) + 128;\n            \n            // Gentle clamping to preserve mid-tones\n            if (enhanced > 240) {\n                enhanced = 255;\n            } else if (enhanced < 15) {\n                enhanced = 0;\n            }\n            \n            enhanced = Math.max(0, Math.min(255, enhanced));\n            \n            pixels[i] = enhanced;\n            pixels[i + 1] = enhanced;\n            pixels[i + 2] = enhanced;\n        }\n        \n        this.ctx.putImageData(imgData, 0, 0);\n        return this.canvas;\n    }\n\n    async preprocessForDetection(imageData) {\n        // Draw image to canvas\n        this.canvas.width = imageData.width;\n        this.canvas.height = imageData.height;\n        this.ctx.drawImage(imageData, 0, 0);\n        \n        const imgData = this.ctx.getImageData(0, 0, imageData.width, imageData.height);\n        const pixels = imgData.data;\n        \n        // Create tensor [1, 3, H, W]\n        const size = imageData.width * imageData.height;\n        const floatData = new Float32Array(3 * size);\n        \n        // Normalize and rearrange to CHW format (RapidOCR style)\n        for (let i = 0; i < size; i++) {\n            const pixelIndex = i * 4;\n            floatData[i] = (pixels[pixelIndex] / 255.0 - CONFIG.det_mean[0]) / CONFIG.det_std[0];\n            floatData[size + i] = (pixels[pixelIndex + 1] / 255.0 - CONFIG.det_mean[1]) / CONFIG.det_std[1];\n            floatData[2 * size + i] = (pixels[pixelIndex + 2] / 255.0 - CONFIG.det_mean[2]) / CONFIG.det_std[2];\n        }\n        \n        return new ort.Tensor('float32', floatData, [1, 3, imageData.height, imageData.width]);\n    }\n\n    async postprocessDetection(outputTensor, imgWidth, imgHeight, ratio) {\n        try {\n            // PP-OCRv5 might have different output format\n            let height, width, data;\n            \n            if (outputTensor.dims.length === 4) {\n                // Standard format: [batch, channels, height, width]\n                const [batchSize, channels, h, w] = outputTensor.dims;\n                height = h;\n                width = w;\n                data = outputTensor.data;\n            } else if (outputTensor.dims.length === 3) {\n                // Alternative format: [batch, height, width]\n                const [batchSize, h, w] = outputTensor.dims;\n                height = h;\n                width = w;\n                data = outputTensor.data;\n            } else {\n                throw new Error(`Unexpected output tensor dimensions: ${outputTensor.dims}`);\n            }\n            \n            console.log(`Detection output shape: ${height}x${width}, total pixels: ${height * width}`);\n            console.log('Output tensor dims:', outputTensor.dims);\n            console.log('Data length:', data.length);\n            \n            // Convert to probability map\n            const probMap = new Float32Array(height * width);\n            for (let i = 0; i < height * width; i++) {\n                probMap[i] = 1 / (1 + Math.exp(-data[i]));  // Sigmoid\n            }\n            \n            // Threshold\n            const bitmap = new Uint8Array(height * width);\n            for (let i = 0; i < height * width; i++) {\n                bitmap[i] = probMap[i] > CONFIG.det_db_thresh ? 255 : 0;\n            }\n        \n        // Find contours (limit to prevent overflow)\n        const boxes = [];\n        const visited = new Set();\n        let numContours = 0;\n        \n        for (let y = 0; y < height && numContours < CONFIG.det_db_max_candidates; y++) {\n            for (let x = 0; x < width && numContours < CONFIG.det_db_max_candidates; x++) {\n                const idx = y * width + x;\n                if (bitmap[idx] === 255 && !visited.has(idx)) {\n                    const box = this.findConnectedComponent(bitmap, width, height, x, y, visited, probMap);\n                    if (box && box.score >= CONFIG.det_db_box_thresh) {\n                        // Scale back to original size\n                        box.points = box.points.map(p => [\n                            Math.round(p[0] / ratio),\n                            Math.round(p[1] / ratio)\n                        ]);\n                        \n                        // Calculate area\n                        const area = this.calculatePolygonArea(box.points);\n                        if (area > CONFIG.min_area_thresh) {\n                            boxes.push(box);\n                            numContours++;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return boxes;\n        } catch (error) {\n            console.error('Error in postprocessDetection:', error);\n            throw new Error(`Detection post-processing failed: ${error.message}`);\n        }\n    }\n\n    findConnectedComponent(bitmap, width, height, startX, startY, visited, probMap) {\n        const stack = [[startX, startY]];\n        const points = [];\n        let totalScore = 0;\n        let count = 0;\n        const MAX_COMPONENT_SIZE = 10000; // Smaller limit for individual components\n        \n        // Mark starting point as visited immediately\n        const startIdx = startY * width + startX;\n        if (visited.has(startIdx) || bitmap[startIdx] !== 255) {\n            return null;\n        }\n        \n        // For text detection, we want to find individual text lines/words\n        // not merge everything into one giant component\n        const componentMap = new Set();\n        componentMap.add(startIdx);\n        \n        while (stack.length > 0 && points.length < MAX_COMPONENT_SIZE) {\n            const [x, y] = stack.pop();\n            const idx = y * width + x;\n            \n            if (visited.has(idx)) continue;\n            visited.add(idx);\n            \n            if (bitmap[idx] === 255) {\n                points.push([x, y]);\n                totalScore += probMap[idx];\n                count++;\n                \n                // For text, use 4-connectivity instead of 8 to avoid merging separate lines\n                const neighbors = [\n                    [x, y - 1], // top\n                    [x, y + 1], // bottom\n                    [x - 1, y], // left\n                    [x + 1, y]  // right\n                ];\n                \n                for (const [nx, ny] of neighbors) {\n                    if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\n                        const nidx = ny * width + nx;\n                        if (!visited.has(nidx) && bitmap[nidx] === 255) {\n                            // Check if this would create too large a component\n                            // This helps separate text lines\n                            const yDiff = Math.abs(ny - startY);\n                            const xDiff = Math.abs(nx - startX);\n                            \n                            // Limit component growth to prevent merging text lines\n                            if (yDiff < height * 0.05 || xDiff < width * 0.3) {\n                                stack.push([nx, ny]);\n                                componentMap.add(nidx);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        if (points.length < CONFIG.det_db_min_size) {\n            return null;\n        }\n        \n        // Find bounding box\n        const xs = points.map(p => p[0]);\n        const ys = points.map(p => p[1]);\n        let minX = Math.min(...xs);\n        let maxX = Math.max(...xs);\n        let minY = Math.min(...ys);\n        let maxY = Math.max(...ys);\n        \n        // Apply unclip ratio - different padding for x and y to better fit text\n        const unclipRatio = CONFIG.det_db_unclip_ratio;\n        const xPadding = (maxX - minX) * 0.1; // 10% horizontal padding\n        const yPadding = (maxY - minY) * 0.2; // 20% vertical padding for better line coverage\n        \n        minX = Math.max(0, minX - xPadding);\n        maxX = Math.min(width - 1, maxX + xPadding);\n        minY = Math.max(0, minY - yPadding);\n        maxY = Math.min(height - 1, maxY + yPadding);\n        \n        return {\n            points: [\n                [minX, minY],\n                [maxX, minY],\n                [maxX, maxY],\n                [minX, maxY]\n            ],\n            score: totalScore / count\n        };\n    }\n\n    calculatePolygonArea(points) {\n        let area = 0;\n        const n = points.length;\n        for (let i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            area += points[i][0] * points[j][1];\n            area -= points[j][0] * points[i][1];\n        }\n        return Math.abs(area) / 2;\n    }\n\n    sortBoxes(boxes) {\n        // RapidOCR-style box sorting: top to bottom, left to right\n        if (boxes.length === 0) return boxes;\n        \n        // First sort by Y coordinate\n        boxes.sort((a, b) => {\n            const aY = a.points[0][1]; // Top-left Y\n            const bY = b.points[0][1];\n            return aY - bY;\n        });\n        \n        // Then adjust for boxes on the same line\n        for (let i = boxes.length - 1; i > 0; i--) {\n            for (let j = i - 1; j >= 0; j--) {\n                // If boxes are on the same horizontal line (within 10 pixels)\n                if (Math.abs(boxes[j + 1].points[0][1] - boxes[j].points[0][1]) < 10 &&\n                    boxes[j + 1].points[0][0] < boxes[j].points[0][0]) {\n                    // Swap if the right box is actually to the left\n                    const tmp = boxes[j];\n                    boxes[j] = boxes[j + 1];\n                    boxes[j + 1] = tmp;\n                } else {\n                    break;\n                }\n            }\n        }\n        \n        return boxes;\n    }\n\n    async recognizeText(imageData, boxes) {\n        if (!this.recognitionSession) {\n            throw new Error('Recognition model not loaded');\n        }\n\n        const results = [];\n        \n        // Process in batches like RapidOCR\n        const batchSize = CONFIG.rec_batch_num;\n        \n        for (let i = 0; i < boxes.length; i += batchSize) {\n            const batchBoxes = boxes.slice(i, Math.min(i + batchSize, boxes.length));\n            const batchResults = await this.processBatch(imageData, batchBoxes);\n            results.push(...batchResults);\n        }\n        \n        return results;\n    }\n\n    async processBatch(imageData, boxes) {\n        const results = [];\n        \n        // Sort by width ratio for better batching (RapidOCR approach)\n        const croppedImages = [];\n        const widthRatios = [];\n        \n        for (const box of boxes) {\n            const cropped = await this.getRotateCropImage(imageData, box);\n            const ratio = cropped.width / cropped.height;\n            croppedImages.push(cropped);\n            widthRatios.push(ratio);\n        }\n        \n        // Sort by width ratio\n        const indices = Array.from({length: boxes.length}, (_, i) => i)\n            .sort((a, b) => widthRatios[a] - widthRatios[b]);\n        \n        // Process sorted batch\n        for (const idx of indices) {\n            const cropped = croppedImages[idx];\n            const box = boxes[idx];\n            \n            // Preprocess for recognition\n            const inputTensor = await this.preprocessForRecognition(cropped);\n            \n            // Run recognition\n            const feeds = { [this.recognitionSession.inputNames[0]]: inputTensor };\n            const output = await this.recognitionSession.run(feeds);\n            \n            // Decode the output\n            const result = await this.decodeRecognition(output[this.recognitionSession.outputNames[0]]);\n            \n            if (result.score >= CONFIG.drop_score) {\n                results.push({\n                    text: result.text,\n                    confidence: result.score,\n                    box: box.points\n                });\n            }\n        }\n        \n        return results;\n    }\n\n    async getRotateCropImage(imageData, box) {\n        // RapidOCR-style perspective transform and rotation handling\n        const points = box.points;\n        \n        // Calculate crop dimensions\n        const width1 = Math.sqrt(Math.pow(points[0][0] - points[1][0], 2) + \n                               Math.pow(points[0][1] - points[1][1], 2));\n        const width2 = Math.sqrt(Math.pow(points[2][0] - points[3][0], 2) + \n                               Math.pow(points[2][1] - points[3][1], 2));\n        const cropWidth = Math.max(width1, width2);\n        \n        const height1 = Math.sqrt(Math.pow(points[0][0] - points[3][0], 2) + \n                                Math.pow(points[0][1] - points[3][1], 2));\n        const height2 = Math.sqrt(Math.pow(points[1][0] - points[2][0], 2) + \n                                Math.pow(points[1][1] - points[2][1], 2));\n        const cropHeight = Math.max(height1, height2);\n        \n        // For now, use simple cropping (perspective transform would require additional libraries)\n        // This is a simplified version that works well for most cases\n        const minX = Math.min(...points.map(p => p[0]));\n        const maxX = Math.max(...points.map(p => p[0]));\n        const minY = Math.min(...points.map(p => p[1]));\n        const maxY = Math.max(...points.map(p => p[1]));\n        \n        const width = maxX - minX;\n        const height = maxY - minY;\n        \n        this.canvas.width = width;\n        this.canvas.height = height;\n        \n        this.ctx.drawImage(imageData, minX, minY, width, height, 0, 0, width, height);\n        \n        // Check if image needs rotation (height > 1.5 * width)\n        let needRotation = false;\n        if (height * 1.0 / width >= 1.5) {\n            needRotation = true;\n            // Rotate 90 degrees\n            const rotatedCanvas = document.createElement('canvas');\n            const rotatedCtx = rotatedCanvas.getContext('2d', { willReadFrequently: true });\n            rotatedCanvas.width = height;\n            rotatedCanvas.height = width;\n            rotatedCtx.translate(height / 2, width / 2);\n            rotatedCtx.rotate(Math.PI / 2);\n            rotatedCtx.drawImage(this.canvas, -width / 2, -height / 2);\n            \n            // Copy back to main canvas\n            this.canvas.width = height;\n            this.canvas.height = width;\n            this.ctx.drawImage(rotatedCanvas, 0, 0);\n        }\n        \n        const imgElement = new Image();\n        return new Promise((resolve) => {\n            this.canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                imgElement.onload = () => {\n                    URL.revokeObjectURL(url);\n                    resolve(imgElement);\n                };\n                imgElement.src = url;\n            });\n        });\n    }\n\n    async preprocessForRecognition(imageData) {\n        // Recognition model expects fixed height\n        const imgChannel = 3;\n        const imgHeight = CONFIG.rec_image_height;\n        const imgWidth = CONFIG.rec_image_width;\n        \n        // Calculate max width ratio (RapidOCR style)\n        const h = imageData.height;\n        const w = imageData.width;\n        const ratio = w / h;\n        const maxWhRatio = imgWidth / imgHeight;\n        \n        let resizedW;\n        if (Math.ceil(imgHeight * ratio) > imgWidth) {\n            resizedW = imgWidth;\n        } else {\n            resizedW = Math.ceil(imgHeight * ratio);\n        }\n        \n        // Resize image\n        this.canvas.width = resizedW;\n        this.canvas.height = imgHeight;\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, resizedW, imgHeight);\n        this.ctx.drawImage(imageData, 0, 0, resizedW, imgHeight);\n        \n        const imgData = this.ctx.getImageData(0, 0, resizedW, imgHeight);\n        const pixels = imgData.data;\n        \n        // Create padding tensor with fixed width\n        const paddingData = new Float32Array(imgChannel * imgHeight * imgWidth);\n        \n        // Copy resized image to padded tensor (RapidOCR normalization)\n        for (let c = 0; c < imgChannel; c++) {\n            for (let y = 0; y < imgHeight; y++) {\n                for (let x = 0; x < resizedW; x++) {\n                    const srcIdx = (y * resizedW + x) * 4 + c;\n                    const dstIdx = c * imgHeight * imgWidth + y * imgWidth + x;\n                    // RapidOCR recognition normalization: (x/255 - 0.5) / 0.5\n                    paddingData[dstIdx] = (pixels[srcIdx] / 255.0 - CONFIG.rec_mean) / CONFIG.rec_std;\n                }\n            }\n        }\n        \n        return new ort.Tensor('float32', paddingData, [1, imgChannel, imgHeight, imgWidth]);\n    }\n\n    async decodeRecognition(outputTensor) {\n        // CTC decoding\n        const [batchSize, seqLen, vocabSize] = outputTensor.dims;\n        const preds = outputTensor.data;\n        \n        // Get argmax for each time step\n        const predIdxs = [];\n        const scores = [];\n        \n        for (let t = 0; t < seqLen; t++) {\n            let maxIdx = 0;\n            let maxVal = preds[t * vocabSize];\n            \n            for (let c = 1; c < vocabSize; c++) {\n                const val = preds[t * vocabSize + c];\n                if (val > maxVal) {\n                    maxVal = val;\n                    maxIdx = c;\n                }\n            }\n            predIdxs.push(maxIdx);\n            scores.push(maxVal);\n        }\n        \n        // CTC decode: remove blanks and repeated characters\n        const decoded = [];\n        const decodedScores = [];\n        let lastIdx = -1;\n        \n        for (let i = 0; i < predIdxs.length; i++) {\n            const idx = predIdxs[i];\n            \n            // Skip blank (index 0) and repeated characters\n            if (idx !== 0 && idx !== lastIdx) {\n                if (idx < this.charDict.length) {\n                    decoded.push(this.charDict[idx]);\n                    decodedScores.push(scores[i]);\n                }\n            }\n            lastIdx = idx;\n        }\n        \n        return {\n            text: decoded.join(''),\n            score: decodedScores.length > 0 ? \n                decodedScores.reduce((a, b) => a + b) / decodedScores.length : 0\n        };\n    }\n\n    mergeTextLines(results) {\n        if (results.length === 0) return results;\n        \n        // Filter results by confidence score first (RapidOCR approach)\n        let filteredResults = this.filterResults(results);\n        if (filteredResults.length === 0) return filteredResults;\n        \n        // Apply English-specific post-processing if enabled\n        if (CONFIG.english_mode) {\n            filteredResults = this.postProcessEnglishText(filteredResults);\n        }\n        \n        // Calculate average text height\n        const heights = filteredResults.map(r => {\n            const ys = r.box.map(p => p[1]);\n            return Math.max(...ys) - Math.min(...ys);\n        });\n        const avgHeight = heights.reduce((a, b) => a + b) / heights.length;\n        \n        // Group results into lines\n        const lines = [];\n        let currentLine = [filteredResults[0]];\n        \n        for (let i = 1; i < filteredResults.length; i++) {\n            const current = filteredResults[i];\n            const previous = filteredResults[i - 1];\n            \n            const prevY = Math.min(...previous.box.map(p => p[1]));\n            const currY = Math.min(...current.box.map(p => p[1]));\n            \n            const verticalGap = Math.abs(currY - prevY);\n            const threshold = avgHeight * CONFIG.vertical_gap_threshold;\n            \n            if (verticalGap <= threshold) {\n                currentLine.push(current);\n            } else {\n                lines.push(currentLine);\n                currentLine = [current];\n            }\n        }\n        \n        if (currentLine.length > 0) {\n            lines.push(currentLine);\n        }\n        \n        // Merge text within each line\n        const mergedResults = [];\n        for (const line of lines) {\n            // Sort by x-coordinate within line\n            line.sort((a, b) => {\n                const aX = Math.min(...a.box.map(p => p[0]));\n                const bX = Math.min(...b.box.map(p => p[0]));\n                return aX - bX;\n            });\n            \n            // Merge text\n            const text = line.map(r => r.text).join(' ');\n            const avgConfidence = line.reduce((sum, r) => sum + r.confidence, 0) / line.length;\n            \n            // Calculate combined bounding box\n            const allPoints = line.flatMap(r => r.box);\n            const xs = allPoints.map(p => p[0]);\n            const ys = allPoints.map(p => p[1]);\n            \n            mergedResults.push({\n                text: text,\n                confidence: avgConfidence,\n                box: [\n                    [Math.min(...xs), Math.min(...ys)],\n                    [Math.max(...xs), Math.min(...ys)],\n                    [Math.max(...xs), Math.max(...ys)],\n                    [Math.min(...xs), Math.max(...ys)]\n                ]\n            });\n        }\n        \n        return mergedResults;\n    }\n\n    filterResults(results) {\n        // Filter out low confidence results - much lower threshold\n        const textScoreThreshold = CONFIG.drop_score; // Use the configured drop score\n        return results.filter(result => {\n            // Keep results with any reasonable confidence\n            if (result.confidence < textScoreThreshold) {\n                return false;\n            }\n            \n            // Keep any text that has content (even single characters)\n            return result.text && result.text.trim().length > 0;\n        });\n    }\n\n    async processPDF(pdfBlob) {\n        const arrayBuffer = await pdfBlob.arrayBuffer();\n        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n        const numPages = pdf.numPages;\n        const allResults = [];\n        \n        for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const viewport = page.getViewport({ scale: 2.0 });\n            \n            // Render page to canvas\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = viewport.width;\n            canvas.height = viewport.height;\n            \n            await page.render({\n                canvasContext: ctx,\n                viewport: viewport\n            }).promise;\n            \n            // Convert to blob\n            const blob = await new Promise(resolve => canvas.toBlob(resolve));\n            \n            // Process as image\n            const pageResults = await this.process(blob);\n            \n            allResults.push({\n                page: pageNum,\n                results: pageResults\n            });\n        }\n        \n        return allResults;\n    }\n\n    async blobToImage(blob) {\n        return new Promise((resolve, reject) => {\n            const img = new Image();\n            const url = URL.createObjectURL(blob);\n            \n            img.onload = () => {\n                URL.revokeObjectURL(url);\n                resolve(img);\n            };\n            \n            img.onerror = () => {\n                URL.revokeObjectURL(url);\n                reject(new Error('Failed to load image'));\n            };\n            \n            img.src = url;\n        });\n    }\n    \n    postProcessEnglishText(results) {\n        // English-specific post-processing\n        return results.map(result => {\n            let text = result.text;\n            \n            // Fix common OCR errors in English\n            text = text\n                .replace(/([a-z])([A-Z])/g, '$1 $2')  // Split camelCase\n                .replace(/([a-zA-Z])(\\d)/g, '$1 $2')   // Split letters from numbers\n                .replace(/(\\d)([a-zA-Z])/g, '$1 $2')   // Split numbers from letters\n                .replace(/\\s+/g, ' ')                   // Normalize whitespace\n                .replace(/([.,!?;:])([a-zA-Z])/g, '$1 $2') // Add space after punctuation\n                .trim();\n            \n            // Common English OCR corrections\n            const corrections = {\n                'tne': 'the',\n                'tnat': 'that',\n                'wnen': 'when',\n                'wnere': 'where',\n                'witn': 'with',\n                'l\\'': 'I\\'',\n                ' l ': ' I ',\n                '^l ': 'I ',\n            };\n            \n            for (const [wrong, correct] of Object.entries(corrections)) {\n                const regex = new RegExp(wrong, 'gi');\n                text = text.replace(regex, correct);\n            }\n            \n            return {\n                ...result,\n                text: text\n            };\n        });\n    }\n}\n\n// Create singleton instance\nexport const ppOCRImprovedEngine = new PPOCRImprovedEngine();","import * as ort from 'onnxruntime-web';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = '/client-ocr-app/pdf.worker.min.js';\n\n// Configure ONNX Runtime to use the bundled WASM files\nort.env.wasm.wasmPaths = '/client-ocr-app/assets/';\nort.env.wasm.numThreads = 1;  // Disable multi-threading to avoid CORS issues\n\n// Model paths - will be served from your GitHub Pages\nconst MODEL_BASE = '/client-ocr-app/models/';\nconst MODELS = {\n    detection: {\n        path: MODEL_BASE + 'PP-OCRv5_mobile_det_infer.onnx',\n        name: 'PP-OCRv5 Mobile Detection'\n    },\n    recognition: {\n        // Use PP-OCRv4 English model for better English recognition\n        path: MODEL_BASE + 'en_PP-OCRv4_mobile_rec_infer.onnx',\n        name: 'PP-OCRv4 English Recognition'\n    },\n    dictionary: {\n        // Use English dictionary for PP-OCRv4\n        path: MODEL_BASE + 'en_dict.txt',\n        name: 'English Dictionary'\n    }\n};\n\n// OCR configuration - optimized with very low thresholds\nconst CONFIG = {\n    // Detection parameters\n    det_limit_side_len: 1280,\n    det_limit_type: 'max',\n    det_db_thresh: 0.05,      // Very low threshold for maximum detection\n    det_db_box_thresh: 0.15,  // Very low box threshold\n    det_db_unclip_ratio: 2.5, // Higher coverage\n    \n    // Recognition parameters\n    rec_batch_num: 6,\n    drop_score: 0.05,         // Extremely low threshold to keep all text\n    \n    // Image preprocessing (ImageNet normalization)\n    mean: [0.485, 0.456, 0.406],\n    std: [0.229, 0.224, 0.225]\n};\n\nexport class PPOCREngine {\n    constructor() {\n        this.detectionSession = null;\n        this.recognitionSession = null;\n        this.charDict = [];\n        this.initialized = false;\n        this.canvas = null;\n        this.ctx = null;\n        this.modelConfig = {\n            detection: 'PP-OCRv5_mobile_det_infer.onnx',  // PP-OCRv5 mobile detection\n            recognition: 'en_PP-OCRv4_mobile_rec_infer.onnx',  // English-specific model\n            dictionary: 'en_dict.txt'  // English dictionary\n        };\n    }\n\n    setModelConfig(config) {\n        // Update model configuration\n        if (config.detection) this.modelConfig.detection = config.detection;\n        if (config.recognition) this.modelConfig.recognition = config.recognition;\n        if (config.dictionary) this.modelConfig.dictionary = config.dictionary;\n        \n        // Mark as not initialized to force reload\n        this.initialized = false;\n    }\n\n    async initialize(progressCallback) {\n        // Always reinitialize when called to ensure proper model loading\n        this.initialized = false;\n\n        try {\n            // Create canvas for image processing with willReadFrequently for better performance\n            this.canvas = document.createElement('canvas');\n            this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });\n\n            // Load dictionary\n            progressCallback?.({ status: 'loading', message: 'Loading dictionary...', progress: 10 });\n            await this.loadDictionary();\n\n            // Load detection model\n            const detectionName = this.modelConfig.detection.replace('.onnx', '').replace(/_/g, ' ');\n            progressCallback?.({ status: 'loading', message: `Loading ${detectionName}...`, progress: 30 });\n            \n            // Release existing session if any\n            if (this.detectionSession) {\n                await this.detectionSession.release();\n            }\n            \n            this.detectionSession = await ort.InferenceSession.create(\n                MODEL_BASE + this.modelConfig.detection, \n                {\n                    executionProviders: ['wasm'],\n                    graphOptimizationLevel: 'all'\n                }\n            );\n            console.log('Detection model loaded:', this.detectionSession.inputNames, this.detectionSession.outputNames);\n\n            // Load recognition model\n            const recognitionName = this.modelConfig.recognition.replace('.onnx', '').replace(/_/g, ' ');\n            progressCallback?.({ status: 'loading', message: `Loading ${recognitionName}...`, progress: 70 });\n            \n            // Release existing session if any\n            if (this.recognitionSession) {\n                await this.recognitionSession.release();\n            }\n            \n            this.recognitionSession = await ort.InferenceSession.create(\n                MODEL_BASE + this.modelConfig.recognition, \n                {\n                    executionProviders: ['wasm'],\n                    graphOptimizationLevel: 'all'\n                }\n            );\n            console.log('Recognition model loaded:', this.recognitionSession.inputNames, this.recognitionSession.outputNames);\n\n            this.initialized = true;\n            progressCallback?.({ status: 'ready', message: 'PP-OCR models loaded successfully!', progress: 100 });\n        } catch (error) {\n            console.error('Failed to initialize PP-OCR models:', error);\n            throw error;\n        }\n    }\n\n    async loadDictionary() {\n        try {\n            const response = await fetch(MODEL_BASE + this.modelConfig.dictionary);\n            const text = await response.text();\n            this.charDict = text.split('\\n').filter(line => line.trim());\n            // Add blank token at the beginning\n            this.charDict.unshift(' ');\n            console.log(`Loaded dictionary ${this.modelConfig.dictionary} with ${this.charDict.length} characters`);\n        } catch (error) {\n            console.error('Failed to load dictionary:', error);\n            // Use basic ASCII as fallback\n            this.charDict = [' '];\n            for (let i = 32; i < 127; i++) {\n                this.charDict.push(String.fromCharCode(i));\n            }\n        }\n    }\n\n    async process(imageBlob) {\n        if (!this.initialized) {\n            throw new Error('OCR engine not initialized');\n        }\n\n        // Check if it's a PDF\n        if (imageBlob.type === 'application/pdf') {\n            return await this.processPDF(imageBlob);\n        }\n\n        // Convert blob to image\n        const imageData = await this.blobToImage(imageBlob);\n        \n        // Detect text regions\n        const boxes = await this.detectText(imageData);\n        \n        // Recognize text in each region\n        const results = await this.recognizeText(imageData, boxes);\n        \n        return results;\n    }\n\n    async detectText(imageData) {\n        if (!this.detectionSession) {\n            throw new Error('Detection model not loaded');\n        }\n\n        // Resize image for detection\n        const { resizedImage, ratio } = await this.resizeForDetection(imageData);\n        \n        // Preprocess image\n        const inputTensor = await this.preprocessForDetection(resizedImage);\n        \n        // Run detection\n        const feeds = { [this.detectionSession.inputNames[0]]: inputTensor };\n        const results = await this.detectionSession.run(feeds);\n        \n        // Post-process detection results\n        const outputTensor = results[this.detectionSession.outputNames[0]];\n        const boxes = await this.postprocessDetection(outputTensor, resizedImage.width, resizedImage.height, ratio);\n        \n        return boxes;\n    }\n\n    async resizeForDetection(imageData) {\n        const limit = CONFIG.det_limit_side_len;\n        const limitType = CONFIG.det_limit_type;\n        \n        let w = imageData.width;\n        let h = imageData.height;\n        \n        // Calculate resize ratio\n        let ratio = 1.0;\n        if (limitType === 'max') {\n            if (Math.max(h, w) > limit) {\n                ratio = limit / Math.max(h, w);\n            }\n        } else {\n            if (Math.min(h, w) < limit) {\n                ratio = limit / Math.min(h, w);\n            }\n        }\n        \n        const newW = Math.ceil(w * ratio);\n        const newH = Math.ceil(h * ratio);\n        \n        // Make dimensions divisible by 32\n        const targetW = Math.ceil(newW / 32) * 32;\n        const targetH = Math.ceil(newH / 32) * 32;\n        \n        // Resize image\n        this.canvas.width = targetW;\n        this.canvas.height = targetH;\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, targetW, targetH);\n        this.ctx.drawImage(imageData, 0, 0, newW, newH);\n        \n        const resizedImage = new Image();\n        return new Promise((resolve) => {\n            this.canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                resizedImage.onload = () => {\n                    URL.revokeObjectURL(url);\n                    resolve({ resizedImage, ratio });\n                };\n                resizedImage.src = url;\n            });\n        });\n    }\n\n    async preprocessForDetection(imageData) {\n        // Draw image to canvas\n        this.canvas.width = imageData.width;\n        this.canvas.height = imageData.height;\n        this.ctx.drawImage(imageData, 0, 0);\n        \n        const imgData = this.ctx.getImageData(0, 0, imageData.width, imageData.height);\n        const pixels = imgData.data;\n        \n        // Create tensor [1, 3, H, W]\n        const size = imageData.width * imageData.height;\n        const floatData = new Float32Array(3 * size);\n        \n        // Normalize and rearrange to CHW format\n        for (let i = 0; i < size; i++) {\n            const pixelIndex = i * 4;\n            floatData[i] = (pixels[pixelIndex] / 255.0 - CONFIG.mean[0]) / CONFIG.std[0];\n            floatData[size + i] = (pixels[pixelIndex + 1] / 255.0 - CONFIG.mean[1]) / CONFIG.std[1];\n            floatData[2 * size + i] = (pixels[pixelIndex + 2] / 255.0 - CONFIG.mean[2]) / CONFIG.std[2];\n        }\n        \n        return new ort.Tensor('float32', floatData, [1, 3, imageData.height, imageData.width]);\n    }\n\n    async postprocessDetection(outputTensor, imgWidth, imgHeight, ratio) {\n        const [batchSize, channels, height, width] = outputTensor.dims;\n        const data = outputTensor.data;\n        \n        // Apply sigmoid to get probabilities\n        const probMap = new Float32Array(height * width);\n        for (let i = 0; i < height * width; i++) {\n            probMap[i] = 1 / (1 + Math.exp(-data[i]));  // Sigmoid\n        }\n        \n        // Apply threshold\n        const bitmap = new Uint8Array(height * width);\n        const thresh = CONFIG.det_db_thresh;\n        \n        for (let i = 0; i < height * width; i++) {\n            bitmap[i] = probMap[i] > thresh ? 1 : 0;\n        }\n        \n        // Find text regions\n        const boxes = [];\n        const visited = new Set();\n        \n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const idx = y * width + x;\n                if (bitmap[idx] === 1 && !visited.has(idx) && probMap[idx] > CONFIG.det_db_box_thresh) {\n                    const box = this.expandBox(bitmap, probMap, x, y, width, height, visited);\n                    if (box) {\n                        // Scale box back to original size\n                        const scaledBox = {\n                            points: box.points.map(p => [\n                                Math.round(p[0] * imgWidth / width / ratio),\n                                Math.round(p[1] * imgHeight / height / ratio)\n                            ]),\n                            score: box.score\n                        };\n                        boxes.push(scaledBox);\n                    }\n                }\n            }\n        }\n        \n        return this.sortBoxes(boxes);\n    }\n\n    expandBox(bitmap, scores, startX, startY, width, height, visited) {\n        let minX = startX, maxX = startX;\n        let minY = startY, maxY = startY;\n        let totalScore = 0;\n        let count = 0;\n        \n        // BFS to find connected component\n        const queue = [[startX, startY]];\n        visited.add(startY * width + startX);\n        \n        while (queue.length > 0) {\n            const [x, y] = queue.shift();\n            totalScore += scores[y * width + x];\n            count++;\n            \n            // Check neighbors\n            for (let dy = -1; dy <= 1; dy++) {\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = x + dx;\n                    const ny = y + dy;\n                    const nidx = ny * width + nx;\n                    \n                    if (nx >= 0 && nx < width && ny >= 0 && ny < height && \n                        bitmap[nidx] === 1 && !visited.has(nidx)) {\n                        visited.add(nidx);\n                        queue.push([nx, ny]);\n                        minX = Math.min(minX, nx);\n                        maxX = Math.max(maxX, nx);\n                        minY = Math.min(minY, ny);\n                        maxY = Math.max(maxY, ny);\n                    }\n                }\n            }\n        }\n        \n        // Filter small regions - lower threshold\n        if ((maxX - minX) < 3 || (maxY - minY) < 3) {\n            return null;\n        }\n        \n        // Apply unclip ratio\n        const unclipRatio = CONFIG.det_db_unclip_ratio;\n        const padding = Math.max((maxX - minX), (maxY - minY)) * (unclipRatio - 1) / 2;\n        \n        minX = Math.max(0, minX - padding);\n        maxX = Math.min(width - 1, maxX + padding);\n        minY = Math.max(0, minY - padding);\n        maxY = Math.min(height - 1, maxY + padding);\n        \n        return {\n            points: [\n                [minX, minY],\n                [maxX, minY],\n                [maxX, maxY],\n                [minX, maxY]\n            ],\n            score: totalScore / count\n        };\n    }\n\n    sortBoxes(boxes) {\n        // Sort boxes from top to bottom, left to right\n        return boxes.sort((a, b) => {\n            const aY = Math.min(...a.points.map(p => p[1]));\n            const bY = Math.min(...b.points.map(p => p[1]));\n            \n            if (Math.abs(aY - bY) < 10) {\n                const aX = Math.min(...a.points.map(p => p[0]));\n                const bX = Math.min(...b.points.map(p => p[0]));\n                return aX - bX;\n            }\n            return aY - bY;\n        });\n    }\n\n    async recognizeText(imageData, boxes) {\n        if (!this.recognitionSession) {\n            throw new Error('Recognition model not loaded');\n        }\n\n        const results = [];\n        \n        for (const box of boxes) {\n            // Crop image to box region\n            const cropped = await this.cropToBox(imageData, box);\n            \n            // Preprocess for recognition\n            const inputTensor = await this.preprocessForRecognition(cropped);\n            \n            // Run recognition\n            const feeds = { [this.recognitionSession.inputNames[0]]: inputTensor };\n            const output = await this.recognitionSession.run(feeds);\n            \n            // Decode the output\n            const result = await this.decodeRecognition(output[this.recognitionSession.outputNames[0]]);\n            \n            if (result.score >= CONFIG.drop_score) {\n                results.push({\n                    text: result.text,\n                    confidence: result.score,\n                    box: box.points\n                });\n            }\n        }\n        \n        return results;\n    }\n\n    async cropToBox(imageData, box) {\n        const points = box.points;\n        const minX = Math.min(...points.map(p => p[0]));\n        const maxX = Math.max(...points.map(p => p[0]));\n        const minY = Math.min(...points.map(p => p[1]));\n        const maxY = Math.max(...points.map(p => p[1]));\n        \n        const width = maxX - minX;\n        const height = maxY - minY;\n        \n        this.canvas.width = width;\n        this.canvas.height = height;\n        \n        this.ctx.drawImage(imageData, minX, minY, width, height, 0, 0, width, height);\n        \n        const imgElement = new Image();\n        return new Promise((resolve) => {\n            this.canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                imgElement.onload = () => {\n                    URL.revokeObjectURL(url);\n                    resolve(imgElement);\n                };\n                imgElement.src = url;\n            });\n        });\n    }\n\n    async preprocessForRecognition(imageData) {\n        // Recognition model expects fixed height (48) and variable width\n        const targetHeight = 48;\n        const aspectRatio = imageData.width / imageData.height;\n        let targetWidth = Math.round(targetHeight * aspectRatio);\n        \n        // Ensure minimum width\n        targetWidth = Math.max(targetWidth, 48);\n        \n        // Resize image\n        this.canvas.width = targetWidth;\n        this.canvas.height = targetHeight;\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, targetWidth, targetHeight);\n        this.ctx.drawImage(imageData, 0, 0, targetWidth, targetHeight);\n        \n        const imgData = this.ctx.getImageData(0, 0, targetWidth, targetHeight);\n        const pixels = imgData.data;\n        \n        // Create tensor [1, 3, H, W]\n        const size = targetWidth * targetHeight;\n        const floatData = new Float32Array(3 * size);\n        \n        // Normalize\n        for (let i = 0; i < size; i++) {\n            const pixelIndex = i * 4;\n            floatData[i] = (pixels[pixelIndex] / 255.0 - 0.5) / 0.5;\n            floatData[size + i] = (pixels[pixelIndex + 1] / 255.0 - 0.5) / 0.5;\n            floatData[2 * size + i] = (pixels[pixelIndex + 2] / 255.0 - 0.5) / 0.5;\n        }\n        \n        return new ort.Tensor('float32', floatData, [1, 3, targetHeight, targetWidth]);\n    }\n\n    async decodeRecognition(outputTensor) {\n        // CTC decoding\n        const [batchSize, seqLen, vocabSize] = outputTensor.dims;\n        const preds = outputTensor.data;\n        \n        // Get argmax for each time step\n        const predIdxs = [];\n        const scores = [];\n        \n        for (let t = 0; t < seqLen; t++) {\n            let maxIdx = 0;\n            let maxVal = preds[t * vocabSize];\n            \n            for (let c = 1; c < vocabSize; c++) {\n                const val = preds[t * vocabSize + c];\n                if (val > maxVal) {\n                    maxVal = val;\n                    maxIdx = c;\n                }\n            }\n            predIdxs.push(maxIdx);\n            scores.push(maxVal);\n        }\n        \n        // CTC decode: remove blanks and repeated characters\n        const decoded = [];\n        const decodedScores = [];\n        let lastIdx = -1;\n        \n        for (let i = 0; i < predIdxs.length; i++) {\n            const idx = predIdxs[i];\n            \n            // Skip blank (index 0) and repeated characters\n            if (idx !== 0 && idx !== lastIdx) {\n                if (idx < this.charDict.length) {\n                    decoded.push(this.charDict[idx]);\n                    decodedScores.push(scores[i]);\n                }\n            }\n            lastIdx = idx;\n        }\n        \n        return {\n            text: decoded.join(''),\n            score: decodedScores.length > 0 ? \n                decodedScores.reduce((a, b) => a + b) / decodedScores.length : 0\n        };\n    }\n\n    async processPDF(pdfBlob) {\n        const arrayBuffer = await pdfBlob.arrayBuffer();\n        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n        const numPages = pdf.numPages;\n        const allResults = [];\n        \n        for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const viewport = page.getViewport({ scale: 2.0 });\n            \n            // Render page to canvas\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = viewport.width;\n            canvas.height = viewport.height;\n            \n            await page.render({\n                canvasContext: ctx,\n                viewport: viewport\n            }).promise;\n            \n            // Convert canvas to blob and process\n            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\n            const pageImage = await this.blobToImage(blob);\n            \n            // Process with OCR\n            const boxes = await this.detectText(pageImage);\n            const pageResults = await this.recognizeText(pageImage, boxes);\n            \n            allResults.push({\n                page: pageNum,\n                results: pageResults\n            });\n        }\n        \n        return allResults;\n    }\n\n    async blobToImage(blob) {\n        return new Promise((resolve, reject) => {\n            const img = new Image();\n            img.onload = () => resolve(img);\n            img.onerror = reject;\n            img.src = URL.createObjectURL(blob);\n        });\n    }\n}\n\n// Create singleton instance\nexport const ppOCREngine = new PPOCREngine();","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","module.exports = (prefix, cnt) => (\n  `${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`\n);\n","const getId = require('./utils/getId');\n\nlet jobCounter = 0;\n\nmodule.exports = ({\n  id: _id,\n  action,\n  payload = {},\n}) => {\n  let id = _id;\n  if (typeof id === 'undefined') {\n    id = getId('Job', jobCounter);\n    jobCounter += 1;\n  }\n\n  return {\n    id,\n    action,\n    payload,\n  };\n};\n","let logging = false;\n\nexports.logging = logging;\n\nexports.setLogging = (_logging) => {\n  logging = _logging;\n};\n\nexports.log = (...args) => (logging ? console.log.apply(this, args) : null);\n","const createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => (\n    new Promise((resolve, reject) => {\n      const job = createJob({ action, payload });\n      jobQueue.push(async (w) => {\n        jobQueue.shift();\n        runningWorkers[w.id] = job;\n        try {\n          resolve(await w[action].apply(this, [...payload, job.id]));\n        } catch (err) {\n          reject(err);\n        } finally {\n          delete runningWorkers[w.id];\n          dequeue();\n        }\n      });\n      log(`[${id}]: Add ${job.id} to JobQueue`);\n      log(`[${id}]: JobQueue length=${jobQueue.length}`);\n      dequeue();\n    })\n  );\n\n  const addWorker = (w) => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = async (action, ...payload) => {\n    if (getNumWorkers() === 0) {\n      throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n    }\n    return queue(action, payload);\n  };\n\n  const terminate = async () => {\n    Object.keys(workers).forEach(async (wid) => {\n      await workers[wid].terminate();\n    });\n    jobQueue = [];\n  };\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers,\n  };\n};\n","// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to false\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = isElectron;\n","const isElectron = require('is-electron');\n\nmodule.exports = (key) => {\n  const env = {};\n\n  if (typeof WorkerGlobalScope !== 'undefined') {\n    env.type = 'webworker';\n  } else if (isElectron()) {\n    env.type = 'electron';\n  } else if (typeof document === 'object') {\n    env.type = 'browser';\n  } else if (typeof process === 'object' && typeof require === 'function') {\n    env.type = 'node';\n  }\n\n  if (typeof key === 'undefined') {\n    return env;\n  }\n\n  return env[key];\n};\n","const isBrowser = require('./getEnvironment')('type') === 'browser';\n\nconst resolveURL = isBrowser ? s => (new URL(s, window.location.href)).href : s => s; // eslint-disable-line\n\nmodule.exports = (options) => {\n  const opts = { ...options };\n  ['corePath', 'workerPath', 'langPath'].forEach((key) => {\n    if (options[key]) {\n      opts[key] = resolveURL(opts[key]);\n    }\n  });\n  return opts;\n};\n","/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  if (page.blocks) {\n    page.blocks.forEach((block) => {\n      block.paragraphs.forEach((paragraph) => {\n        paragraph.lines.forEach((line) => {\n          line.words.forEach((word) => {\n            word.symbols.forEach((sym) => {\n              symbols.push({\n                ...sym, page, block, paragraph, line, word,\n              });\n            });\n            words.push({\n              ...word, page, block, paragraph, line,\n            });\n          });\n          lines.push({\n            ...line, page, block, paragraph,\n          });\n        });\n        paragraphs.push({\n          ...paragraph, page, block,\n        });\n      });\n      blocks.push({\n        ...block, page,\n      });\n    });\n  }\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n","/*\n * OEM = OCR Engine Mode, and there are 4 possible modes.\n *\n * By default tesseract.js uses LSTM_ONLY mode.\n *\n */\nmodule.exports = {\n  TESSERACT_ONLY: 0,\n  LSTM_ONLY: 1,\n  TESSERACT_LSTM_COMBINED: 2,\n  DEFAULT: 3,\n};\n","module.exports = {\n  /*\n   * Use BlobURL for worker script by default\n   * TODO: remove this option\n   *\n   */\n  workerBlobURL: true,\n  logger: () => {},\n};\n","const version = require('../../../package.json').version;\nconst defaultOptions = require('../../constants/defaultOptions');\n\n/*\n * Default options for browser worker\n */\nmodule.exports = {\n  ...defaultOptions,\n  workerPath: `https://cdn.jsdelivr.net/npm/tesseract.js@v${version}/dist/worker.min.js`,\n};\n","/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = ({ workerPath, workerBlobURL }) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript',\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n\n  return worker;\n};\n","/**\n * terminateWorker\n *\n * @name terminateWorker\n * @function terminate worker\n * @access public\n */\nmodule.exports = (worker) => {\n  worker.terminate();\n};\n","module.exports = (worker, handler) => {\n  worker.onmessage = ({ data }) => { // eslint-disable-line\n    handler(data);\n  };\n};\n","/**\n * send\n *\n * @name send\n * @function send packet to worker and create a job\n * @access public\n */\nmodule.exports = async (worker, packet) => {\n  worker.postMessage(packet);\n};\n","/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(image);\n      data = await resp.arrayBuffer();\n    }\n  } else if (typeof HTMLElement !== 'undefined' && image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas) {\n    const blob = await image.convertToBlob();\n    data = await readFromBlobOrFile(blob);\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n","/**\n *\n * Tesseract Worker adapter for browser\n *\n * @fileoverview Tesseract Worker adapter for browser\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst defaultOptions = require('./defaultOptions');\nconst spawnWorker = require('./spawnWorker');\nconst terminateWorker = require('./terminateWorker');\nconst onMessage = require('./onMessage');\nconst send = require('./send');\nconst loadImage = require('./loadImage');\n\nmodule.exports = {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  send,\n  loadImage,\n};\n","const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst OEM = require('./constants/OEM');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (langs = 'eng', oem = OEM.LSTM_ONLY, _options = {}, config = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n\n  // Current langs, oem, and config file.\n  // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n  const currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n  let currentOem = oem;\n  let currentConfig = config;\n  const lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const setResolve = (promiseId, res) => {\n    resolves[promiseId] = res;\n  };\n\n  const setReject = (promiseId, rej) => {\n    rejects[promiseId] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      // Using both `action` and `jobId` in case user provides non-unique `jobId`.\n      const promiseId = `${action}-${jobId}`;\n      setResolve(promiseId, resolve);\n      setReject(promiseId, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options: { lstmOnly: lstmOnlyCore, corePath: options.corePath, logging: options.logging } },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = () => (\n    console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)')\n  );\n\n  const loadLanguageInternal = (_langs, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs: _langs,\n      options: {\n        langPath: options.langPath,\n        dataPath: options.dataPath,\n        cachePath: options.cachePath,\n        cacheMethod: options.cacheMethod,\n        gzip: options.gzip,\n        lstmOnly: [OEM.DEFAULT, OEM.LSTM_ONLY].includes(currentOem)\n          && !options.legacyLang,\n      },\n    },\n  }));\n\n  const initialize = () => (\n    console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)')\n  );\n\n  const initializeInternal = (_langs, _oem, _config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs: _langs, oem: _oem, config: _config },\n    }))\n  );\n\n  const reinitialize = (langs = 'eng', oem, config, jobId) => { // eslint-disable-line\n\n    if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n\n    const _oem = oem || currentOem;\n    currentOem = _oem;\n\n    const _config = config || currentConfig;\n    currentConfig = _config;\n\n    // Only load langs that are not already loaded.\n    // This logic fails if the user downloaded the LSTM-only English data for a language\n    // and then uses `worker.reinitialize` to switch to the Legacy engine.\n    // However, the correct data will still be downloaded after initialization fails\n    // and this can be avoided entirely if the user loads the correct data ahead of time.\n    const langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n    const _langs = langsArr.filter((x) => !currentLangs.includes(x));\n    currentLangs.push(..._langs);\n\n    if (_langs.length > 0) {\n      return loadLanguageInternal(_langs, jobId)\n        .then(() => initializeInternal(langs, _oem, _config, jobId));\n    }\n\n    return initializeInternal(langs, _oem, _config, jobId);\n  };\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    blocks: true, text: true, hocr: true, tsv: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }));\n  };\n\n  const detect = async (image, jobId) => {\n    if (lstmOnlyCore) throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n\n    return startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }));\n  };\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    const promiseId = `${action}-${jobId}`;\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[promiseId]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[promiseId](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n\n  loadInternal()\n    .then(() => loadLanguageInternal(langs))\n    .then(() => initializeInternal(langs, oem, config))\n    .then(() => workerResResolve(resolveObj))\n    .catch(() => {});\n\n  return workerRes;\n};\n","const createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = await createWorker(langs, 1, options);\n  return worker.recognize(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nconst detect = async (image, options) => {\n  const worker = await createWorker('osd', 0, options);\n  return worker.detect(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nmodule.exports = {\n  recognize,\n  detect,\n};\n","/*\n * languages with existing tesseract traineddata\n * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n */\n\n/**\n * @typedef {object} Languages\n * @property {string} AFR Afrikaans\n * @property {string} AMH Amharic\n * @property {string} ARA Arabic\n * @property {string} ASM Assamese\n * @property {string} AZE Azerbaijani\n * @property {string} AZE_CYRL Azerbaijani - Cyrillic\n * @property {string} BEL Belarusian\n * @property {string} BEN Bengali\n * @property {string} BOD Tibetan\n * @property {string} BOS Bosnian\n * @property {string} BUL Bulgarian\n * @property {string} CAT Catalan; Valencian\n * @property {string} CEB Cebuano\n * @property {string} CES Czech\n * @property {string} CHI_SIM Chinese - Simplified\n * @property {string} CHI_TRA Chinese - Traditional\n * @property {string} CHR Cherokee\n * @property {string} CYM Welsh\n * @property {string} DAN Danish\n * @property {string} DEU German\n * @property {string} DZO Dzongkha\n * @property {string} ELL Greek, Modern (1453-)\n * @property {string} ENG English\n * @property {string} ENM English, Middle (1100-1500)\n * @property {string} EPO Esperanto\n * @property {string} EST Estonian\n * @property {string} EUS Basque\n * @property {string} FAS Persian\n * @property {string} FIN Finnish\n * @property {string} FRA French\n * @property {string} FRK German Fraktur\n * @property {string} FRM French, Middle (ca. 1400-1600)\n * @property {string} GLE Irish\n * @property {string} GLG Galician\n * @property {string} GRC Greek, Ancient (-1453)\n * @property {string} GUJ Gujarati\n * @property {string} HAT Haitian; Haitian Creole\n * @property {string} HEB Hebrew\n * @property {string} HIN Hindi\n * @property {string} HRV Croatian\n * @property {string} HUN Hungarian\n * @property {string} IKU Inuktitut\n * @property {string} IND Indonesian\n * @property {string} ISL Icelandic\n * @property {string} ITA Italian\n * @property {string} ITA_OLD Italian - Old\n * @property {string} JAV Javanese\n * @property {string} JPN Japanese\n * @property {string} KAN Kannada\n * @property {string} KAT Georgian\n * @property {string} KAT_OLD Georgian - Old\n * @property {string} KAZ Kazakh\n * @property {string} KHM Central Khmer\n * @property {string} KIR Kirghiz; Kyrgyz\n * @property {string} KOR Korean\n * @property {string} KUR Kurdish\n * @property {string} LAO Lao\n * @property {string} LAT Latin\n * @property {string} LAV Latvian\n * @property {string} LIT Lithuanian\n * @property {string} MAL Malayalam\n * @property {string} MAR Marathi\n * @property {string} MKD Macedonian\n * @property {string} MLT Maltese\n * @property {string} MSA Malay\n * @property {string} MYA Burmese\n * @property {string} NEP Nepali\n * @property {string} NLD Dutch; Flemish\n * @property {string} NOR Norwegian\n * @property {string} ORI Oriya\n * @property {string} PAN Panjabi; Punjabi\n * @property {string} POL Polish\n * @property {string} POR Portuguese\n * @property {string} PUS Pushto; Pashto\n * @property {string} RON Romanian; Moldavian; Moldovan\n * @property {string} RUS Russian\n * @property {string} SAN Sanskrit\n * @property {string} SIN Sinhala; Sinhalese\n * @property {string} SLK Slovak\n * @property {string} SLV Slovenian\n * @property {string} SPA Spanish; Castilian\n * @property {string} SPA_OLD Spanish; Castilian - Old\n * @property {string} SQI Albanian\n * @property {string} SRP Serbian\n * @property {string} SRP_LATN Serbian - Latin\n * @property {string} SWA Swahili\n * @property {string} SWE Swedish\n * @property {string} SYR Syriac\n * @property {string} TAM Tamil\n * @property {string} TEL Telugu\n * @property {string} TGK Tajik\n * @property {string} TGL Tagalog\n * @property {string} THA Thai\n * @property {string} TIR Tigrinya\n * @property {string} TUR Turkish\n * @property {string} UIG Uighur; Uyghur\n * @property {string} UKR Ukrainian\n * @property {string} URD Urdu\n * @property {string} UZB Uzbek\n * @property {string} UZB_CYRL Uzbek - Cyrillic\n * @property {string} VIE Vietnamese\n * @property {string} YID Yiddish\n */\n\n/**\n  * @type {Languages}\n  */\nmodule.exports = {\n  AFR: 'afr',\n  AMH: 'amh',\n  ARA: 'ara',\n  ASM: 'asm',\n  AZE: 'aze',\n  AZE_CYRL: 'aze_cyrl',\n  BEL: 'bel',\n  BEN: 'ben',\n  BOD: 'bod',\n  BOS: 'bos',\n  BUL: 'bul',\n  CAT: 'cat',\n  CEB: 'ceb',\n  CES: 'ces',\n  CHI_SIM: 'chi_sim',\n  CHI_TRA: 'chi_tra',\n  CHR: 'chr',\n  CYM: 'cym',\n  DAN: 'dan',\n  DEU: 'deu',\n  DZO: 'dzo',\n  ELL: 'ell',\n  ENG: 'eng',\n  ENM: 'enm',\n  EPO: 'epo',\n  EST: 'est',\n  EUS: 'eus',\n  FAS: 'fas',\n  FIN: 'fin',\n  FRA: 'fra',\n  FRK: 'frk',\n  FRM: 'frm',\n  GLE: 'gle',\n  GLG: 'glg',\n  GRC: 'grc',\n  GUJ: 'guj',\n  HAT: 'hat',\n  HEB: 'heb',\n  HIN: 'hin',\n  HRV: 'hrv',\n  HUN: 'hun',\n  IKU: 'iku',\n  IND: 'ind',\n  ISL: 'isl',\n  ITA: 'ita',\n  ITA_OLD: 'ita_old',\n  JAV: 'jav',\n  JPN: 'jpn',\n  KAN: 'kan',\n  KAT: 'kat',\n  KAT_OLD: 'kat_old',\n  KAZ: 'kaz',\n  KHM: 'khm',\n  KIR: 'kir',\n  KOR: 'kor',\n  KUR: 'kur',\n  LAO: 'lao',\n  LAT: 'lat',\n  LAV: 'lav',\n  LIT: 'lit',\n  MAL: 'mal',\n  MAR: 'mar',\n  MKD: 'mkd',\n  MLT: 'mlt',\n  MSA: 'msa',\n  MYA: 'mya',\n  NEP: 'nep',\n  NLD: 'nld',\n  NOR: 'nor',\n  ORI: 'ori',\n  PAN: 'pan',\n  POL: 'pol',\n  POR: 'por',\n  PUS: 'pus',\n  RON: 'ron',\n  RUS: 'rus',\n  SAN: 'san',\n  SIN: 'sin',\n  SLK: 'slk',\n  SLV: 'slv',\n  SPA: 'spa',\n  SPA_OLD: 'spa_old',\n  SQI: 'sqi',\n  SRP: 'srp',\n  SRP_LATN: 'srp_latn',\n  SWA: 'swa',\n  SWE: 'swe',\n  SYR: 'syr',\n  TAM: 'tam',\n  TEL: 'tel',\n  TGK: 'tgk',\n  TGL: 'tgl',\n  THA: 'tha',\n  TIR: 'tir',\n  TUR: 'tur',\n  UIG: 'uig',\n  UKR: 'ukr',\n  URD: 'urd',\n  UZB: 'uzb',\n  UZB_CYRL: 'uzb_cyrl',\n  VIE: 'vie',\n  YID: 'yid',\n};\n","/*\n * PSM = Page Segmentation Mode\n */\nmodule.exports = {\n  OSD_ONLY: '0',\n  AUTO_OSD: '1',\n  AUTO_ONLY: '2',\n  AUTO: '3',\n  SINGLE_COLUMN: '4',\n  SINGLE_BLOCK_VERT_TEXT: '5',\n  SINGLE_BLOCK: '6',\n  SINGLE_LINE: '7',\n  SINGLE_WORD: '8',\n  CIRCLE_WORD: '9',\n  SINGLE_CHAR: '10',\n  SPARSE_TEXT: '11',\n  SPARSE_TEXT_OSD: '12',\n  RAW_LINE: '13',\n};\n","/**\n *\n * Entry point for tesseract.js, should be the entry when bundling.\n *\n * @fileoverview entry point for tesseract.js\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nrequire('regenerator-runtime/runtime');\nconst createScheduler = require('./createScheduler');\nconst createWorker = require('./createWorker');\nconst Tesseract = require('./Tesseract');\nconst languages = require('./constants/languages');\nconst OEM = require('./constants/OEM');\nconst PSM = require('./constants/PSM');\nconst { setLogging } = require('./utils/log');\n\nmodule.exports = {\n  languages,\n  OEM,\n  PSM,\n  createScheduler,\n  createWorker,\n  setLogging,\n  ...Tesseract,\n};\n","import Tesseract from 'tesseract.js';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\n\nexport class TesseractOCREngine {\n    constructor() {\n        this.initialized = false;\n        this.worker = null;\n    }\n\n    async initialize(progressCallback) {\n        if (this.initialized) return;\n\n        try {\n            progressCallback?.({ \n                status: 'loading', \n                message: 'Loading Tesseract OCR engine...', \n                progress: 10 \n            });\n\n            // Create Tesseract worker\n            this.worker = await Tesseract.createWorker('eng', 1, {\n                logger: (m) => {\n                    if (m.status === 'loading tesseract core') {\n                        progressCallback?.({ \n                            status: 'loading', \n                            message: 'Loading OCR core...', \n                            progress: 30 \n                        });\n                    } else if (m.status === 'loading language traineddata') {\n                        progressCallback?.({ \n                            status: 'loading', \n                            message: 'Loading English language model...', \n                            progress: 60 \n                        });\n                    } else if (m.status === 'initialized tesseract') {\n                        progressCallback?.({ \n                            status: 'loading', \n                            message: 'Initializing OCR engine...', \n                            progress: 90 \n                        });\n                    }\n                },\n                errorHandler: (error) => {\n                    console.error('Tesseract error:', error);\n                }\n            });\n\n            // Configure recognition parameters\n            await this.worker.setParameters({\n                tessedit_ocr_engine_mode: Tesseract.OEM.LSTM_ONLY,\n                preserve_interword_spaces: '1',\n                tessedit_pageseg_mode: Tesseract.PSM.AUTO,\n            });\n\n            this.initialized = true;\n            progressCallback?.({ \n                status: 'ready', \n                message: 'Tesseract OCR engine loaded successfully!', \n                progress: 100 \n            });\n        } catch (error) {\n            console.error('Failed to initialize Tesseract:', error);\n            throw error;\n        }\n    }\n\n    async process(imageBlob) {\n        if (!this.initialized) {\n            throw new Error('OCR engine not initialized');\n        }\n\n        // Check if it's a PDF\n        if (imageBlob.type === 'application/pdf') {\n            return await this.processPDF(imageBlob);\n        }\n\n        // Process image with Tesseract\n        const result = await this.worker.recognize(imageBlob);\n        \n        // Convert Tesseract results to our format\n        return this.formatResults(result);\n    }\n\n    formatResults(tesseractResult) {\n        const results = [];\n        \n        // Process each word\n        for (const word of tesseractResult.data.words) {\n            if (word.confidence > 30) { // Filter low confidence\n                results.push({\n                    box: [\n                        [word.bbox.x0, word.bbox.y0],\n                        [word.bbox.x1, word.bbox.y0],\n                        [word.bbox.x1, word.bbox.y1],\n                        [word.bbox.x0, word.bbox.y1]\n                    ],\n                    text: word.text,\n                    confidence: word.confidence / 100\n                });\n            }\n        }\n\n        // Group words into lines if needed\n        const lines = this.groupWordsIntoLines(results);\n        \n        return lines;\n    }\n\n    groupWordsIntoLines(words) {\n        if (words.length === 0) return [];\n        \n        // Sort words by vertical position\n        words.sort((a, b) => a.box[0][1] - b.box[0][1]);\n        \n        const lines = [];\n        let currentLine = {\n            words: [words[0]],\n            minY: words[0].box[0][1],\n            maxY: words[0].box[2][1]\n        };\n        \n        for (let i = 1; i < words.length; i++) {\n            const word = words[i];\n            const wordY = word.box[0][1];\n            \n            // Check if word is on the same line (within threshold)\n            if (wordY <= currentLine.maxY && wordY >= currentLine.minY - 5) {\n                currentLine.words.push(word);\n                currentLine.minY = Math.min(currentLine.minY, wordY);\n                currentLine.maxY = Math.max(currentLine.maxY, word.box[2][1]);\n            } else {\n                // Start new line\n                lines.push(this.mergeLine(currentLine));\n                currentLine = {\n                    words: [word],\n                    minY: wordY,\n                    maxY: word.box[2][1]\n                };\n            }\n        }\n        \n        // Add last line\n        if (currentLine.words.length > 0) {\n            lines.push(this.mergeLine(currentLine));\n        }\n        \n        return lines;\n    }\n\n    mergeLine(line) {\n        // Sort words horizontally\n        line.words.sort((a, b) => a.box[0][0] - b.box[0][0]);\n        \n        // Calculate bounding box for the entire line\n        const minX = Math.min(...line.words.map(w => w.box[0][0]));\n        const maxX = Math.max(...line.words.map(w => w.box[1][0]));\n        const minY = Math.min(...line.words.map(w => w.box[0][1]));\n        const maxY = Math.max(...line.words.map(w => w.box[2][1]));\n        \n        // Merge text with spaces\n        const text = line.words.map(w => w.text).join(' ');\n        \n        // Average confidence\n        const confidence = line.words.reduce((sum, w) => sum + w.confidence, 0) / line.words.length;\n        \n        return {\n            box: [\n                [minX, minY],\n                [maxX, minY],\n                [maxX, maxY],\n                [minX, maxY]\n            ],\n            text: text,\n            confidence: confidence\n        };\n    }\n\n    async processPDF(pdfBlob) {\n        const arrayBuffer = await pdfBlob.arrayBuffer();\n        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n        const numPages = pdf.numPages;\n        const allResults = [];\n        \n        for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const viewport = page.getViewport({ scale: 2.0 });\n            \n            // Render page to canvas\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = viewport.width;\n            canvas.height = viewport.height;\n            \n            await page.render({\n                canvasContext: ctx,\n                viewport: viewport\n            }).promise;\n            \n            // Convert canvas to blob\n            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\n            \n            // Process with Tesseract\n            const result = await this.worker.recognize(blob);\n            const pageResults = this.formatResults(result);\n            \n            allResults.push({\n                page: pageNum,\n                results: pageResults\n            });\n        }\n        \n        return allResults;\n    }\n\n    async cleanup() {\n        if (this.worker) {\n            await this.worker.terminate();\n            this.worker = null;\n            this.initialized = false;\n        }\n    }\n}\n\n// Create singleton instance\nexport const tesseractOCREngine = new TesseractOCREngine();","import { ppOCRImprovedEngine } from './ppocr-improved-engine.js';\nimport { ppOCREngine } from './ppocr-onnx-engine.js';\nimport { tesseractOCREngine } from './tesseract-ocr-engine.js';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport './style.css';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = '/client-ocr-app/pdf.worker.min.js';\n\n// Global variables\nlet currentImageBlob = null;\nlet currentEngine = 'tesseract';  // Default to tesseract for better accuracy\nlet currentPreprocessing = 'improved'; // 'standard' or 'improved'\nlet currentOCREngine = tesseractOCREngine;\n\n// DOM elements\nconst fileInput = document.getElementById('fileInput');\nconst uploadArea = document.getElementById('uploadArea');\nconst previewSection = document.getElementById('previewSection');\nconst previewImage = document.getElementById('previewImage');\nconst processBtn = document.getElementById('processBtn');\nconst resultsSection = document.getElementById('resultsSection');\nconst loadingIndicator = document.getElementById('loadingIndicator');\nconst ocrResults = document.getElementById('ocrResults');\nconst copyBtn = document.getElementById('copyBtn');\nconst downloadBtn = document.getElementById('downloadBtn');\nconst resetBtn = document.getElementById('resetBtn');\n\n// Initialize the app\nasync function initializeApp() {\n    console.log('Initializing OCR engines...');\n    showStatus('Loading OCR engines...', 'info');\n    \n    try {\n        // Initialize all engines\n        await Promise.all([\n            ppOCRImprovedEngine.initialize((progress) => {\n                if (currentEngine === 'paddle' && currentPreprocessing === 'improved') {\n                    showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n                }\n                \n                // Update loading indicator if visible\n                const loadingText = document.querySelector('#loadingIndicator p');\n                if (loadingText && progress.progress !== undefined && currentEngine === 'paddle' && currentPreprocessing === 'improved') {\n                    loadingText.textContent = `${progress.message} (${progress.progress}%)`;\n                }\n            }),\n            ppOCREngine.initialize((progress) => {\n                if (currentEngine === 'paddle' && currentPreprocessing === 'standard') {\n                    showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n                }\n            }),\n            tesseractOCREngine.initialize((progress) => {\n                if (currentEngine === 'tesseract') {\n                    showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n                }\n            })\n        ]);\n        \n        console.log('OCR engines loaded successfully!');\n        showStatus('Ready to process images', 'success');\n        setupEventListeners();\n    } catch (error) {\n        console.error('Failed to initialize OCR engines:', error);\n        showError('Failed to load OCR engines. Please check your internet connection and refresh the page.');\n    }\n}\n\n// Set up event listeners\nfunction setupEventListeners() {\n    // File upload\n    uploadArea.addEventListener('click', () => fileInput.click());\n    fileInput.addEventListener('change', handleFileSelect);\n    \n    // Drag and drop\n    uploadArea.addEventListener('dragover', handleDragOver);\n    uploadArea.addEventListener('dragleave', handleDragLeave);\n    uploadArea.addEventListener('drop', handleDrop);\n    \n    // Buttons\n    processBtn.addEventListener('click', processImage);\n    copyBtn.addEventListener('click', copyText);\n    downloadBtn.addEventListener('click', downloadText);\n    resetBtn.addEventListener('click', reset);\n    \n    // Engine selection\n    document.querySelectorAll('input[name=\"ocrEngine\"]').forEach(radio => {\n        radio.addEventListener('change', handleEngineChange);\n    });\n    \n    // Preprocessing selection\n    document.querySelectorAll('input[name=\"preprocessing\"]').forEach(radio => {\n        radio.addEventListener('change', handlePreprocessingChange);\n    });\n    \n    // Model selection for PaddleOCR\n    document.getElementById('detectionModel').addEventListener('change', handleModelChange);\n    document.getElementById('recognitionModel').addEventListener('change', handleModelChange);\n    document.getElementById('dictionary').addEventListener('change', handleModelChange);\n}\n\n// Handle engine change\nasync function handleEngineChange(event) {\n    currentEngine = event.target.value;\n    console.log('Engine changed to:', currentEngine);\n    \n    // Update current OCR engine based on both engine and preprocessing selection\n    if (currentEngine === 'paddle') {\n        currentOCREngine = currentPreprocessing === 'improved' ? ppOCRImprovedEngine : ppOCREngine;\n        console.log('Using PaddleOCR engine:', currentPreprocessing);\n    } else {\n        currentOCREngine = tesseractOCREngine;\n        console.log('Using Tesseract engine');\n    }\n    \n    // Show/hide paddle options\n    const paddleOptions = document.getElementById('paddleOptions');\n    paddleOptions.style.display = currentEngine === 'paddle' ? 'block' : 'none';\n    \n    showStatus(`Switched to ${currentEngine === 'paddle' ? 'PaddleOCR' : 'Tesseract.js'}`, 'info');\n}\n\n// Handle preprocessing change\nasync function handlePreprocessingChange(event) {\n    currentPreprocessing = event.target.value;\n    \n    // Only update if PaddleOCR is selected\n    if (currentEngine === 'paddle') {\n        currentOCREngine = currentPreprocessing === 'improved' ? ppOCRImprovedEngine : ppOCREngine;\n        \n        // If using standard preprocessing, we need to update model config and reinitialize\n        if (currentPreprocessing === 'standard') {\n            const detectionModel = document.getElementById('detectionModel').value;\n            const recognitionModel = document.getElementById('recognitionModel').value;\n            const dictionary = document.getElementById('dictionary').value;\n            \n            ppOCREngine.setModelConfig({\n                detection: detectionModel,\n                recognition: recognitionModel,\n                dictionary: dictionary\n            });\n            \n            // Reinitialize the standard engine\n            showStatus('Loading standard preprocessing models...', 'info');\n            try {\n                await ppOCREngine.initialize((progress) => {\n                    showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n                });\n                showStatus('Standard preprocessing ready!', 'success');\n            } catch (error) {\n                console.error('Failed to initialize standard preprocessing:', error);\n                showError('Failed to load standard preprocessing models');\n                // Fallback to improved preprocessing\n                currentPreprocessing = 'improved';\n                currentOCREngine = ppOCRImprovedEngine;\n                document.getElementById('preprocessImproved').checked = true;\n            }\n        }\n        \n        showStatus(`Switched to ${currentPreprocessing === 'improved' ? 'Improved (PPU)' : 'Standard'} preprocessing`, 'info');\n    }\n}\n\n// Handle model change for PaddleOCR\nasync function handleModelChange() {\n    if (currentEngine !== 'paddle') return;\n    \n    const detectionModel = document.getElementById('detectionModel').value;\n    const recognitionModel = document.getElementById('recognitionModel').value;\n    const dictionary = document.getElementById('dictionary').value;\n    \n    // Update model configuration for both engines\n    if (currentPreprocessing === 'improved') {\n        ppOCRImprovedEngine.setModelConfig({\n            detection: detectionModel,\n            recognition: recognitionModel,\n            dictionary: dictionary\n        });\n    } else {\n        ppOCREngine.setModelConfig({\n            detection: detectionModel,\n            recognition: recognitionModel,\n            dictionary: dictionary\n        });\n    }\n    \n    // Reinitialize with new models\n    showStatus('Loading new models...', 'info');\n    try {\n        await currentOCREngine.initialize((progress) => {\n            showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n        });\n        showStatus('Models updated successfully!', 'success');\n    } catch (error) {\n        console.error('Failed to load new models:', error);\n        showError('Failed to load new models. Please try again.');\n    }\n}\n\n// File handling\nfunction handleFileSelect(event) {\n    const file = event.target.files[0];\n    if (file && (file.type.startsWith('image/') || file.type === 'application/pdf')) {\n        loadFile(file);\n    } else {\n        showError('Please select a valid image or PDF file');\n    }\n}\n\nfunction handleDragOver(event) {\n    event.preventDefault();\n    uploadArea.classList.add('dragover');\n}\n\nfunction handleDragLeave(event) {\n    event.preventDefault();\n    uploadArea.classList.remove('dragover');\n}\n\nfunction handleDrop(event) {\n    event.preventDefault();\n    uploadArea.classList.remove('dragover');\n    \n    const file = event.dataTransfer.files[0];\n    if (file && (file.type.startsWith('image/') || file.type === 'application/pdf')) {\n        loadFile(file);\n    } else {\n        showError('Please drop a valid image or PDF file');\n    }\n}\n\n// Load and display file\nasync function loadFile(file) {\n    // Clean up previous file from memory\n    if (currentImageBlob) {\n        // Release any object URLs if they exist\n        const oldPreviewSrc = previewImage.src;\n        if (oldPreviewSrc && oldPreviewSrc.startsWith('blob:')) {\n            URL.revokeObjectURL(oldPreviewSrc);\n        }\n        currentImageBlob = null;\n    }\n    \n    // Clear previous results\n    ocrResults.innerHTML = '';\n    resultsSection.style.display = 'none';\n    \n    // Store the new file blob for processing\n    currentImageBlob = file;\n    \n    previewSection.style.display = 'block';\n    resultsSection.style.display = 'none';\n    \n    if (file.type === 'application/pdf') {\n        // For PDFs, render the first page as preview\n        previewImage.style.display = 'none';\n        const previewContainer = previewImage.parentElement;\n        previewContainer.innerHTML = '';\n        \n        // Create PDF preview container\n        const pdfPreview = document.createElement('div');\n        pdfPreview.className = 'pdf-preview';\n        pdfPreview.innerHTML = `\n            <div class=\"pdf-header\">\n                <h3>${file.name}</h3>\n                <p class=\"pdf-info\">Loading PDF preview...</p>\n            </div>\n            <div class=\"pdf-pages\" id=\"pdfPages\"></div>\n        `;\n        previewContainer.appendChild(pdfPreview);\n        \n        // Load and render PDF preview\n        try {\n            const arrayBuffer = await file.arrayBuffer();\n            const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n            const numPages = pdf.numPages;\n            \n            const pdfInfo = pdfPreview.querySelector('.pdf-info');\n            pdfInfo.textContent = `${numPages} page${numPages > 1 ? 's' : ''}`;\n            \n            const pagesContainer = document.getElementById('pdfPages');\n            \n            // Render first few pages as preview (max 3)\n            const pagesToRender = Math.min(numPages, 3);\n            \n            for (let pageNum = 1; pageNum <= pagesToRender; pageNum++) {\n                const page = await pdf.getPage(pageNum);\n                const viewport = page.getViewport({ scale: 0.5 });\n                \n                const pageDiv = document.createElement('div');\n                pageDiv.className = 'pdf-page-preview';\n                \n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                canvas.height = viewport.height;\n                canvas.width = viewport.width;\n                \n                const renderContext = {\n                    canvasContext: context,\n                    viewport: viewport\n                };\n                \n                await page.render(renderContext).promise;\n                \n                pageDiv.innerHTML = `<p>Page ${pageNum}</p>`;\n                pageDiv.appendChild(canvas);\n                pagesContainer.appendChild(pageDiv);\n            }\n            \n            if (numPages > 3) {\n                pagesContainer.innerHTML += `<p class=\"more-pages\">... and ${numPages - 3} more pages</p>`;\n            }\n        } catch (error) {\n            console.error('Error rendering PDF preview:', error);\n            pdfPreview.querySelector('.pdf-info').textContent = 'Error loading PDF preview';\n        }\n    } else {\n        // For images, show preview\n        const existingPlaceholder = document.querySelector('.pdf-placeholder');\n        if (existingPlaceholder) {\n            existingPlaceholder.remove();\n        }\n        previewImage.style.display = 'block';\n        \n        const objectUrl = URL.createObjectURL(file);\n        previewImage.src = objectUrl;\n        \n        previewImage.onload = () => {\n            showStatus('Image loaded. Click \"Extract Text\" to process.', 'success');\n        };\n        previewImage.onerror = () => {\n            URL.revokeObjectURL(objectUrl);\n            showError('Failed to load image');\n        };\n    }\n}\n\n// Process image with current OCR engine\nasync function processImage() {\n    if (!currentImageBlob) {\n        showError('Please upload an image first');\n        return;\n    }\n    \n    resultsSection.style.display = 'block';\n    loadingIndicator.style.display = 'flex';\n    ocrResults.innerHTML = '';\n    \n    // Update loading text\n    const loadingText = document.querySelector('#loadingIndicator p');\n    let engineName = currentEngine === 'paddle' ? 'PaddleOCR' : 'Tesseract.js';\n    if (currentEngine === 'paddle') {\n        engineName += ` (${currentPreprocessing === 'improved' ? 'Improved PPU' : 'Standard'})`;\n    }\n    if (loadingText) {\n        loadingText.textContent = `Processing image with ${engineName}...`;\n    }\n    \n    try {\n        console.log(`Processing image with ${engineName}...`);\n        console.log('Current engine variable:', currentEngine);\n        console.log('Current OCR engine object:', currentOCREngine);\n        showStatus('Detecting and recognizing text...', 'info');\n        \n        const startTime = performance.now();\n        \n        // Process with current OCR engine\n        const results = await currentOCREngine.process(currentImageBlob);\n        \n        const processingTime = performance.now() - startTime;\n        console.log(`Processing completed in ${processingTime.toFixed(2)}ms`);\n        console.log('OCR Results:', results);\n        \n        // Display results\n        loadingIndicator.style.display = 'none';\n        \n        if (results && results.length > 0) {\n            displayResults(results, processingTime, engineName);\n            showStatus(`Text extraction complete! Found ${results.length} text regions.`, 'success');\n        } else {\n            displayResults([], processingTime, engineName);\n            showStatus('No text found in the image', 'warning');\n        }\n        \n    } catch (error) {\n        console.error('OCR processing error:', error);\n        loadingIndicator.style.display = 'none';\n        showError('Failed to process image: ' + error.message);\n    }\n}\n\n// Display OCR results\nfunction displayResults(results, processingTime, engineName = 'PaddleOCR') {\n    // Check if results is from PDF (array of page results)\n    const isPDF = Array.isArray(results) && results[0]?.page !== undefined;\n    \n    // Check if it's PaddleOCR with bounding boxes\n    const isPaddleWithBoxes = currentEngine === 'paddle' && results.length > 0 && results[0] && results[0].box;\n    console.log('Display check - currentEngine:', currentEngine, 'isPaddleWithBoxes:', isPaddleWithBoxes, 'results:', results);\n    \n    if (isPDF) {\n        // Handle PDF results\n        let allText = '';\n        let totalRegions = 0;\n        let detailsHTML = '';\n        \n        results.forEach(pageResult => {\n            const pageText = pageResult.results.map(r => r.text).join('\\n');\n            allText += `\\n--- Page ${pageResult.page} ---\\n${pageText}\\n`;\n            totalRegions += pageResult.results.length;\n            \n            detailsHTML += `\n                <div class=\"page-results\">\n                    <h4>Page ${pageResult.page}</h4>\n                    <ul class=\"detection-list\">\n                        ${pageResult.results.map((result, index) => `\n                            <li data-index=\"${index}\">\n                                <span class=\"detection-index\">${index + 1}.</span>\n                                <span class=\"detection-text\">${escapeHtml(result.text)}</span>\n                                <span class=\"detection-confidence\">${(result.confidence * 100).toFixed(1)}%</span>\n                            </li>\n                        `).join('')}\n                    </ul>\n                </div>\n            `;\n        });\n        \n        ocrResults.innerHTML = `\n            <div class=\"ocr-stats\">\n                <p><strong>Processing Time:</strong> ${(processingTime / 1000).toFixed(2)}s</p>\n                <p><strong>Pages Processed:</strong> ${results.length}</p>\n                <p><strong>Total Text Regions:</strong> ${totalRegions}</p>\n                <p><strong>Engine:</strong> ${engineName}</p>\n            </div>\n            <div class=\"text-result\">\n                <h3>Extracted Text:</h3>\n                <div class=\"text-content\" id=\"extractedText\">${escapeHtml(allText || 'No text detected')}</div>\n            </div>\n            <div class=\"detection-results\">\n                <h3>Detection Details by Page:</h3>\n                ${detailsHTML}\n            </div>\n        `;\n    } else if (isPaddleWithBoxes) {\n        // Enhanced display for PaddleOCR with visual bounding boxes\n        displayPaddleOCRResults(results, processingTime, engineName);\n    } else {\n        // Handle standard image results\n        const allText = results.map(r => r.text).join('\\n');\n        \n        ocrResults.innerHTML = `\n            <div class=\"ocr-stats\">\n                <p><strong>Processing Time:</strong> ${(processingTime / 1000).toFixed(2)}s</p>\n                <p><strong>Text Regions Found:</strong> ${results.length}</p>\n                <p><strong>Engine:</strong> ${engineName}</p>\n            </div>\n            <div class=\"text-result\">\n                <h3>Extracted Text:</h3>\n                <div class=\"text-content\" id=\"extractedText\">${escapeHtml(allText || 'No text detected')}</div>\n            </div>\n            <div class=\"detection-results\">\n                <h3>Detection Details:</h3>\n                <ul class=\"detection-list\">\n                    ${results.map((result, index) => `\n                        <li>\n                            <span class=\"detection-index\">${index + 1}.</span>\n                            <span class=\"detection-text\">${escapeHtml(result.text)}</span>\n                            <span class=\"detection-confidence\">${(result.confidence * 100).toFixed(1)}%</span>\n                        </li>\n                    `).join('')}\n                </ul>\n            </div>\n        `;\n    }\n}\n\n// Enhanced display function for PaddleOCR results\nfunction displayPaddleOCRResults(results, processingTime, engineName) {\n    const allText = results.map(r => r.text).join('\\n');\n    \n    // Group results by vertical position (text lines)\n    const groupedResults = groupResultsByLine(results);\n    \n    // Create the enhanced display\n    ocrResults.innerHTML = `\n        <div class=\"ocr-stats\">\n            <p><strong>Processing Time:</strong> ${(processingTime / 1000).toFixed(2)}s</p>\n            <p><strong>Text Regions Found:</strong> ${results.length}</p>\n            <p><strong>Engine:</strong> ${engineName}</p>\n            <p><strong>Average Confidence:</strong> ${calculateAverageConfidence(results)}%</p>\n        </div>\n        \n        <div class=\"paddle-results-container\">\n            <div class=\"result-tabs\">\n                <button class=\"result-tab active\" onclick=\"showResultTab('visual')\">Visual Results</button>\n                <button class=\"result-tab\" onclick=\"showResultTab('text')\">Text Only</button>\n                <button class=\"result-tab\" onclick=\"showResultTab('grouped')\">Grouped by Line</button>\n            </div>\n            \n            <div id=\"visualResults\" class=\"tab-content active\">\n                <div class=\"result-image-container\">\n                    <img id=\"resultImage\" src=\"${previewImage.src}\" alt=\"OCR Result\">\n                    <div class=\"bounding-box-overlay\" id=\"boundingBoxOverlay\"></div>\n                </div>\n                <div class=\"detection-results\">\n                    <h3>Detected Text Regions:</h3>\n                    <ul class=\"detection-list\" id=\"visualDetectionList\">\n                        ${results.map((result, index) => {\n                            const confidenceClass = getConfidenceClass(result.confidence);\n                            return `\n                                <li data-index=\"${index}\" onmouseover=\"highlightBox(${index})\" onmouseout=\"unhighlightBox(${index})\" onclick=\"selectBox(${index})\">\n                                    <span class=\"detection-index\">${index + 1}.</span>\n                                    <span class=\"detection-text\">${escapeHtml(result.text)}</span>\n                                    <span class=\"detection-confidence ${confidenceClass}\">${(result.confidence * 100).toFixed(1)}%</span>\n                                </li>\n                            `;\n                        }).join('')}\n                    </ul>\n                </div>\n            </div>\n            \n            <div id=\"textResults\" class=\"tab-content grouped-results\">\n                <div class=\"text-result\">\n                    <h3>Extracted Text:</h3>\n                    <div class=\"text-content\" id=\"extractedText\">${escapeHtml(allText || 'No text detected')}</div>\n                </div>\n            </div>\n            \n            <div id=\"groupedResults\" class=\"tab-content grouped-results\">\n                <h3>Text Grouped by Line:</h3>\n                ${groupedResults.map((group, groupIndex) => `\n                    <div class=\"text-region-group\">\n                        <div class=\"region-header\">\n                            <span class=\"region-title\">Line ${groupIndex + 1}</span>\n                            <div class=\"region-confidence\">\n                                <div class=\"confidence-bar\">\n                                    <div class=\"confidence-fill\" style=\"width: ${group.avgConfidence}%\"></div>\n                                </div>\n                                <span class=\"confidence-text\">${group.avgConfidence.toFixed(1)}%</span>\n                            </div>\n                        </div>\n                        <p>${escapeHtml(group.text)}</p>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n    `;\n    \n    // Draw bounding boxes after DOM is updated\n    setTimeout(() => drawBoundingBoxes(results), 100);\n}\n\n// Copy text to clipboard\nasync function copyText() {\n    const textElement = document.getElementById('extractedText');\n    if (textElement) {\n        try {\n            await navigator.clipboard.writeText(textElement.textContent);\n            showSuccess('Text copied to clipboard!');\n        } catch (error) {\n            showError('Failed to copy text');\n        }\n    }\n}\n\n// Download text as file\nfunction downloadText() {\n    const textElement = document.getElementById('extractedText');\n    if (textElement) {\n        const text = textElement.textContent;\n        const blob = new Blob([text], { type: 'text/plain' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `pp-ocrv5-result-${Date.now()}.txt`;\n        a.click();\n        URL.revokeObjectURL(url);\n    }\n}\n\n// Reset the app\nfunction reset() {\n    // Clean up memory\n    if (currentImageBlob) {\n        // Release object URLs\n        const previewSrc = previewImage.src;\n        if (previewSrc && previewSrc.startsWith('blob:')) {\n            URL.revokeObjectURL(previewSrc);\n        }\n        currentImageBlob = null;\n    }\n    \n    // Reset UI\n    fileInput.value = '';\n    previewSection.style.display = 'none';\n    resultsSection.style.display = 'none';\n    ocrResults.innerHTML = '';\n    previewImage.src = '';\n    \n    // Reset preview container for PDFs\n    const previewContainer = previewImage.parentElement;\n    previewContainer.innerHTML = '<img id=\"previewImage\" alt=\"Preview\">';\n    // Re-cache the image element reference\n    window.previewImage = document.getElementById('previewImage');\n    \n    showStatus('Ready to process a new image', 'info');\n}\n\n// Utility functions\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nfunction showError(message) {\n    showStatus(message, 'error');\n    \n    // Create toast notification\n    const toast = document.createElement('div');\n    toast.className = 'toast error';\n    toast.textContent = message;\n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n        toast.remove();\n    }, 5000);\n}\n\nfunction showSuccess(message) {\n    // Create toast notification\n    const toast = document.createElement('div');\n    toast.className = 'toast success';\n    toast.textContent = message;\n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n        toast.remove();\n    }, 3000);\n}\n\nfunction showStatus(message, type = 'info') {\n    console.log(`[${type.toUpperCase()}] ${message}`);\n    \n    // Update status in UI\n    const statusElement = document.getElementById('status');\n    if (statusElement) {\n        statusElement.textContent = message;\n        statusElement.className = `status ${type}`;\n    }\n}\n\n// Helper functions for enhanced PaddleOCR display\nfunction calculateAverageConfidence(results) {\n    if (results.length === 0) return 0;\n    const sum = results.reduce((acc, r) => acc + r.confidence, 0);\n    return (sum / results.length * 100).toFixed(1);\n}\n\nfunction getConfidenceClass(confidence) {\n    const percent = confidence * 100;\n    if (percent >= 80) return 'high-confidence';\n    if (percent >= 60) return 'medium-confidence';\n    return 'low-confidence';\n}\n\nfunction groupResultsByLine(results) {\n    if (results.length === 0) return [];\n    \n    // Sort by Y position\n    const sorted = [...results].sort((a, b) => {\n        const aY = Math.min(...a.box.map(p => p[1]));\n        const bY = Math.min(...b.box.map(p => p[1]));\n        return aY - bY;\n    });\n    \n    const groups = [];\n    let currentGroup = [sorted[0]];\n    \n    for (let i = 1; i < sorted.length; i++) {\n        const prevY = Math.min(...sorted[i-1].box.map(p => p[1]));\n        const currY = Math.min(...sorted[i].box.map(p => p[1]));\n        \n        // If vertical difference is small, they're on the same line\n        if (Math.abs(currY - prevY) < 20) {\n            currentGroup.push(sorted[i]);\n        } else {\n            groups.push(currentGroup);\n            currentGroup = [sorted[i]];\n        }\n    }\n    \n    if (currentGroup.length > 0) {\n        groups.push(currentGroup);\n    }\n    \n    // Process each group\n    return groups.map(group => {\n        // Sort by X position within group\n        group.sort((a, b) => {\n            const aX = Math.min(...a.box.map(p => p[0]));\n            const bX = Math.min(...b.box.map(p => p[0]));\n            return aX - bX;\n        });\n        \n        const text = group.map(r => r.text).join(' ');\n        const avgConfidence = group.reduce((sum, r) => sum + r.confidence, 0) / group.length * 100;\n        \n        return { text, avgConfidence, items: group };\n    });\n}\n\nfunction drawBoundingBoxes(results) {\n    const overlay = document.getElementById('boundingBoxOverlay');\n    const image = document.getElementById('resultImage');\n    \n    if (!overlay || !image) return;\n    \n    // Clear existing boxes\n    overlay.innerHTML = '';\n    \n    // Wait for image to load\n    if (!image.complete) {\n        image.onload = () => drawBoundingBoxes(results);\n        return;\n    }\n    \n    const rect = image.getBoundingClientRect();\n    const scaleX = image.naturalWidth / rect.width;\n    const scaleY = image.naturalHeight / rect.height;\n    \n    results.forEach((result, index) => {\n        const box = result.box;\n        const minX = Math.min(...box.map(p => p[0])) / scaleX;\n        const minY = Math.min(...box.map(p => p[1])) / scaleY;\n        const maxX = Math.max(...box.map(p => p[0])) / scaleX;\n        const maxY = Math.max(...box.map(p => p[1])) / scaleY;\n        \n        const boxElement = document.createElement('div');\n        boxElement.className = `text-box ${getConfidenceClass(result.confidence)}`;\n        boxElement.dataset.index = index;\n        boxElement.style.left = `${minX}px`;\n        boxElement.style.top = `${minY}px`;\n        boxElement.style.width = `${maxX - minX}px`;\n        boxElement.style.height = `${maxY - minY}px`;\n        \n        // Add label\n        const label = document.createElement('div');\n        label.className = 'text-box-label';\n        label.textContent = `${index + 1}: ${(result.confidence * 100).toFixed(0)}%`;\n        boxElement.appendChild(label);\n        \n        // Add click handler\n        boxElement.onclick = () => selectBox(index);\n        \n        overlay.appendChild(boxElement);\n    });\n}\n\n// Tab switching functionality\nwindow.showResultTab = function(tabName) {\n    // Update tab buttons\n    document.querySelectorAll('.result-tab').forEach(tab => {\n        tab.classList.remove('active');\n    });\n    event.target.classList.add('active');\n    \n    // Update content\n    document.querySelectorAll('.tab-content').forEach(content => {\n        content.classList.remove('active');\n    });\n    \n    if (tabName === 'visual') {\n        document.getElementById('visualResults').classList.add('active');\n    } else if (tabName === 'text') {\n        document.getElementById('textResults').classList.add('active');\n    } else if (tabName === 'grouped') {\n        document.getElementById('groupedResults').classList.add('active');\n    }\n};\n\n// Box interaction functions\nwindow.highlightBox = function(index) {\n    const box = document.querySelector(`.text-box[data-index=\"${index}\"]`);\n    const listItem = document.querySelector(`#visualDetectionList li[data-index=\"${index}\"]`);\n    \n    if (box) box.classList.add('hover');\n    if (listItem) listItem.classList.add('highlighted');\n};\n\nwindow.unhighlightBox = function(index) {\n    const box = document.querySelector(`.text-box[data-index=\"${index}\"]`);\n    const listItem = document.querySelector(`#visualDetectionList li[data-index=\"${index}\"]`);\n    \n    if (box) box.classList.remove('hover');\n    if (listItem) listItem.classList.remove('highlighted');\n};\n\nwindow.selectBox = function(index) {\n    // Remove previous selection\n    document.querySelectorAll('.text-box.selected').forEach(box => {\n        box.classList.remove('selected');\n    });\n    \n    // Add new selection\n    const box = document.querySelector(`.text-box[data-index=\"${index}\"]`);\n    if (box) {\n        box.classList.add('selected');\n        \n        // Scroll list item into view\n        const listItem = document.querySelector(`#visualDetectionList li[data-index=\"${index}\"]`);\n        if (listItem) {\n            listItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            \n            // Highlight temporarily\n            listItem.classList.add('highlighted');\n            setTimeout(() => listItem.classList.remove('highlighted'), 2000);\n        }\n    }\n};\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', initializeApp);"],"names":["pdfjsLib.GlobalWorkerOptions","ort.env","MODEL_BASE","CONFIG","PPOCRImprovedEngine","config","progressCallback","detectionName","ort.InferenceSession","recognitionName","error","text","line","i","imageBlob","imageData","boxes","results","resizedImage","ratio","inputTensor","feeds","output","limitSideLen","newW","newH","gridSize","targetW","targetH","resolve","blob","url","scale","scaledW","scaledH","offsetX","offsetY","imgData","pixels","enhanced","size","floatData","pixelIndex","ort.Tensor","outputTensor","imgWidth","imgHeight","height","width","data","batchSize","channels","h","w","probMap","bitmap","visited","numContours","y","x","idx","box","p","startX","startY","stack","points","totalScore","count","MAX_COMPONENT_SIZE","startIdx","componentMap","neighbors","nx","ny","nidx","yDiff","xDiff","xs","ys","minX","maxX","minY","maxY","xPadding","yPadding","area","j","a","b","aY","bY","tmp","batchBoxes","batchResults","croppedImages","widthRatios","cropped","indices","_","result","rotatedCanvas","rotatedCtx","imgElement","resizedW","paddingData","c","srcIdx","dstIdx","seqLen","vocabSize","preds","predIdxs","scores","t","maxIdx","maxVal","val","decoded","decodedScores","lastIdx","filteredResults","heights","r","avgHeight","lines","currentLine","current","previous","prevY","currY","verticalGap","threshold","mergedResults","aX","bX","avgConfidence","sum","allPoints","textScoreThreshold","pdfBlob","arrayBuffer","pdf","pdfjsLib.getDocument","numPages","allResults","pageNum","page","viewport","canvas","ctx","pageResults","reject","img","corrections","wrong","correct","regex","ppOCRImprovedEngine","PPOCREngine","limit","thresh","scaledBox","queue","dy","dx","unclipRatio","padding","aspectRatio","targetWidth","pageImage","ppOCREngine","runtime","exports","Op","hasOwn","defineProperty","obj","key","desc","undefined","$Symbol","iteratorSymbol","asyncIteratorSymbol","toStringTagSymbol","define","value","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","arg","err","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","prototype","method","genFun","ctor","AsyncIterator","PromiseImpl","invoke","record","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","iter","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","methodName","info","pushTryEntry","locs","entry","resetTryEntry","object","keys","next","iterable","iteratorMethod","skipTempReset","name","rootEntry","rootRecord","exception","handle","loc","caught","hasCatch","hasFinally","type","finallyEntry","afterLoc","finallyLoc","tryLoc","thrown","resultName","nextLoc","module","getId","prefix","cnt","require$$0","jobCounter","createJob","_id","action","payload","id","logging","log","_logging","args","this","require$$1","require$$2","schedulerCounter","createScheduler","workers","runningWorkers","jobQueue","getQueueLen","getNumWorkers","dequeue","wIds","job","wid","isElectron","isElectron_1","getEnvironment","env","require","isBrowser","resolveURL","s","resolvePaths","options","opts","circularize","blocks","paragraphs","words","symbols","block","paragraph","word","sym","OEM","defaultOptions","version","defaultOptions_1","spawnWorker","workerPath","workerBlobURL","worker","terminateWorker","onMessage","handler","send","packet","readFromBlobOrFile","fileReader","code","loadImage","image","loadImage_1","require$$3","require$$4","require$$5","browser","require$$6","workerCounter","createWorker","langs","oem","_options","logger","errorHandler","resolves","rejects","currentLangs","currentOem","currentConfig","lstmOnlyCore","workerResReject","workerResResolve","workerRes","workerError","event","setResolve","promiseId","res","setReject","rej","startJob","jobId","load","loadInternal","writeText","path","readText","removeFile","FS","loadLanguage","loadLanguageInternal","_langs","initialize","initializeInternal","_oem","_config","reinitialize","setParameters","params","recognize","getPDF","title","textonly","detect","terminate","workerId","status","d","resolveObj","Tesseract","languages","PSM","setLogging","require$$7","src","TesseractOCREngine","m","tesseractResult","wordY","confidence","tesseractOCREngine","currentImageBlob","currentEngine","currentPreprocessing","currentOCREngine","fileInput","uploadArea","previewSection","previewImage","processBtn","resultsSection","loadingIndicator","ocrResults","copyBtn","downloadBtn","resetBtn","initializeApp","showStatus","progress","loadingText","setupEventListeners","showError","handleFileSelect","handleDragOver","handleDragLeave","handleDrop","processImage","copyText","downloadText","reset","radio","handleEngineChange","handlePreprocessingChange","handleModelChange","paddleOptions","detectionModel","recognitionModel","dictionary","file","loadFile","oldPreviewSrc","previewContainer","pdfPreview","pdfInfo","pagesContainer","pagesToRender","pageDiv","renderContext","existingPlaceholder","objectUrl","engineName","startTime","processingTime","displayResults","isPDF","_a","isPaddleWithBoxes","allText","totalRegions","detailsHTML","pageResult","pageText","index","escapeHtml","displayPaddleOCRResults","groupedResults","groupResultsByLine","calculateAverageConfidence","confidenceClass","getConfidenceClass","group","groupIndex","drawBoundingBoxes","textElement","showSuccess","previewSrc","div","message","toast","statusElement","acc","percent","sorted","groups","currentGroup","overlay","rect","scaleX","scaleY","boxElement","label","tabName","tab","content","listItem"],"mappings":"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","x_google_ignoreList":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}