{"version":3,"file":"index-BJww9yLY.js","sources":["../../src/ppocr-improved-engine.js","../../src/ppocr-onnx-engine.js","../../node_modules/regenerator-runtime/runtime.js","../../node_modules/tesseract.js/src/utils/getId.js","../../node_modules/tesseract.js/src/createJob.js","../../node_modules/tesseract.js/src/utils/log.js","../../node_modules/tesseract.js/src/createScheduler.js","../../node_modules/is-electron/index.js","../../node_modules/tesseract.js/src/utils/getEnvironment.js","../../node_modules/tesseract.js/src/utils/resolvePaths.js","../../node_modules/tesseract.js/src/utils/circularize.js","../../node_modules/tesseract.js/src/constants/OEM.js","../../node_modules/tesseract.js/src/constants/defaultOptions.js","../../node_modules/tesseract.js/src/worker/browser/defaultOptions.js","../../node_modules/tesseract.js/src/worker/browser/spawnWorker.js","../../node_modules/tesseract.js/src/worker/browser/terminateWorker.js","../../node_modules/tesseract.js/src/worker/browser/onMessage.js","../../node_modules/tesseract.js/src/worker/browser/send.js","../../node_modules/tesseract.js/src/worker/browser/loadImage.js","../../node_modules/tesseract.js/src/worker/browser/index.js","../../node_modules/tesseract.js/src/createWorker.js","../../node_modules/tesseract.js/src/Tesseract.js","../../node_modules/tesseract.js/src/constants/languages.js","../../node_modules/tesseract.js/src/constants/PSM.js","../../node_modules/tesseract.js/src/index.js","../../src/tesseract-ocr-engine.js","../../src/infographic-ocr-config.js","../../src/document-ocr-config.js","../../src/main.js"],"sourcesContent":["import * as ort from 'onnxruntime-web';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = '/client-ocr-app/pdf.worker.min.js';\n\n// Configure ONNX Runtime to use the bundled WASM files\nort.env.wasm.wasmPaths = '/client-ocr-app/assets/';\nort.env.wasm.numThreads = 1;\n// Enable WebGL backend for better performance\nort.env.webgl.pack = false; // Disable packing for better compatibility\nort.env.webgl.matmulMaxBatchSize = 16;\n\n// Model paths\nconst MODEL_BASE = '/client-ocr-app/models/';\n\n// Improved configuration based on RapidOCR and ppu-paddle-ocr - optimized for better detection\nconst CONFIG = {\n    // Detection parameters (VERY low thresholds for maximum detection)\n    det_limit_side_len: 1280,    // Higher resolution for better detail\n    det_limit_type: 'max',       // Use 'max' for consistent sizing\n    det_db_thresh: 0.05,         // VERY low threshold for maximum detection\n    det_db_box_thresh: 0.1,      // VERY low box threshold to detect all text\n    det_db_unclip_ratio: 2.5,    // Even higher ratio for better text coverage\n    det_db_min_size: 2,          // Smaller minimum size for tiny text\n    det_db_max_candidates: 2000,  // More candidates for complex images\n    det_use_dilation: true,      // Enable for better text connectivity\n    det_dilation_kernel: 3,      // Dilation kernel size\n    \n    // Recognition parameters (lower thresholds)\n    rec_image_height: 48,\n    rec_image_width: 320,        // Dynamic width calculation\n    rec_batch_num: 6,\n    drop_score: 0.05,            // VERY low threshold to keep all results\n    \n    // Preprocessing parameters (PP-OCRv5 style)\n    det_mean: [0.485, 0.456, 0.406],\n    det_std: [0.229, 0.224, 0.225],\n    rec_mean: 0.5,\n    rec_std: 0.5,\n    \n    // Area thresholds\n    min_area_thresh: 2,          // Very small area threshold\n    \n    // Text line merging\n    vertical_gap_threshold: 0.5,  // Standard gap threshold\n    \n    // English-specific optimizations\n    english_mode: true,\n    min_word_confidence: 0.1,    // Very low confidence threshold\n    enable_word_splitting: true,  // Split connected words in English\n    \n    // Grid parameters for finer detection\n    grid_size: 16,               // Much smaller grid size (was 32)\n    overlap_ratio: 0.2           // Overlap between grid cells\n};\n\nexport class PPOCRImprovedEngine {\n    constructor() {\n        this.detectionSession = null;\n        this.recognitionSession = null;\n        this.charDict = [];\n        this.initialized = false;\n        this.canvas = null;\n        this.ctx = null;\n        this.modelConfig = {\n            detection: 'PP-OCRv5_mobile_det_infer.onnx',  // PP-OCRv5 mobile detection\n            recognition: 'en_PP-OCRv4_mobile_rec_infer.onnx',  // English recognition model\n            dictionary: 'en_dict.txt'  // English dictionary\n        };\n        // Expose CONFIG for external updates\n        this.CONFIG = CONFIG;\n    }\n\n    setModelConfig(config) {\n        // Update model configuration\n        if (config.detection) this.modelConfig.detection = config.detection;\n        if (config.recognition) this.modelConfig.recognition = config.recognition;\n        if (config.dictionary) this.modelConfig.dictionary = config.dictionary;\n        \n        // Mark as not initialized to force reload\n        this.initialized = false;\n    }\n\n    async initialize(progressCallback) {\n        try {\n            // Create canvas for image processing with willReadFrequently for better performance\n            this.canvas = document.createElement('canvas');\n            this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });\n\n            // Load dictionary\n            progressCallback?.({ status: 'loading', message: 'Loading dictionary...', progress: 10 });\n            await this.loadDictionary();\n\n            // Load detection model\n            const detectionName = this.modelConfig.detection.replace('.onnx', '').replace(/_/g, ' ');\n            progressCallback?.({ status: 'loading', message: `Loading ${detectionName}...`, progress: 30 });\n            \n            // Release existing session if any\n            if (this.detectionSession) {\n                await this.detectionSession.release();\n            }\n            \n            // Try different execution providers for better compatibility\n            const executionProviders = ['webgl', 'wasm'];\n            let lastError = null;\n            \n            for (const provider of executionProviders) {\n                try {\n                    console.log(`Trying to load detection model with ${provider} provider...`);\n                    this.detectionSession = await ort.InferenceSession.create(\n                        MODEL_BASE + this.modelConfig.detection, \n                        {\n                            executionProviders: [provider],\n                            graphOptimizationLevel: 'all',\n                            enableCpuMemArena: false,\n                            enableMemPattern: false\n                        }\n                    );\n                    console.log(`Detection model loaded successfully with ${provider}:`, this.detectionSession.inputNames, this.detectionSession.outputNames);\n                    break;\n                } catch (error) {\n                    console.warn(`Failed to load with ${provider}:`, error.message);\n                    lastError = error;\n                    if (provider === executionProviders[executionProviders.length - 1]) {\n                        throw lastError;\n                    }\n                }\n            }\n\n            // Load recognition model\n            const recognitionName = this.modelConfig.recognition.replace('.onnx', '').replace(/_/g, ' ');\n            progressCallback?.({ status: 'loading', message: `Loading ${recognitionName}...`, progress: 70 });\n            \n            // Release existing session if any\n            if (this.recognitionSession) {\n                await this.recognitionSession.release();\n            }\n            \n            // Try different execution providers for recognition model too\n            for (const provider of executionProviders) {\n                try {\n                    console.log(`Trying to load recognition model with ${provider} provider...`);\n                    this.recognitionSession = await ort.InferenceSession.create(\n                        MODEL_BASE + this.modelConfig.recognition, \n                        {\n                            executionProviders: [provider],\n                            graphOptimizationLevel: 'all',\n                            enableCpuMemArena: false,\n                            enableMemPattern: false\n                        }\n                    );\n                    console.log(`Recognition model loaded successfully with ${provider}:`, this.recognitionSession.inputNames, this.recognitionSession.outputNames);\n                    break;\n                } catch (error) {\n                    console.warn(`Failed to load recognition with ${provider}:`, error.message);\n                    lastError = error;\n                    if (provider === executionProviders[executionProviders.length - 1]) {\n                        throw lastError;\n                    }\n                }\n            }\n\n            this.initialized = true;\n            progressCallback?.({ status: 'ready', message: 'PP-OCR ready!', progress: 100 });\n\n        } catch (error) {\n            console.error('Failed to initialize PP-OCR models:', error);\n            throw error;\n        }\n    }\n\n    async loadDictionary() {\n        try {\n            const response = await fetch(MODEL_BASE + this.modelConfig.dictionary);\n            const text = await response.text();\n            this.charDict = text.split('\\n').filter(line => line.trim());\n            // Add blank token at the beginning\n            this.charDict.unshift(' ');\n            console.log(`Loaded dictionary ${this.modelConfig.dictionary} with ${this.charDict.length} characters`);\n        } catch (error) {\n            console.error('Failed to load dictionary:', error);\n            // Use basic ASCII as fallback\n            this.charDict = [' '];\n            for (let i = 32; i < 127; i++) {\n                this.charDict.push(String.fromCharCode(i));\n            }\n        }\n    }\n\n    async process(imageBlob) {\n        if (!this.initialized) {\n            throw new Error('OCR engine not initialized');\n        }\n\n        console.log('Processing blob type:', imageBlob.type, 'size:', imageBlob.size);\n\n        // Check if it's a PDF\n        if (imageBlob.type === 'application/pdf') {\n            return await this.processPDF(imageBlob);\n        }\n\n        // Convert blob to image\n        console.log('Converting blob to image...');\n        const imageData = await this.blobToImage(imageBlob);\n        console.log('Image loaded:', imageData.width, 'x', imageData.height);\n        \n        // Detect text regions\n        const boxes = await this.detectText(imageData);\n        \n        // Recognize text in each region\n        const results = await this.recognizeText(imageData, boxes);\n        \n        // Post-process: merge text lines\n        return this.mergeTextLines(results);\n    }\n\n    async detectText(imageData) {\n        console.log('detectText called, checking detection session...');\n        if (!this.detectionSession) {\n            throw new Error('Detection model not loaded');\n        }\n        console.log('Detection session exists:', this.detectionSession);\n        console.log('Current dictionary:', this.modelConfig.dictionary, 'Dictionary length:', this.charDict.length);\n\n        try {\n            // Resize image for detection\n            console.log('Starting image resize...');\n            const { resizedImage, ratio } = await this.resizeForDetection(imageData);\n            console.log('Image resized, ratio:', ratio);\n            \n            // Preprocess for detection\n            console.log('Starting preprocessing...');\n            const inputTensor = await this.preprocessForDetection(resizedImage);\n            console.log('Preprocessing complete, tensor shape:', inputTensor.dims);\n            \n            // Run detection\n            console.log('Running detection model...');\n            console.log('Input names:', this.detectionSession.inputNames);\n            console.log('Output names:', this.detectionSession.outputNames);\n            const feeds = { [this.detectionSession.inputNames[0]]: inputTensor };\n            \n            let output;\n            try {\n                console.log('Tensor data type:', inputTensor.type);\n                console.log('Tensor size:', inputTensor.data.length);\n                console.log('Tensor shape:', inputTensor.dims);\n                console.log('Expected input name:', this.detectionSession.inputNames[0]);\n                \n                // Get model input metadata if available\n                try {\n                    const inputInfo = this.detectionSession.inputNames.map(name => ({\n                        name,\n                        // Note: ONNX Runtime Web doesn't expose shape info directly\n                    }));\n                    console.log('Model inputs:', inputInfo);\n                } catch (e) {\n                    console.log('Could not get model input info');\n                }\n                \n                // Verify tensor data\n                const tensorData = inputTensor.data;\n                let nanCount = 0;\n                let infCount = 0;\n                let minVal = Infinity;\n                let maxVal = -Infinity;\n                \n                for (let i = 0; i < tensorData.length; i++) {\n                    if (isNaN(tensorData[i])) nanCount++;\n                    if (!isFinite(tensorData[i])) infCount++;\n                    minVal = Math.min(minVal, tensorData[i]);\n                    maxVal = Math.max(maxVal, tensorData[i]);\n                }\n                \n                console.log(`Tensor stats: min=${minVal.toFixed(3)}, max=${maxVal.toFixed(3)}`);\n                if (nanCount > 0 || infCount > 0) {\n                    console.error(`Invalid tensor data: ${nanCount} NaN values, ${infCount} Inf values`);\n                }\n                \n                output = await this.detectionSession.run(feeds);\n                console.log('Detection complete');\n                console.log('Output shape:', output[this.detectionSession.outputNames[0]].dims);\n            } catch (inferenceError) {\n                console.error('ONNX inference error:', inferenceError);\n                console.error('Error code:', inferenceError.code);\n                console.error('Error message:', inferenceError.message);\n                console.error('Error stack:', inferenceError.stack);\n                \n                // Try to provide more context\n                if (inferenceError.code === 30757872 || inferenceError.message?.includes('invalid graph') || \n                    inferenceError.message?.includes('dimension mismatch')) {\n                    console.error('Model compatibility issue detected. The model might require specific input dimensions.');\n                    console.error('Trying simplified approach...');\n                    \n                    // Try a simplified detection as fallback\n                    try {\n                        const simplifiedBoxes = await this.simplifiedDetection(resizedImage, ratio);\n                        console.log(`Simplified detection found ${simplifiedBoxes.length} regions`);\n                        return simplifiedBoxes;\n                    } catch (fallbackError) {\n                        console.error('Simplified detection also failed:', fallbackError);\n                    }\n                }\n                \n                throw inferenceError;\n            }\n            \n            // Post-process detection results\n            const boxes = await this.postprocessDetection(\n                output[this.detectionSession.outputNames[0]], \n                resizedImage.width, \n                resizedImage.height, \n                ratio\n            );\n            \n            console.log(`Detected ${boxes.length} text regions`);\n            return this.sortBoxes(boxes);\n        } catch (error) {\n            console.error('Error in detectText:', error);\n            console.error('Error details:', {\n                message: error.message,\n                stack: error.stack,\n                name: error.name,\n                code: error.code\n            });\n            // Return empty array instead of throwing to allow partial results\n            return [];\n        }\n    }\n\n    async resizeForDetection(imageData) {\n        try {\n            console.log('resizeForDetection - input image size:', imageData.width, 'x', imageData.height);\n            const limitSideLen = this.CONFIG.det_limit_side_len;\n            const limitType = this.CONFIG.det_limit_type;\n            let newW = imageData.width;\n            let newH = imageData.height;\n        \n        // Calculate resize ratio based on RapidOCR approach\n        let ratio = 1;\n        if (limitType === 'max') {\n            if (Math.max(newH, newW) > limitSideLen) {\n                ratio = newH > newW ? limitSideLen / newH : limitSideLen / newW;\n            }\n        } else {\n            // 'min' type - better for small text\n            if (Math.min(newH, newW) < limitSideLen) {\n                ratio = newH < newW ? limitSideLen / newH : limitSideLen / newW;\n            }\n        }\n        \n        newW = Math.round(newW * ratio);\n        newH = Math.round(newH * ratio);\n        \n        // Make dimensions divisible by grid size for finer detection\n        const gridSize = this.CONFIG.grid_size || 32;\n        const targetW = Math.max(gridSize, Math.round(newW / gridSize) * gridSize);\n        const targetH = Math.max(gridSize, Math.round(newH / gridSize) * gridSize);\n        \n        console.log(`Resizing from ${imageData.width}x${imageData.height} to ${targetW}x${targetH} (ratio: ${ratio})`);\n        \n        // Ensure dimensions are valid\n        if (targetW <= 0 || targetH <= 0 || !isFinite(targetW) || !isFinite(targetH)) {\n            throw new Error(`Invalid target dimensions: ${targetW}x${targetH}`);\n        }\n        \n        // Apply preprocessing to improve image quality\n        const preprocessedImage = await this.preprocessImage(imageData, targetW, targetH);\n        \n        const resizedImage = new Image();\n        return new Promise((resolve) => {\n            this.canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                resizedImage.onload = () => {\n                    URL.revokeObjectURL(url);\n                    resolve({ resizedImage, ratio });\n                };\n                resizedImage.src = url;\n            });\n        });\n        } catch (error) {\n            console.error('Error in resizeForDetection:', error);\n            throw error;\n        }\n    }\n    \n    async preprocessImage(imageData, targetW, targetH) {\n        // Resize image\n        this.canvas.width = targetW;\n        this.canvas.height = targetH;\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, targetW, targetH);\n        \n        // Enable image smoothing for better quality\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n        \n        // Draw with proper scaling\n        const scale = Math.min(targetW / imageData.width, targetH / imageData.height);\n        const scaledW = imageData.width * scale;\n        const scaledH = imageData.height * scale;\n        const offsetX = (targetW - scaledW) / 2;\n        const offsetY = (targetH - scaledH) / 2;\n        \n        this.ctx.drawImage(imageData, offsetX, offsetY, scaledW, scaledH);\n        \n        // Apply moderate contrast enhancement to preserve text\n        const imgData = this.ctx.getImageData(0, 0, targetW, targetH);\n        const pixels = imgData.data;\n        \n        // Convert to grayscale and enhance contrast\n        for (let i = 0; i < pixels.length; i += 4) {\n            // Convert to grayscale\n            const gray = 0.299 * pixels[i] + 0.587 * pixels[i + 1] + 0.114 * pixels[i + 2];\n            \n            // Moderate contrast enhancement - less aggressive\n            let enhanced = ((gray - 128) * 1.2) + 128;\n            \n            // Gentle clamping to preserve mid-tones\n            if (enhanced > 240) {\n                enhanced = 255;\n            } else if (enhanced < 15) {\n                enhanced = 0;\n            }\n            \n            enhanced = Math.max(0, Math.min(255, enhanced));\n            \n            pixels[i] = enhanced;\n            pixels[i + 1] = enhanced;\n            pixels[i + 2] = enhanced;\n        }\n        \n        this.ctx.putImageData(imgData, 0, 0);\n        return this.canvas;\n    }\n\n    async preprocessForDetection(imageData) {\n        try {\n            // Draw image to canvas\n            this.canvas.width = imageData.width;\n            this.canvas.height = imageData.height;\n            this.ctx.drawImage(imageData, 0, 0);\n            \n            const imgData = this.ctx.getImageData(0, 0, imageData.width, imageData.height);\n            const pixels = imgData.data;\n            \n            console.log(`Preprocessing image: ${imageData.width}x${imageData.height}`);\n            \n            // Create tensor [1, 3, H, W]\n            const size = imageData.width * imageData.height;\n            const floatData = new Float32Array(3 * size);\n            \n            // Normalize and rearrange to CHW format (RapidOCR style)\n            // Ensure we're using the correct normalization values\n            const mean = this.CONFIG.det_mean || [0.485, 0.456, 0.406];\n            const std = this.CONFIG.det_std || [0.229, 0.224, 0.225];\n            \n            for (let i = 0; i < size; i++) {\n                const pixelIndex = i * 4;\n                // Ensure values are valid numbers\n                const r = Math.max(0, Math.min(255, pixels[pixelIndex]));\n                const g = Math.max(0, Math.min(255, pixels[pixelIndex + 1]));\n                const b = Math.max(0, Math.min(255, pixels[pixelIndex + 2]));\n                \n                floatData[i] = (r / 255.0 - mean[0]) / std[0];\n                floatData[size + i] = (g / 255.0 - mean[1]) / std[1];\n                floatData[2 * size + i] = (b / 255.0 - mean[2]) / std[2];\n            }\n            \n            // Verify no NaN or Inf values\n            for (let i = 0; i < floatData.length; i++) {\n                if (!isFinite(floatData[i])) {\n                    console.error(`Invalid value at index ${i}: ${floatData[i]}`);\n                    floatData[i] = 0;\n                }\n            }\n            \n            const tensor = new ort.Tensor('float32', floatData, [1, 3, imageData.height, imageData.width]);\n            console.log('Created tensor with shape:', tensor.dims, 'type:', tensor.type);\n            return tensor;\n        } catch (error) {\n            console.error('Error in preprocessForDetection:', error);\n            throw new Error(`Preprocessing failed: ${error.message}`);\n        }\n    }\n\n    async postprocessDetection(outputTensor, imgWidth, imgHeight, ratio) {\n        try {\n            // PP-OCRv5 might have different output format\n            let height, width, data;\n            \n            if (outputTensor.dims.length === 4) {\n                // Standard format: [batch, channels, height, width]\n                const [batchSize, channels, h, w] = outputTensor.dims;\n                height = h;\n                width = w;\n                data = outputTensor.data;\n            } else if (outputTensor.dims.length === 3) {\n                // Alternative format: [batch, height, width]\n                const [batchSize, h, w] = outputTensor.dims;\n                height = h;\n                width = w;\n                data = outputTensor.data;\n            } else {\n                throw new Error(`Unexpected output tensor dimensions: ${outputTensor.dims}`);\n            }\n            \n            console.log(`Detection output shape: ${height}x${width}, total pixels: ${height * width}`);\n            console.log('Output tensor dims:', outputTensor.dims);\n            console.log('Data length:', data.length);\n            \n            // Convert to probability map\n            const probMap = new Float32Array(height * width);\n            for (let i = 0; i < height * width; i++) {\n                probMap[i] = 1 / (1 + Math.exp(-data[i]));  // Sigmoid\n            }\n            \n            // Threshold\n            const bitmap = new Uint8Array(height * width);\n            let detectedPixels = 0;\n            for (let i = 0; i < height * width; i++) {\n                bitmap[i] = probMap[i] > this.CONFIG.det_db_thresh ? 255 : 0;\n                if (bitmap[i] === 255) detectedPixels++;\n            }\n            console.log(`Detected pixels: ${detectedPixels} out of ${height * width} (${(detectedPixels / (height * width) * 100).toFixed(2)}%)`);\n            console.log(`Detection threshold: ${this.CONFIG.det_db_thresh}`);\n            \n            // Log some sample probability values\n            const sampleProbs = [];\n            for (let i = 0; i < Math.min(10, probMap.length); i += Math.floor(probMap.length / 10)) {\n                sampleProbs.push(probMap[i].toFixed(3));\n            }\n            console.log('Sample probability values:', sampleProbs);\n        \n        // Find contours (limit to prevent overflow)\n        const boxes = [];\n        const visited = new Set();\n        let numContours = 0;\n        let componentsFound = 0;\n        let rejectedByScore = 0;\n        let rejectedByArea = 0;\n        \n        for (let y = 0; y < height && numContours < this.CONFIG.det_db_max_candidates; y++) {\n            for (let x = 0; x < width && numContours < this.CONFIG.det_db_max_candidates; x++) {\n                const idx = y * width + x;\n                if (bitmap[idx] === 255 && !visited.has(idx)) {\n                    const box = this.findConnectedComponent(bitmap, width, height, x, y, visited, probMap);\n                    if (box) {\n                        componentsFound++;\n                        if (box.score >= this.CONFIG.det_db_box_thresh) {\n                            // Scale back to original size\n                            box.points = box.points.map(p => [\n                                Math.round(p[0] / ratio),\n                                Math.round(p[1] / ratio)\n                            ]);\n                            \n                            // Calculate area\n                            const area = this.calculatePolygonArea(box.points);\n                            if (area > this.CONFIG.min_area_thresh) {\n                                boxes.push(box);\n                                numContours++;\n                            } else {\n                                rejectedByArea++;\n                                console.log(`Component rejected by area: ${area} < ${this.CONFIG.min_area_thresh}`);\n                            }\n                        } else {\n                            rejectedByScore++;\n                            console.log(`Component rejected by score: ${box.score.toFixed(3)} < ${this.CONFIG.det_db_box_thresh}`);\n                        }\n                    }\n                }\n            }\n        }\n        \n        console.log(`Detection summary: ${componentsFound} components found, ${numContours} accepted, ${rejectedByScore} rejected by score, ${rejectedByArea} rejected by area`);\n        \n        return boxes;\n        } catch (error) {\n            console.error('Error in postprocessDetection:', error);\n            throw new Error(`Detection post-processing failed: ${error.message}`);\n        }\n    }\n\n    findConnectedComponent(bitmap, width, height, startX, startY, visited, probMap) {\n        const stack = [[startX, startY]];\n        const points = [];\n        let totalScore = 0;\n        let count = 0;\n        const MAX_COMPONENT_SIZE = 10000; // Smaller limit for individual components\n        \n        // Mark starting point as visited immediately\n        const startIdx = startY * width + startX;\n        if (visited.has(startIdx) || bitmap[startIdx] !== 255) {\n            return null;\n        }\n        \n        // For text detection, we want to find individual text lines/words\n        // not merge everything into one giant component\n        const componentMap = new Set();\n        componentMap.add(startIdx);\n        \n        while (stack.length > 0 && points.length < MAX_COMPONENT_SIZE) {\n            const [x, y] = stack.pop();\n            const idx = y * width + x;\n            \n            if (visited.has(idx)) continue;\n            visited.add(idx);\n            \n            if (bitmap[idx] === 255) {\n                points.push([x, y]);\n                totalScore += probMap[idx];\n                count++;\n                \n                // For text, use 4-connectivity instead of 8 to avoid merging separate lines\n                const neighbors = [\n                    [x, y - 1], // top\n                    [x, y + 1], // bottom\n                    [x - 1, y], // left\n                    [x + 1, y]  // right\n                ];\n                \n                for (const [nx, ny] of neighbors) {\n                    if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\n                        const nidx = ny * width + nx;\n                        if (!visited.has(nidx) && bitmap[nidx] === 255) {\n                            // Check if this would create too large a component\n                            // This helps separate text lines\n                            const yDiff = Math.abs(ny - startY);\n                            const xDiff = Math.abs(nx - startX);\n                            \n                            // Limit component growth to prevent merging text lines\n                            if (yDiff < height * 0.05 || xDiff < width * 0.3) {\n                                stack.push([nx, ny]);\n                                componentMap.add(nidx);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        if (points.length < this.CONFIG.det_db_min_size) {\n            return null;\n        }\n        \n        // Find bounding box\n        const xs = points.map(p => p[0]);\n        const ys = points.map(p => p[1]);\n        let minX = Math.min(...xs);\n        let maxX = Math.max(...xs);\n        let minY = Math.min(...ys);\n        let maxY = Math.max(...ys);\n        \n        // Apply unclip ratio - different padding for x and y to better fit text\n        const unclipRatio = this.CONFIG.det_db_unclip_ratio;\n        const xPadding = (maxX - minX) * 0.1; // 10% horizontal padding\n        const yPadding = (maxY - minY) * 0.2; // 20% vertical padding for better line coverage\n        \n        minX = Math.max(0, minX - xPadding);\n        maxX = Math.min(width - 1, maxX + xPadding);\n        minY = Math.max(0, minY - yPadding);\n        maxY = Math.min(height - 1, maxY + yPadding);\n        \n        return {\n            points: [\n                [minX, minY],\n                [maxX, minY],\n                [maxX, maxY],\n                [minX, maxY]\n            ],\n            score: totalScore / count\n        };\n    }\n\n    calculatePolygonArea(points) {\n        let area = 0;\n        const n = points.length;\n        for (let i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            area += points[i][0] * points[j][1];\n            area -= points[j][0] * points[i][1];\n        }\n        return Math.abs(area) / 2;\n    }\n\n    // Simplified detection fallback when ONNX Runtime fails\n    async simplifiedDetection(imageData, ratio) {\n        console.log('Using simplified detection fallback...');\n        \n        // Convert image to grayscale canvas\n        this.canvas.width = imageData.width;\n        this.canvas.height = imageData.height;\n        this.ctx.drawImage(imageData, 0, 0);\n        \n        const imgData = this.ctx.getImageData(0, 0, imageData.width, imageData.height);\n        const pixels = imgData.data;\n        \n        // Convert to grayscale and apply threshold\n        const grayscale = new Uint8Array(imageData.width * imageData.height);\n        for (let i = 0; i < grayscale.length; i++) {\n            const idx = i * 4;\n            const gray = 0.299 * pixels[idx] + 0.587 * pixels[idx + 1] + 0.114 * pixels[idx + 2];\n            grayscale[i] = gray < 200 ? 255 : 0; // Simple threshold\n        }\n        \n        // Simple connected component analysis\n        const boxes = [];\n        const visited = new Set();\n        \n        for (let y = 10; y < imageData.height - 10; y += 20) {\n            for (let x = 10; x < imageData.width - 10; x += 20) {\n                const idx = y * imageData.width + x;\n                if (grayscale[idx] === 255 && !visited.has(idx)) {\n                    // Found text pixel, create a box\n                    let minX = x, maxX = x, minY = y, maxY = y;\n                    \n                    // Simple flood fill to find bounds\n                    const stack = [[x, y]];\n                    while (stack.length > 0 && visited.size < 10000) {\n                        const [cx, cy] = stack.pop();\n                        const cidx = cy * imageData.width + cx;\n                        \n                        if (cx < 0 || cx >= imageData.width || cy < 0 || cy >= imageData.height) continue;\n                        if (visited.has(cidx) || grayscale[cidx] !== 255) continue;\n                        \n                        visited.add(cidx);\n                        minX = Math.min(minX, cx);\n                        maxX = Math.max(maxX, cx);\n                        minY = Math.min(minY, cy);\n                        maxY = Math.max(maxY, cy);\n                        \n                        // Add neighbors\n                        stack.push([cx + 1, cy], [cx - 1, cy], [cx, cy + 1], [cx, cy - 1]);\n                    }\n                    \n                    // Create box if it's large enough\n                    if ((maxX - minX) > 10 && (maxY - minY) > 10) {\n                        boxes.push({\n                            points: [\n                                [minX / ratio, minY / ratio],\n                                [maxX / ratio, minY / ratio],\n                                [maxX / ratio, maxY / ratio],\n                                [minX / ratio, maxY / ratio]\n                            ],\n                            score: 0.8\n                        });\n                    }\n                }\n            }\n        }\n        \n        return boxes;\n    }\n\n    sortBoxes(boxes) {\n        // RapidOCR-style box sorting: top to bottom, left to right\n        if (boxes.length === 0) return boxes;\n        \n        // First sort by Y coordinate\n        boxes.sort((a, b) => {\n            const aY = a.points[0][1]; // Top-left Y\n            const bY = b.points[0][1];\n            return aY - bY;\n        });\n        \n        // Then adjust for boxes on the same line\n        for (let i = boxes.length - 1; i > 0; i--) {\n            for (let j = i - 1; j >= 0; j--) {\n                // If boxes are on the same horizontal line (within 10 pixels)\n                if (Math.abs(boxes[j + 1].points[0][1] - boxes[j].points[0][1]) < 10 &&\n                    boxes[j + 1].points[0][0] < boxes[j].points[0][0]) {\n                    // Swap if the right box is actually to the left\n                    const tmp = boxes[j];\n                    boxes[j] = boxes[j + 1];\n                    boxes[j + 1] = tmp;\n                } else {\n                    break;\n                }\n            }\n        }\n        \n        return boxes;\n    }\n\n    async recognizeText(imageData, boxes) {\n        if (!this.recognitionSession) {\n            throw new Error('Recognition model not loaded');\n        }\n\n        const results = [];\n        \n        // Process in batches like RapidOCR\n        const batchSize = this.CONFIG.rec_batch_num;\n        \n        for (let i = 0; i < boxes.length; i += batchSize) {\n            const batchBoxes = boxes.slice(i, Math.min(i + batchSize, boxes.length));\n            const batchResults = await this.processBatch(imageData, batchBoxes);\n            results.push(...batchResults);\n        }\n        \n        return results;\n    }\n\n    async processBatch(imageData, boxes) {\n        const results = [];\n        \n        // Sort by width ratio for better batching (RapidOCR approach)\n        const croppedImages = [];\n        const widthRatios = [];\n        \n        for (const box of boxes) {\n            const cropped = await this.getRotateCropImage(imageData, box);\n            const ratio = cropped.width / cropped.height;\n            croppedImages.push(cropped);\n            widthRatios.push(ratio);\n        }\n        \n        // Sort by width ratio\n        const indices = Array.from({length: boxes.length}, (_, i) => i)\n            .sort((a, b) => widthRatios[a] - widthRatios[b]);\n        \n        // Process sorted batch\n        for (const idx of indices) {\n            const cropped = croppedImages[idx];\n            const box = boxes[idx];\n            \n            // Preprocess for recognition\n            const inputTensor = await this.preprocessForRecognition(cropped);\n            \n            // Run recognition\n            const feeds = { [this.recognitionSession.inputNames[0]]: inputTensor };\n            const output = await this.recognitionSession.run(feeds);\n            \n            // Decode the output\n            const result = await this.decodeRecognition(output[this.recognitionSession.outputNames[0]]);\n            \n            if (result.score >= this.CONFIG.drop_score) {\n                results.push({\n                    text: result.text,\n                    confidence: result.score,\n                    box: box.points\n                });\n            }\n        }\n        \n        return results;\n    }\n\n    async getRotateCropImage(imageData, box) {\n        // RapidOCR-style perspective transform and rotation handling\n        const points = box.points;\n        \n        // Calculate crop dimensions\n        const width1 = Math.sqrt(Math.pow(points[0][0] - points[1][0], 2) + \n                               Math.pow(points[0][1] - points[1][1], 2));\n        const width2 = Math.sqrt(Math.pow(points[2][0] - points[3][0], 2) + \n                               Math.pow(points[2][1] - points[3][1], 2));\n        const cropWidth = Math.max(width1, width2);\n        \n        const height1 = Math.sqrt(Math.pow(points[0][0] - points[3][0], 2) + \n                                Math.pow(points[0][1] - points[3][1], 2));\n        const height2 = Math.sqrt(Math.pow(points[1][0] - points[2][0], 2) + \n                                Math.pow(points[1][1] - points[2][1], 2));\n        const cropHeight = Math.max(height1, height2);\n        \n        // For now, use simple cropping (perspective transform would require additional libraries)\n        // This is a simplified version that works well for most cases\n        const minX = Math.min(...points.map(p => p[0]));\n        const maxX = Math.max(...points.map(p => p[0]));\n        const minY = Math.min(...points.map(p => p[1]));\n        const maxY = Math.max(...points.map(p => p[1]));\n        \n        const width = maxX - minX;\n        const height = maxY - minY;\n        \n        this.canvas.width = width;\n        this.canvas.height = height;\n        \n        this.ctx.drawImage(imageData, minX, minY, width, height, 0, 0, width, height);\n        \n        // Check if image needs rotation (height > 1.5 * width)\n        let needRotation = false;\n        if (height * 1.0 / width >= 1.5) {\n            needRotation = true;\n            // Rotate 90 degrees\n            const rotatedCanvas = document.createElement('canvas');\n            const rotatedCtx = rotatedCanvas.getContext('2d', { willReadFrequently: true });\n            rotatedCanvas.width = height;\n            rotatedCanvas.height = width;\n            rotatedCtx.translate(height / 2, width / 2);\n            rotatedCtx.rotate(Math.PI / 2);\n            rotatedCtx.drawImage(this.canvas, -width / 2, -height / 2);\n            \n            // Copy back to main canvas\n            this.canvas.width = height;\n            this.canvas.height = width;\n            this.ctx.drawImage(rotatedCanvas, 0, 0);\n        }\n        \n        const imgElement = new Image();\n        return new Promise((resolve) => {\n            this.canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                imgElement.onload = () => {\n                    URL.revokeObjectURL(url);\n                    resolve(imgElement);\n                };\n                imgElement.src = url;\n            });\n        });\n    }\n\n    async preprocessForRecognition(imageData) {\n        // Recognition model expects fixed height\n        const imgChannel = 3;\n        const imgHeight = this.CONFIG.rec_image_height;\n        const imgWidth = this.CONFIG.rec_image_width;\n        \n        // Calculate max width ratio (RapidOCR style)\n        const h = imageData.height;\n        const w = imageData.width;\n        const ratio = w / h;\n        const maxWhRatio = imgWidth / imgHeight;\n        \n        let resizedW;\n        if (Math.ceil(imgHeight * ratio) > imgWidth) {\n            resizedW = imgWidth;\n        } else {\n            resizedW = Math.ceil(imgHeight * ratio);\n        }\n        \n        // Resize image\n        this.canvas.width = resizedW;\n        this.canvas.height = imgHeight;\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, resizedW, imgHeight);\n        this.ctx.drawImage(imageData, 0, 0, resizedW, imgHeight);\n        \n        const imgData = this.ctx.getImageData(0, 0, resizedW, imgHeight);\n        const pixels = imgData.data;\n        \n        // Create padding tensor with fixed width\n        const paddingData = new Float32Array(imgChannel * imgHeight * imgWidth);\n        \n        // Copy resized image to padded tensor (RapidOCR normalization)\n        for (let c = 0; c < imgChannel; c++) {\n            for (let y = 0; y < imgHeight; y++) {\n                for (let x = 0; x < resizedW; x++) {\n                    const srcIdx = (y * resizedW + x) * 4 + c;\n                    const dstIdx = c * imgHeight * imgWidth + y * imgWidth + x;\n                    // RapidOCR recognition normalization: (x/255 - 0.5) / 0.5\n                    paddingData[dstIdx] = (pixels[srcIdx] / 255.0 - this.CONFIG.rec_mean) / this.CONFIG.rec_std;\n                }\n            }\n        }\n        \n        return new ort.Tensor('float32', paddingData, [1, imgChannel, imgHeight, imgWidth]);\n    }\n\n    async decodeRecognition(outputTensor) {\n        // CTC decoding\n        const [batchSize, seqLen, vocabSize] = outputTensor.dims;\n        const preds = outputTensor.data;\n        \n        // Get argmax for each time step\n        const predIdxs = [];\n        const scores = [];\n        \n        for (let t = 0; t < seqLen; t++) {\n            let maxIdx = 0;\n            let maxVal = preds[t * vocabSize];\n            \n            for (let c = 1; c < vocabSize; c++) {\n                const val = preds[t * vocabSize + c];\n                if (val > maxVal) {\n                    maxVal = val;\n                    maxIdx = c;\n                }\n            }\n            predIdxs.push(maxIdx);\n            scores.push(maxVal);\n        }\n        \n        // CTC decode: remove blanks and repeated characters\n        const decoded = [];\n        const decodedScores = [];\n        let lastIdx = -1;\n        \n        for (let i = 0; i < predIdxs.length; i++) {\n            const idx = predIdxs[i];\n            \n            // Skip blank (index 0) and repeated characters\n            if (idx !== 0 && idx !== lastIdx) {\n                if (idx < this.charDict.length) {\n                    decoded.push(this.charDict[idx]);\n                    decodedScores.push(scores[i]);\n                }\n            }\n            lastIdx = idx;\n        }\n        \n        return {\n            text: decoded.join(''),\n            score: decodedScores.length > 0 ? \n                decodedScores.reduce((a, b) => a + b) / decodedScores.length : 0\n        };\n    }\n\n    mergeTextLines(results) {\n        if (results.length === 0) return results;\n        \n        // Filter results by confidence score first (RapidOCR approach)\n        let filteredResults = this.filterResults(results);\n        if (filteredResults.length === 0) return filteredResults;\n        \n        // Apply English-specific post-processing if enabled\n        if (this.CONFIG.english_mode) {\n            filteredResults = this.postProcessEnglishText(filteredResults);\n        }\n        \n        // Calculate average text height\n        const heights = filteredResults.map(r => {\n            const ys = r.box.map(p => p[1]);\n            return Math.max(...ys) - Math.min(...ys);\n        });\n        const avgHeight = heights.reduce((a, b) => a + b) / heights.length;\n        \n        // Group results into lines\n        const lines = [];\n        let currentLine = [filteredResults[0]];\n        \n        for (let i = 1; i < filteredResults.length; i++) {\n            const current = filteredResults[i];\n            const previous = filteredResults[i - 1];\n            \n            const prevY = Math.min(...previous.box.map(p => p[1]));\n            const currY = Math.min(...current.box.map(p => p[1]));\n            \n            const verticalGap = Math.abs(currY - prevY);\n            const threshold = avgHeight * this.CONFIG.vertical_gap_threshold;\n            \n            if (verticalGap <= threshold) {\n                currentLine.push(current);\n            } else {\n                lines.push(currentLine);\n                currentLine = [current];\n            }\n        }\n        \n        if (currentLine.length > 0) {\n            lines.push(currentLine);\n        }\n        \n        // Merge text within each line\n        const mergedResults = [];\n        for (const line of lines) {\n            // Sort by x-coordinate within line\n            line.sort((a, b) => {\n                const aX = Math.min(...a.box.map(p => p[0]));\n                const bX = Math.min(...b.box.map(p => p[0]));\n                return aX - bX;\n            });\n            \n            // Merge text\n            const text = line.map(r => r.text).join(' ');\n            const avgConfidence = line.reduce((sum, r) => sum + r.confidence, 0) / line.length;\n            \n            // Calculate combined bounding box\n            const allPoints = line.flatMap(r => r.box);\n            const xs = allPoints.map(p => p[0]);\n            const ys = allPoints.map(p => p[1]);\n            \n            mergedResults.push({\n                text: text,\n                confidence: avgConfidence,\n                box: [\n                    [Math.min(...xs), Math.min(...ys)],\n                    [Math.max(...xs), Math.min(...ys)],\n                    [Math.max(...xs), Math.max(...ys)],\n                    [Math.min(...xs), Math.max(...ys)]\n                ]\n            });\n        }\n        \n        return mergedResults;\n    }\n\n    filterResults(results) {\n        // Filter out low confidence results - much lower threshold\n        const textScoreThreshold = this.CONFIG.drop_score; // Use the configured drop score\n        return results.filter(result => {\n            // Keep results with any reasonable confidence\n            if (result.confidence < textScoreThreshold) {\n                return false;\n            }\n            \n            // Keep any text that has content (even single characters)\n            return result.text && result.text.trim().length > 0;\n        });\n    }\n\n    async processPDF(pdfBlob) {\n        const arrayBuffer = await pdfBlob.arrayBuffer();\n        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n        const numPages = pdf.numPages;\n        const allResults = [];\n        \n        for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const viewport = page.getViewport({ scale: 2.0 });\n            \n            // Render page to canvas\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = viewport.width;\n            canvas.height = viewport.height;\n            \n            await page.render({\n                canvasContext: ctx,\n                viewport: viewport\n            }).promise;\n            \n            // Convert to blob\n            const blob = await new Promise(resolve => canvas.toBlob(resolve));\n            \n            // Process as image\n            const pageResults = await this.process(blob);\n            \n            allResults.push({\n                page: pageNum,\n                results: pageResults\n            });\n        }\n        \n        return allResults;\n    }\n\n    async blobToImage(blob) {\n        return new Promise((resolve, reject) => {\n            const img = new Image();\n            const url = URL.createObjectURL(blob);\n            \n            img.onload = () => {\n                URL.revokeObjectURL(url);\n                resolve(img);\n            };\n            \n            img.onerror = () => {\n                URL.revokeObjectURL(url);\n                reject(new Error('Failed to load image'));\n            };\n            \n            img.src = url;\n        });\n    }\n    \n    postProcessEnglishText(results) {\n        // English-specific post-processing\n        return results.map(result => {\n            let text = result.text;\n            \n            // Fix common OCR errors in English\n            text = text\n                .replace(/([a-z])([A-Z])/g, '$1 $2')  // Split camelCase\n                .replace(/([a-zA-Z])(\\d)/g, '$1 $2')   // Split letters from numbers\n                .replace(/(\\d)([a-zA-Z])/g, '$1 $2')   // Split numbers from letters\n                .replace(/\\s+/g, ' ')                   // Normalize whitespace\n                .replace(/([.,!?;:])([a-zA-Z])/g, '$1 $2') // Add space after punctuation\n                .trim();\n            \n            // Common English OCR corrections\n            const corrections = {\n                'tne': 'the',\n                'tnat': 'that',\n                'wnen': 'when',\n                'wnere': 'where',\n                'witn': 'with',\n                'l\\'': 'I\\'',\n                ' l ': ' I ',\n                '^l ': 'I ',\n            };\n            \n            for (const [wrong, correct] of Object.entries(corrections)) {\n                const regex = new RegExp(wrong, 'gi');\n                text = text.replace(regex, correct);\n            }\n            \n            return {\n                ...result,\n                text: text\n            };\n        });\n    }\n}\n\n// Create singleton instance\nexport const ppOCRImprovedEngine = new PPOCRImprovedEngine();","import * as ort from 'onnxruntime-web';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = '/client-ocr-app/pdf.worker.min.js';\n\n// Configure ONNX Runtime to use the bundled WASM files\nort.env.wasm.wasmPaths = '/client-ocr-app/assets/';\nort.env.wasm.numThreads = 1;  // Disable multi-threading to avoid CORS issues\n\n// Model paths - will be served from your GitHub Pages\nconst MODEL_BASE = '/client-ocr-app/models/';\nconst MODELS = {\n    detection: {\n        path: MODEL_BASE + 'PP-OCRv5_mobile_det_infer.onnx',\n        name: 'PP-OCRv5 Mobile Detection'\n    },\n    recognition: {\n        // Use PP-OCRv4 English model for better English recognition\n        path: MODEL_BASE + 'en_PP-OCRv4_mobile_rec_infer.onnx',\n        name: 'PP-OCRv4 English Recognition'\n    },\n    dictionary: {\n        // Use English dictionary for PP-OCRv4\n        path: MODEL_BASE + 'en_dict.txt',\n        name: 'English Dictionary'\n    }\n};\n\n// OCR configuration - optimized with very low thresholds\nconst CONFIG = {\n    // Detection parameters\n    det_limit_side_len: 1280,\n    det_limit_type: 'max',\n    det_db_thresh: 0.05,      // Very low threshold for maximum detection\n    det_db_box_thresh: 0.15,  // Very low box threshold\n    det_db_unclip_ratio: 2.5, // Higher coverage\n    \n    // Recognition parameters\n    rec_batch_num: 6,\n    drop_score: 0.05,         // Extremely low threshold to keep all text\n    \n    // Image preprocessing (ImageNet normalization)\n    mean: [0.485, 0.456, 0.406],\n    std: [0.229, 0.224, 0.225]\n};\n\nexport class PPOCREngine {\n    constructor() {\n        this.detectionSession = null;\n        this.recognitionSession = null;\n        this.charDict = [];\n        this.initialized = false;\n        this.canvas = null;\n        this.ctx = null;\n        this.modelConfig = {\n            detection: 'PP-OCRv5_mobile_det_infer.onnx',  // PP-OCRv5 mobile detection\n            recognition: 'en_PP-OCRv4_mobile_rec_infer.onnx',  // English-specific model\n            dictionary: 'en_dict.txt'  // English dictionary\n        };\n    }\n\n    setModelConfig(config) {\n        // Update model configuration\n        if (config.detection) this.modelConfig.detection = config.detection;\n        if (config.recognition) this.modelConfig.recognition = config.recognition;\n        if (config.dictionary) this.modelConfig.dictionary = config.dictionary;\n        \n        // Mark as not initialized to force reload\n        this.initialized = false;\n    }\n\n    async initialize(progressCallback) {\n        // Always reinitialize when called to ensure proper model loading\n        this.initialized = false;\n\n        try {\n            // Create canvas for image processing with willReadFrequently for better performance\n            this.canvas = document.createElement('canvas');\n            this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });\n\n            // Load dictionary\n            progressCallback?.({ status: 'loading', message: 'Loading dictionary...', progress: 10 });\n            await this.loadDictionary();\n\n            // Load detection model\n            const detectionName = this.modelConfig.detection.replace('.onnx', '').replace(/_/g, ' ');\n            progressCallback?.({ status: 'loading', message: `Loading ${detectionName}...`, progress: 30 });\n            \n            // Release existing session if any\n            if (this.detectionSession) {\n                await this.detectionSession.release();\n            }\n            \n            this.detectionSession = await ort.InferenceSession.create(\n                MODEL_BASE + this.modelConfig.detection, \n                {\n                    executionProviders: ['wasm'],\n                    graphOptimizationLevel: 'all'\n                }\n            );\n            console.log('Detection model loaded:', this.detectionSession.inputNames, this.detectionSession.outputNames);\n\n            // Load recognition model\n            const recognitionName = this.modelConfig.recognition.replace('.onnx', '').replace(/_/g, ' ');\n            progressCallback?.({ status: 'loading', message: `Loading ${recognitionName}...`, progress: 70 });\n            \n            // Release existing session if any\n            if (this.recognitionSession) {\n                await this.recognitionSession.release();\n            }\n            \n            this.recognitionSession = await ort.InferenceSession.create(\n                MODEL_BASE + this.modelConfig.recognition, \n                {\n                    executionProviders: ['wasm'],\n                    graphOptimizationLevel: 'all'\n                }\n            );\n            console.log('Recognition model loaded:', this.recognitionSession.inputNames, this.recognitionSession.outputNames);\n\n            this.initialized = true;\n            progressCallback?.({ status: 'ready', message: 'PP-OCR models loaded successfully!', progress: 100 });\n        } catch (error) {\n            console.error('Failed to initialize PP-OCR models:', error);\n            throw error;\n        }\n    }\n\n    async loadDictionary() {\n        try {\n            const response = await fetch(MODEL_BASE + this.modelConfig.dictionary);\n            const text = await response.text();\n            this.charDict = text.split('\\n').filter(line => line.trim());\n            // Add blank token at the beginning\n            this.charDict.unshift(' ');\n            console.log(`Loaded dictionary ${this.modelConfig.dictionary} with ${this.charDict.length} characters`);\n        } catch (error) {\n            console.error('Failed to load dictionary:', error);\n            // Use basic ASCII as fallback\n            this.charDict = [' '];\n            for (let i = 32; i < 127; i++) {\n                this.charDict.push(String.fromCharCode(i));\n            }\n        }\n    }\n\n    async process(imageBlob) {\n        if (!this.initialized) {\n            throw new Error('OCR engine not initialized');\n        }\n\n        // Check if it's a PDF\n        if (imageBlob.type === 'application/pdf') {\n            return await this.processPDF(imageBlob);\n        }\n\n        // Convert blob to image\n        const imageData = await this.blobToImage(imageBlob);\n        \n        // Detect text regions\n        const boxes = await this.detectText(imageData);\n        \n        // Recognize text in each region\n        const results = await this.recognizeText(imageData, boxes);\n        \n        return results;\n    }\n\n    async detectText(imageData) {\n        if (!this.detectionSession) {\n            throw new Error('Detection model not loaded');\n        }\n\n        // Resize image for detection\n        const { resizedImage, ratio } = await this.resizeForDetection(imageData);\n        \n        // Preprocess image\n        const inputTensor = await this.preprocessForDetection(resizedImage);\n        \n        // Run detection\n        const feeds = { [this.detectionSession.inputNames[0]]: inputTensor };\n        const results = await this.detectionSession.run(feeds);\n        \n        // Post-process detection results\n        const outputTensor = results[this.detectionSession.outputNames[0]];\n        const boxes = await this.postprocessDetection(outputTensor, resizedImage.width, resizedImage.height, ratio);\n        \n        return boxes;\n    }\n\n    async resizeForDetection(imageData) {\n        const limit = CONFIG.det_limit_side_len;\n        const limitType = CONFIG.det_limit_type;\n        \n        let w = imageData.width;\n        let h = imageData.height;\n        \n        // Calculate resize ratio\n        let ratio = 1.0;\n        if (limitType === 'max') {\n            if (Math.max(h, w) > limit) {\n                ratio = limit / Math.max(h, w);\n            }\n        } else {\n            if (Math.min(h, w) < limit) {\n                ratio = limit / Math.min(h, w);\n            }\n        }\n        \n        const newW = Math.ceil(w * ratio);\n        const newH = Math.ceil(h * ratio);\n        \n        // Make dimensions divisible by 32\n        const targetW = Math.ceil(newW / 32) * 32;\n        const targetH = Math.ceil(newH / 32) * 32;\n        \n        // Resize image\n        this.canvas.width = targetW;\n        this.canvas.height = targetH;\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, targetW, targetH);\n        this.ctx.drawImage(imageData, 0, 0, newW, newH);\n        \n        const resizedImage = new Image();\n        return new Promise((resolve) => {\n            this.canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                resizedImage.onload = () => {\n                    URL.revokeObjectURL(url);\n                    resolve({ resizedImage, ratio });\n                };\n                resizedImage.src = url;\n            });\n        });\n    }\n\n    async preprocessForDetection(imageData) {\n        // Draw image to canvas\n        this.canvas.width = imageData.width;\n        this.canvas.height = imageData.height;\n        this.ctx.drawImage(imageData, 0, 0);\n        \n        const imgData = this.ctx.getImageData(0, 0, imageData.width, imageData.height);\n        const pixels = imgData.data;\n        \n        // Create tensor [1, 3, H, W]\n        const size = imageData.width * imageData.height;\n        const floatData = new Float32Array(3 * size);\n        \n        // Normalize and rearrange to CHW format\n        for (let i = 0; i < size; i++) {\n            const pixelIndex = i * 4;\n            floatData[i] = (pixels[pixelIndex] / 255.0 - CONFIG.mean[0]) / CONFIG.std[0];\n            floatData[size + i] = (pixels[pixelIndex + 1] / 255.0 - CONFIG.mean[1]) / CONFIG.std[1];\n            floatData[2 * size + i] = (pixels[pixelIndex + 2] / 255.0 - CONFIG.mean[2]) / CONFIG.std[2];\n        }\n        \n        return new ort.Tensor('float32', floatData, [1, 3, imageData.height, imageData.width]);\n    }\n\n    async postprocessDetection(outputTensor, imgWidth, imgHeight, ratio) {\n        const [batchSize, channels, height, width] = outputTensor.dims;\n        const data = outputTensor.data;\n        \n        // Apply sigmoid to get probabilities\n        const probMap = new Float32Array(height * width);\n        for (let i = 0; i < height * width; i++) {\n            probMap[i] = 1 / (1 + Math.exp(-data[i]));  // Sigmoid\n        }\n        \n        // Apply threshold\n        const bitmap = new Uint8Array(height * width);\n        const thresh = CONFIG.det_db_thresh;\n        \n        for (let i = 0; i < height * width; i++) {\n            bitmap[i] = probMap[i] > thresh ? 1 : 0;\n        }\n        \n        // Find text regions\n        const boxes = [];\n        const visited = new Set();\n        \n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const idx = y * width + x;\n                if (bitmap[idx] === 1 && !visited.has(idx) && probMap[idx] > CONFIG.det_db_box_thresh) {\n                    const box = this.expandBox(bitmap, probMap, x, y, width, height, visited);\n                    if (box) {\n                        // Scale box back to original size\n                        const scaledBox = {\n                            points: box.points.map(p => [\n                                Math.round(p[0] * imgWidth / width / ratio),\n                                Math.round(p[1] * imgHeight / height / ratio)\n                            ]),\n                            score: box.score\n                        };\n                        boxes.push(scaledBox);\n                    }\n                }\n            }\n        }\n        \n        return this.sortBoxes(boxes);\n    }\n\n    expandBox(bitmap, scores, startX, startY, width, height, visited) {\n        let minX = startX, maxX = startX;\n        let minY = startY, maxY = startY;\n        let totalScore = 0;\n        let count = 0;\n        \n        // BFS to find connected component\n        const queue = [[startX, startY]];\n        visited.add(startY * width + startX);\n        \n        while (queue.length > 0) {\n            const [x, y] = queue.shift();\n            totalScore += scores[y * width + x];\n            count++;\n            \n            // Check neighbors\n            for (let dy = -1; dy <= 1; dy++) {\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = x + dx;\n                    const ny = y + dy;\n                    const nidx = ny * width + nx;\n                    \n                    if (nx >= 0 && nx < width && ny >= 0 && ny < height && \n                        bitmap[nidx] === 1 && !visited.has(nidx)) {\n                        visited.add(nidx);\n                        queue.push([nx, ny]);\n                        minX = Math.min(minX, nx);\n                        maxX = Math.max(maxX, nx);\n                        minY = Math.min(minY, ny);\n                        maxY = Math.max(maxY, ny);\n                    }\n                }\n            }\n        }\n        \n        // Filter small regions - lower threshold\n        if ((maxX - minX) < 3 || (maxY - minY) < 3) {\n            return null;\n        }\n        \n        // Apply unclip ratio\n        const unclipRatio = CONFIG.det_db_unclip_ratio;\n        const padding = Math.max((maxX - minX), (maxY - minY)) * (unclipRatio - 1) / 2;\n        \n        minX = Math.max(0, minX - padding);\n        maxX = Math.min(width - 1, maxX + padding);\n        minY = Math.max(0, minY - padding);\n        maxY = Math.min(height - 1, maxY + padding);\n        \n        return {\n            points: [\n                [minX, minY],\n                [maxX, minY],\n                [maxX, maxY],\n                [minX, maxY]\n            ],\n            score: totalScore / count\n        };\n    }\n\n    sortBoxes(boxes) {\n        // Sort boxes from top to bottom, left to right\n        return boxes.sort((a, b) => {\n            const aY = Math.min(...a.points.map(p => p[1]));\n            const bY = Math.min(...b.points.map(p => p[1]));\n            \n            if (Math.abs(aY - bY) < 10) {\n                const aX = Math.min(...a.points.map(p => p[0]));\n                const bX = Math.min(...b.points.map(p => p[0]));\n                return aX - bX;\n            }\n            return aY - bY;\n        });\n    }\n\n    async recognizeText(imageData, boxes) {\n        if (!this.recognitionSession) {\n            throw new Error('Recognition model not loaded');\n        }\n\n        const results = [];\n        \n        for (const box of boxes) {\n            // Crop image to box region\n            const cropped = await this.cropToBox(imageData, box);\n            \n            // Preprocess for recognition\n            const inputTensor = await this.preprocessForRecognition(cropped);\n            \n            // Run recognition\n            const feeds = { [this.recognitionSession.inputNames[0]]: inputTensor };\n            const output = await this.recognitionSession.run(feeds);\n            \n            // Decode the output\n            const result = await this.decodeRecognition(output[this.recognitionSession.outputNames[0]]);\n            \n            if (result.score >= CONFIG.drop_score) {\n                results.push({\n                    text: result.text,\n                    confidence: result.score,\n                    box: box.points\n                });\n            }\n        }\n        \n        return results;\n    }\n\n    async cropToBox(imageData, box) {\n        const points = box.points;\n        const minX = Math.min(...points.map(p => p[0]));\n        const maxX = Math.max(...points.map(p => p[0]));\n        const minY = Math.min(...points.map(p => p[1]));\n        const maxY = Math.max(...points.map(p => p[1]));\n        \n        const width = maxX - minX;\n        const height = maxY - minY;\n        \n        this.canvas.width = width;\n        this.canvas.height = height;\n        \n        this.ctx.drawImage(imageData, minX, minY, width, height, 0, 0, width, height);\n        \n        const imgElement = new Image();\n        return new Promise((resolve) => {\n            this.canvas.toBlob((blob) => {\n                const url = URL.createObjectURL(blob);\n                imgElement.onload = () => {\n                    URL.revokeObjectURL(url);\n                    resolve(imgElement);\n                };\n                imgElement.src = url;\n            });\n        });\n    }\n\n    async preprocessForRecognition(imageData) {\n        // Recognition model expects fixed height (48) and variable width\n        const targetHeight = 48;\n        const aspectRatio = imageData.width / imageData.height;\n        let targetWidth = Math.round(targetHeight * aspectRatio);\n        \n        // Ensure minimum width\n        targetWidth = Math.max(targetWidth, 48);\n        \n        // Resize image\n        this.canvas.width = targetWidth;\n        this.canvas.height = targetHeight;\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, targetWidth, targetHeight);\n        this.ctx.drawImage(imageData, 0, 0, targetWidth, targetHeight);\n        \n        const imgData = this.ctx.getImageData(0, 0, targetWidth, targetHeight);\n        const pixels = imgData.data;\n        \n        // Create tensor [1, 3, H, W]\n        const size = targetWidth * targetHeight;\n        const floatData = new Float32Array(3 * size);\n        \n        // Normalize\n        for (let i = 0; i < size; i++) {\n            const pixelIndex = i * 4;\n            floatData[i] = (pixels[pixelIndex] / 255.0 - 0.5) / 0.5;\n            floatData[size + i] = (pixels[pixelIndex + 1] / 255.0 - 0.5) / 0.5;\n            floatData[2 * size + i] = (pixels[pixelIndex + 2] / 255.0 - 0.5) / 0.5;\n        }\n        \n        return new ort.Tensor('float32', floatData, [1, 3, targetHeight, targetWidth]);\n    }\n\n    async decodeRecognition(outputTensor) {\n        // CTC decoding\n        const [batchSize, seqLen, vocabSize] = outputTensor.dims;\n        const preds = outputTensor.data;\n        \n        // Get argmax for each time step\n        const predIdxs = [];\n        const scores = [];\n        \n        for (let t = 0; t < seqLen; t++) {\n            let maxIdx = 0;\n            let maxVal = preds[t * vocabSize];\n            \n            for (let c = 1; c < vocabSize; c++) {\n                const val = preds[t * vocabSize + c];\n                if (val > maxVal) {\n                    maxVal = val;\n                    maxIdx = c;\n                }\n            }\n            predIdxs.push(maxIdx);\n            scores.push(maxVal);\n        }\n        \n        // CTC decode: remove blanks and repeated characters\n        const decoded = [];\n        const decodedScores = [];\n        let lastIdx = -1;\n        \n        for (let i = 0; i < predIdxs.length; i++) {\n            const idx = predIdxs[i];\n            \n            // Skip blank (index 0) and repeated characters\n            if (idx !== 0 && idx !== lastIdx) {\n                if (idx < this.charDict.length) {\n                    decoded.push(this.charDict[idx]);\n                    decodedScores.push(scores[i]);\n                }\n            }\n            lastIdx = idx;\n        }\n        \n        return {\n            text: decoded.join(''),\n            score: decodedScores.length > 0 ? \n                decodedScores.reduce((a, b) => a + b) / decodedScores.length : 0\n        };\n    }\n\n    async processPDF(pdfBlob) {\n        const arrayBuffer = await pdfBlob.arrayBuffer();\n        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n        const numPages = pdf.numPages;\n        const allResults = [];\n        \n        for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const viewport = page.getViewport({ scale: 2.0 });\n            \n            // Render page to canvas\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = viewport.width;\n            canvas.height = viewport.height;\n            \n            await page.render({\n                canvasContext: ctx,\n                viewport: viewport\n            }).promise;\n            \n            // Convert canvas to blob and process\n            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\n            const pageImage = await this.blobToImage(blob);\n            \n            // Process with OCR\n            const boxes = await this.detectText(pageImage);\n            const pageResults = await this.recognizeText(pageImage, boxes);\n            \n            allResults.push({\n                page: pageNum,\n                results: pageResults\n            });\n        }\n        \n        return allResults;\n    }\n\n    async blobToImage(blob) {\n        return new Promise((resolve, reject) => {\n            const img = new Image();\n            img.onload = () => resolve(img);\n            img.onerror = reject;\n            img.src = URL.createObjectURL(blob);\n        });\n    }\n}\n\n// Create singleton instance\nexport const ppOCREngine = new PPOCREngine();","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","module.exports = (prefix, cnt) => (\n  `${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`\n);\n","const getId = require('./utils/getId');\n\nlet jobCounter = 0;\n\nmodule.exports = ({\n  id: _id,\n  action,\n  payload = {},\n}) => {\n  let id = _id;\n  if (typeof id === 'undefined') {\n    id = getId('Job', jobCounter);\n    jobCounter += 1;\n  }\n\n  return {\n    id,\n    action,\n    payload,\n  };\n};\n","let logging = false;\n\nexports.logging = logging;\n\nexports.setLogging = (_logging) => {\n  logging = _logging;\n};\n\nexports.log = (...args) => (logging ? console.log.apply(this, args) : null);\n","const createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => (\n    new Promise((resolve, reject) => {\n      const job = createJob({ action, payload });\n      jobQueue.push(async (w) => {\n        jobQueue.shift();\n        runningWorkers[w.id] = job;\n        try {\n          resolve(await w[action].apply(this, [...payload, job.id]));\n        } catch (err) {\n          reject(err);\n        } finally {\n          delete runningWorkers[w.id];\n          dequeue();\n        }\n      });\n      log(`[${id}]: Add ${job.id} to JobQueue`);\n      log(`[${id}]: JobQueue length=${jobQueue.length}`);\n      dequeue();\n    })\n  );\n\n  const addWorker = (w) => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = async (action, ...payload) => {\n    if (getNumWorkers() === 0) {\n      throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n    }\n    return queue(action, payload);\n  };\n\n  const terminate = async () => {\n    Object.keys(workers).forEach(async (wid) => {\n      await workers[wid].terminate();\n    });\n    jobQueue = [];\n  };\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers,\n  };\n};\n","// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to false\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = isElectron;\n","const isElectron = require('is-electron');\n\nmodule.exports = (key) => {\n  const env = {};\n\n  if (typeof WorkerGlobalScope !== 'undefined') {\n    env.type = 'webworker';\n  } else if (isElectron()) {\n    env.type = 'electron';\n  } else if (typeof document === 'object') {\n    env.type = 'browser';\n  } else if (typeof process === 'object' && typeof require === 'function') {\n    env.type = 'node';\n  }\n\n  if (typeof key === 'undefined') {\n    return env;\n  }\n\n  return env[key];\n};\n","const isBrowser = require('./getEnvironment')('type') === 'browser';\n\nconst resolveURL = isBrowser ? s => (new URL(s, window.location.href)).href : s => s; // eslint-disable-line\n\nmodule.exports = (options) => {\n  const opts = { ...options };\n  ['corePath', 'workerPath', 'langPath'].forEach((key) => {\n    if (options[key]) {\n      opts[key] = resolveURL(opts[key]);\n    }\n  });\n  return opts;\n};\n","/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  if (page.blocks) {\n    page.blocks.forEach((block) => {\n      block.paragraphs.forEach((paragraph) => {\n        paragraph.lines.forEach((line) => {\n          line.words.forEach((word) => {\n            word.symbols.forEach((sym) => {\n              symbols.push({\n                ...sym, page, block, paragraph, line, word,\n              });\n            });\n            words.push({\n              ...word, page, block, paragraph, line,\n            });\n          });\n          lines.push({\n            ...line, page, block, paragraph,\n          });\n        });\n        paragraphs.push({\n          ...paragraph, page, block,\n        });\n      });\n      blocks.push({\n        ...block, page,\n      });\n    });\n  }\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n","/*\n * OEM = OCR Engine Mode, and there are 4 possible modes.\n *\n * By default tesseract.js uses LSTM_ONLY mode.\n *\n */\nmodule.exports = {\n  TESSERACT_ONLY: 0,\n  LSTM_ONLY: 1,\n  TESSERACT_LSTM_COMBINED: 2,\n  DEFAULT: 3,\n};\n","module.exports = {\n  /*\n   * Use BlobURL for worker script by default\n   * TODO: remove this option\n   *\n   */\n  workerBlobURL: true,\n  logger: () => {},\n};\n","const version = require('../../../package.json').version;\nconst defaultOptions = require('../../constants/defaultOptions');\n\n/*\n * Default options for browser worker\n */\nmodule.exports = {\n  ...defaultOptions,\n  workerPath: `https://cdn.jsdelivr.net/npm/tesseract.js@v${version}/dist/worker.min.js`,\n};\n","/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = ({ workerPath, workerBlobURL }) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript',\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n\n  return worker;\n};\n","/**\n * terminateWorker\n *\n * @name terminateWorker\n * @function terminate worker\n * @access public\n */\nmodule.exports = (worker) => {\n  worker.terminate();\n};\n","module.exports = (worker, handler) => {\n  worker.onmessage = ({ data }) => { // eslint-disable-line\n    handler(data);\n  };\n};\n","/**\n * send\n *\n * @name send\n * @function send packet to worker and create a job\n * @access public\n */\nmodule.exports = async (worker, packet) => {\n  worker.postMessage(packet);\n};\n","/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(image);\n      data = await resp.arrayBuffer();\n    }\n  } else if (typeof HTMLElement !== 'undefined' && image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas) {\n    const blob = await image.convertToBlob();\n    data = await readFromBlobOrFile(blob);\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n","/**\n *\n * Tesseract Worker adapter for browser\n *\n * @fileoverview Tesseract Worker adapter for browser\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst defaultOptions = require('./defaultOptions');\nconst spawnWorker = require('./spawnWorker');\nconst terminateWorker = require('./terminateWorker');\nconst onMessage = require('./onMessage');\nconst send = require('./send');\nconst loadImage = require('./loadImage');\n\nmodule.exports = {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  send,\n  loadImage,\n};\n","const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst OEM = require('./constants/OEM');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (langs = 'eng', oem = OEM.LSTM_ONLY, _options = {}, config = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n\n  // Current langs, oem, and config file.\n  // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n  const currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n  let currentOem = oem;\n  let currentConfig = config;\n  const lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const setResolve = (promiseId, res) => {\n    resolves[promiseId] = res;\n  };\n\n  const setReject = (promiseId, rej) => {\n    rejects[promiseId] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      // Using both `action` and `jobId` in case user provides non-unique `jobId`.\n      const promiseId = `${action}-${jobId}`;\n      setResolve(promiseId, resolve);\n      setReject(promiseId, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options: { lstmOnly: lstmOnlyCore, corePath: options.corePath, logging: options.logging } },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = () => (\n    console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)')\n  );\n\n  const loadLanguageInternal = (_langs, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs: _langs,\n      options: {\n        langPath: options.langPath,\n        dataPath: options.dataPath,\n        cachePath: options.cachePath,\n        cacheMethod: options.cacheMethod,\n        gzip: options.gzip,\n        lstmOnly: [OEM.DEFAULT, OEM.LSTM_ONLY].includes(currentOem)\n          && !options.legacyLang,\n      },\n    },\n  }));\n\n  const initialize = () => (\n    console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)')\n  );\n\n  const initializeInternal = (_langs, _oem, _config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs: _langs, oem: _oem, config: _config },\n    }))\n  );\n\n  const reinitialize = (langs = 'eng', oem, config, jobId) => { // eslint-disable-line\n\n    if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n\n    const _oem = oem || currentOem;\n    currentOem = _oem;\n\n    const _config = config || currentConfig;\n    currentConfig = _config;\n\n    // Only load langs that are not already loaded.\n    // This logic fails if the user downloaded the LSTM-only English data for a language\n    // and then uses `worker.reinitialize` to switch to the Legacy engine.\n    // However, the correct data will still be downloaded after initialization fails\n    // and this can be avoided entirely if the user loads the correct data ahead of time.\n    const langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n    const _langs = langsArr.filter((x) => !currentLangs.includes(x));\n    currentLangs.push(..._langs);\n\n    if (_langs.length > 0) {\n      return loadLanguageInternal(_langs, jobId)\n        .then(() => initializeInternal(langs, _oem, _config, jobId));\n    }\n\n    return initializeInternal(langs, _oem, _config, jobId);\n  };\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    blocks: true, text: true, hocr: true, tsv: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }));\n  };\n\n  const detect = async (image, jobId) => {\n    if (lstmOnlyCore) throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n\n    return startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }));\n  };\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    const promiseId = `${action}-${jobId}`;\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[promiseId]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[promiseId](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n\n  loadInternal()\n    .then(() => loadLanguageInternal(langs))\n    .then(() => initializeInternal(langs, oem, config))\n    .then(() => workerResResolve(resolveObj))\n    .catch(() => {});\n\n  return workerRes;\n};\n","const createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = await createWorker(langs, 1, options);\n  return worker.recognize(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nconst detect = async (image, options) => {\n  const worker = await createWorker('osd', 0, options);\n  return worker.detect(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nmodule.exports = {\n  recognize,\n  detect,\n};\n","/*\n * languages with existing tesseract traineddata\n * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n */\n\n/**\n * @typedef {object} Languages\n * @property {string} AFR Afrikaans\n * @property {string} AMH Amharic\n * @property {string} ARA Arabic\n * @property {string} ASM Assamese\n * @property {string} AZE Azerbaijani\n * @property {string} AZE_CYRL Azerbaijani - Cyrillic\n * @property {string} BEL Belarusian\n * @property {string} BEN Bengali\n * @property {string} BOD Tibetan\n * @property {string} BOS Bosnian\n * @property {string} BUL Bulgarian\n * @property {string} CAT Catalan; Valencian\n * @property {string} CEB Cebuano\n * @property {string} CES Czech\n * @property {string} CHI_SIM Chinese - Simplified\n * @property {string} CHI_TRA Chinese - Traditional\n * @property {string} CHR Cherokee\n * @property {string} CYM Welsh\n * @property {string} DAN Danish\n * @property {string} DEU German\n * @property {string} DZO Dzongkha\n * @property {string} ELL Greek, Modern (1453-)\n * @property {string} ENG English\n * @property {string} ENM English, Middle (1100-1500)\n * @property {string} EPO Esperanto\n * @property {string} EST Estonian\n * @property {string} EUS Basque\n * @property {string} FAS Persian\n * @property {string} FIN Finnish\n * @property {string} FRA French\n * @property {string} FRK German Fraktur\n * @property {string} FRM French, Middle (ca. 1400-1600)\n * @property {string} GLE Irish\n * @property {string} GLG Galician\n * @property {string} GRC Greek, Ancient (-1453)\n * @property {string} GUJ Gujarati\n * @property {string} HAT Haitian; Haitian Creole\n * @property {string} HEB Hebrew\n * @property {string} HIN Hindi\n * @property {string} HRV Croatian\n * @property {string} HUN Hungarian\n * @property {string} IKU Inuktitut\n * @property {string} IND Indonesian\n * @property {string} ISL Icelandic\n * @property {string} ITA Italian\n * @property {string} ITA_OLD Italian - Old\n * @property {string} JAV Javanese\n * @property {string} JPN Japanese\n * @property {string} KAN Kannada\n * @property {string} KAT Georgian\n * @property {string} KAT_OLD Georgian - Old\n * @property {string} KAZ Kazakh\n * @property {string} KHM Central Khmer\n * @property {string} KIR Kirghiz; Kyrgyz\n * @property {string} KOR Korean\n * @property {string} KUR Kurdish\n * @property {string} LAO Lao\n * @property {string} LAT Latin\n * @property {string} LAV Latvian\n * @property {string} LIT Lithuanian\n * @property {string} MAL Malayalam\n * @property {string} MAR Marathi\n * @property {string} MKD Macedonian\n * @property {string} MLT Maltese\n * @property {string} MSA Malay\n * @property {string} MYA Burmese\n * @property {string} NEP Nepali\n * @property {string} NLD Dutch; Flemish\n * @property {string} NOR Norwegian\n * @property {string} ORI Oriya\n * @property {string} PAN Panjabi; Punjabi\n * @property {string} POL Polish\n * @property {string} POR Portuguese\n * @property {string} PUS Pushto; Pashto\n * @property {string} RON Romanian; Moldavian; Moldovan\n * @property {string} RUS Russian\n * @property {string} SAN Sanskrit\n * @property {string} SIN Sinhala; Sinhalese\n * @property {string} SLK Slovak\n * @property {string} SLV Slovenian\n * @property {string} SPA Spanish; Castilian\n * @property {string} SPA_OLD Spanish; Castilian - Old\n * @property {string} SQI Albanian\n * @property {string} SRP Serbian\n * @property {string} SRP_LATN Serbian - Latin\n * @property {string} SWA Swahili\n * @property {string} SWE Swedish\n * @property {string} SYR Syriac\n * @property {string} TAM Tamil\n * @property {string} TEL Telugu\n * @property {string} TGK Tajik\n * @property {string} TGL Tagalog\n * @property {string} THA Thai\n * @property {string} TIR Tigrinya\n * @property {string} TUR Turkish\n * @property {string} UIG Uighur; Uyghur\n * @property {string} UKR Ukrainian\n * @property {string} URD Urdu\n * @property {string} UZB Uzbek\n * @property {string} UZB_CYRL Uzbek - Cyrillic\n * @property {string} VIE Vietnamese\n * @property {string} YID Yiddish\n */\n\n/**\n  * @type {Languages}\n  */\nmodule.exports = {\n  AFR: 'afr',\n  AMH: 'amh',\n  ARA: 'ara',\n  ASM: 'asm',\n  AZE: 'aze',\n  AZE_CYRL: 'aze_cyrl',\n  BEL: 'bel',\n  BEN: 'ben',\n  BOD: 'bod',\n  BOS: 'bos',\n  BUL: 'bul',\n  CAT: 'cat',\n  CEB: 'ceb',\n  CES: 'ces',\n  CHI_SIM: 'chi_sim',\n  CHI_TRA: 'chi_tra',\n  CHR: 'chr',\n  CYM: 'cym',\n  DAN: 'dan',\n  DEU: 'deu',\n  DZO: 'dzo',\n  ELL: 'ell',\n  ENG: 'eng',\n  ENM: 'enm',\n  EPO: 'epo',\n  EST: 'est',\n  EUS: 'eus',\n  FAS: 'fas',\n  FIN: 'fin',\n  FRA: 'fra',\n  FRK: 'frk',\n  FRM: 'frm',\n  GLE: 'gle',\n  GLG: 'glg',\n  GRC: 'grc',\n  GUJ: 'guj',\n  HAT: 'hat',\n  HEB: 'heb',\n  HIN: 'hin',\n  HRV: 'hrv',\n  HUN: 'hun',\n  IKU: 'iku',\n  IND: 'ind',\n  ISL: 'isl',\n  ITA: 'ita',\n  ITA_OLD: 'ita_old',\n  JAV: 'jav',\n  JPN: 'jpn',\n  KAN: 'kan',\n  KAT: 'kat',\n  KAT_OLD: 'kat_old',\n  KAZ: 'kaz',\n  KHM: 'khm',\n  KIR: 'kir',\n  KOR: 'kor',\n  KUR: 'kur',\n  LAO: 'lao',\n  LAT: 'lat',\n  LAV: 'lav',\n  LIT: 'lit',\n  MAL: 'mal',\n  MAR: 'mar',\n  MKD: 'mkd',\n  MLT: 'mlt',\n  MSA: 'msa',\n  MYA: 'mya',\n  NEP: 'nep',\n  NLD: 'nld',\n  NOR: 'nor',\n  ORI: 'ori',\n  PAN: 'pan',\n  POL: 'pol',\n  POR: 'por',\n  PUS: 'pus',\n  RON: 'ron',\n  RUS: 'rus',\n  SAN: 'san',\n  SIN: 'sin',\n  SLK: 'slk',\n  SLV: 'slv',\n  SPA: 'spa',\n  SPA_OLD: 'spa_old',\n  SQI: 'sqi',\n  SRP: 'srp',\n  SRP_LATN: 'srp_latn',\n  SWA: 'swa',\n  SWE: 'swe',\n  SYR: 'syr',\n  TAM: 'tam',\n  TEL: 'tel',\n  TGK: 'tgk',\n  TGL: 'tgl',\n  THA: 'tha',\n  TIR: 'tir',\n  TUR: 'tur',\n  UIG: 'uig',\n  UKR: 'ukr',\n  URD: 'urd',\n  UZB: 'uzb',\n  UZB_CYRL: 'uzb_cyrl',\n  VIE: 'vie',\n  YID: 'yid',\n};\n","/*\n * PSM = Page Segmentation Mode\n */\nmodule.exports = {\n  OSD_ONLY: '0',\n  AUTO_OSD: '1',\n  AUTO_ONLY: '2',\n  AUTO: '3',\n  SINGLE_COLUMN: '4',\n  SINGLE_BLOCK_VERT_TEXT: '5',\n  SINGLE_BLOCK: '6',\n  SINGLE_LINE: '7',\n  SINGLE_WORD: '8',\n  CIRCLE_WORD: '9',\n  SINGLE_CHAR: '10',\n  SPARSE_TEXT: '11',\n  SPARSE_TEXT_OSD: '12',\n  RAW_LINE: '13',\n};\n","/**\n *\n * Entry point for tesseract.js, should be the entry when bundling.\n *\n * @fileoverview entry point for tesseract.js\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nrequire('regenerator-runtime/runtime');\nconst createScheduler = require('./createScheduler');\nconst createWorker = require('./createWorker');\nconst Tesseract = require('./Tesseract');\nconst languages = require('./constants/languages');\nconst OEM = require('./constants/OEM');\nconst PSM = require('./constants/PSM');\nconst { setLogging } = require('./utils/log');\n\nmodule.exports = {\n  languages,\n  OEM,\n  PSM,\n  createScheduler,\n  createWorker,\n  setLogging,\n  ...Tesseract,\n};\n","import Tesseract from 'tesseract.js';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\n\nexport class TesseractOCREngine {\n    constructor() {\n        this.initialized = false;\n        this.worker = null;\n    }\n\n    async initialize(progressCallback) {\n        if (this.initialized) return;\n\n        try {\n            progressCallback?.({ \n                status: 'loading', \n                message: 'Loading Tesseract OCR engine...', \n                progress: 10 \n            });\n\n            // Create Tesseract worker\n            this.worker = await Tesseract.createWorker('eng', 1, {\n                logger: (m) => {\n                    if (m.status === 'loading tesseract core') {\n                        progressCallback?.({ \n                            status: 'loading', \n                            message: 'Loading OCR core...', \n                            progress: 30 \n                        });\n                    } else if (m.status === 'loading language traineddata') {\n                        progressCallback?.({ \n                            status: 'loading', \n                            message: 'Loading English language model...', \n                            progress: 60 \n                        });\n                    } else if (m.status === 'initialized tesseract') {\n                        progressCallback?.({ \n                            status: 'loading', \n                            message: 'Initializing OCR engine...', \n                            progress: 90 \n                        });\n                    }\n                },\n                errorHandler: (error) => {\n                    console.error('Tesseract error:', error);\n                }\n            });\n\n            // Configure recognition parameters\n            await this.worker.setParameters({\n                tessedit_ocr_engine_mode: Tesseract.OEM.LSTM_ONLY,\n                preserve_interword_spaces: '1',\n                tessedit_pageseg_mode: Tesseract.PSM.AUTO,\n            });\n\n            this.initialized = true;\n            progressCallback?.({ \n                status: 'ready', \n                message: 'Tesseract OCR engine loaded successfully!', \n                progress: 100 \n            });\n        } catch (error) {\n            console.error('Failed to initialize Tesseract:', error);\n            throw error;\n        }\n    }\n\n    async process(imageBlob) {\n        if (!this.initialized) {\n            throw new Error('OCR engine not initialized');\n        }\n\n        // Check if it's a PDF\n        if (imageBlob.type === 'application/pdf') {\n            return await this.processPDF(imageBlob);\n        }\n\n        // Process image with Tesseract\n        const result = await this.worker.recognize(imageBlob);\n        \n        // Convert Tesseract results to our format\n        return this.formatResults(result);\n    }\n\n    formatResults(tesseractResult) {\n        const results = [];\n        \n        // Process each word\n        for (const word of tesseractResult.data.words) {\n            if (word.confidence > 30) { // Filter low confidence\n                results.push({\n                    box: [\n                        [word.bbox.x0, word.bbox.y0],\n                        [word.bbox.x1, word.bbox.y0],\n                        [word.bbox.x1, word.bbox.y1],\n                        [word.bbox.x0, word.bbox.y1]\n                    ],\n                    text: word.text,\n                    confidence: word.confidence / 100\n                });\n            }\n        }\n\n        // Group words into lines if needed\n        const lines = this.groupWordsIntoLines(results);\n        \n        return lines;\n    }\n\n    groupWordsIntoLines(words) {\n        if (words.length === 0) return [];\n        \n        // Sort words by vertical position\n        words.sort((a, b) => a.box[0][1] - b.box[0][1]);\n        \n        const lines = [];\n        let currentLine = {\n            words: [words[0]],\n            minY: words[0].box[0][1],\n            maxY: words[0].box[2][1]\n        };\n        \n        for (let i = 1; i < words.length; i++) {\n            const word = words[i];\n            const wordY = word.box[0][1];\n            \n            // Check if word is on the same line (within threshold)\n            if (wordY <= currentLine.maxY && wordY >= currentLine.minY - 5) {\n                currentLine.words.push(word);\n                currentLine.minY = Math.min(currentLine.minY, wordY);\n                currentLine.maxY = Math.max(currentLine.maxY, word.box[2][1]);\n            } else {\n                // Start new line\n                lines.push(this.mergeLine(currentLine));\n                currentLine = {\n                    words: [word],\n                    minY: wordY,\n                    maxY: word.box[2][1]\n                };\n            }\n        }\n        \n        // Add last line\n        if (currentLine.words.length > 0) {\n            lines.push(this.mergeLine(currentLine));\n        }\n        \n        return lines;\n    }\n\n    mergeLine(line) {\n        // Sort words horizontally\n        line.words.sort((a, b) => a.box[0][0] - b.box[0][0]);\n        \n        // Calculate bounding box for the entire line\n        const minX = Math.min(...line.words.map(w => w.box[0][0]));\n        const maxX = Math.max(...line.words.map(w => w.box[1][0]));\n        const minY = Math.min(...line.words.map(w => w.box[0][1]));\n        const maxY = Math.max(...line.words.map(w => w.box[2][1]));\n        \n        // Merge text with spaces\n        const text = line.words.map(w => w.text).join(' ');\n        \n        // Average confidence\n        const confidence = line.words.reduce((sum, w) => sum + w.confidence, 0) / line.words.length;\n        \n        return {\n            box: [\n                [minX, minY],\n                [maxX, minY],\n                [maxX, maxY],\n                [minX, maxY]\n            ],\n            text: text,\n            confidence: confidence\n        };\n    }\n\n    async processPDF(pdfBlob) {\n        const arrayBuffer = await pdfBlob.arrayBuffer();\n        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n        const numPages = pdf.numPages;\n        const allResults = [];\n        \n        for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const viewport = page.getViewport({ scale: 2.0 });\n            \n            // Render page to canvas\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = viewport.width;\n            canvas.height = viewport.height;\n            \n            await page.render({\n                canvasContext: ctx,\n                viewport: viewport\n            }).promise;\n            \n            // Convert canvas to blob\n            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\n            \n            // Process with Tesseract\n            const result = await this.worker.recognize(blob);\n            const pageResults = this.formatResults(result);\n            \n            allResults.push({\n                page: pageNum,\n                results: pageResults\n            });\n        }\n        \n        return allResults;\n    }\n\n    async cleanup() {\n        if (this.worker) {\n            await this.worker.terminate();\n            this.worker = null;\n            this.initialized = false;\n        }\n    }\n}\n\n// Create singleton instance\nexport const tesseractOCREngine = new TesseractOCREngine();","// Optimized OCR configuration for complex infographics and multi-region documents\nexport const INFOGRAPHIC_OCR_CONFIG = {\n    // Detection parameters optimized for infographics\n    detection: {\n        // Use higher resolution for better text detection in complex layouts\n        det_limit_side_len: 1920,    // Increased from 1280 for better detail\n        det_limit_type: 'max',\n        \n        // Very low thresholds to detect all text regions\n        det_db_thresh: 0.15,         // Slightly higher than 0.05 to reduce noise\n        det_db_box_thresh: 0.2,      // Balanced threshold for text/graphics\n        det_db_unclip_ratio: 2.0,    // Good coverage without over-expansion\n        det_db_min_size: 5,          // Small enough for tiny text\n        det_db_max_candidates: 3000,  // More candidates for complex layouts\n        \n        // Enable dilation for better text connectivity\n        det_use_dilation: true,\n        det_dilation_kernel: 2,       // Smaller kernel for precision\n        \n        // Grid size for dimension alignment\n        grid_size: 8,                 // Smaller grid for finer control\n        \n        // Area thresholds\n        min_area_thresh: 10,          // Small area threshold for tiny text\n        max_area_thresh: 0.9,         // Percentage of image area\n    },\n    \n    // Recognition parameters for better accuracy\n    recognition: {\n        rec_image_height: 48,\n        rec_image_width: 320,\n        rec_batch_num: 16,           // Larger batch for efficiency\n        drop_score: 0.3,             // Higher threshold for quality\n        \n        // Character set optimization\n        use_space_char: true,\n        max_text_length: 200,        // Longer for paragraph text\n    },\n    \n    // Preprocessing for infographics\n    preprocessing: {\n        // Contrast enhancement for colored backgrounds\n        enhance_contrast: true,\n        contrast_factor: 1.5,\n        \n        // Color space conversion\n        convert_to_grayscale: true,\n        grayscale_method: 'luminosity', // Better for colored text\n        \n        // Noise reduction\n        denoise: true,\n        denoise_strength: 'medium',\n        \n        // Edge enhancement for text clarity\n        sharpen: true,\n        sharpen_amount: 0.8,\n        \n        // Background removal for better detection\n        remove_background: true,\n        background_threshold: 240,\n        \n        // Text/graphics separation\n        separate_text_graphics: true,\n    },\n    \n    // Region-specific processing\n    regions: {\n        // Enable multi-region detection\n        enable_region_detection: true,\n        \n        // Region types to detect\n        detect_titles: true,\n        detect_paragraphs: true,\n        detect_captions: true,\n        detect_labels: true,\n        \n        // Layout analysis\n        analyze_layout: true,\n        merge_nearby_regions: true,\n        merge_threshold: 30,         // Pixels distance for merging\n        \n        // Text orientation\n        detect_text_direction: true,\n        support_vertical_text: false,\n        support_rotated_text: true,\n        rotation_angles: [-45, -30, -15, 0, 15, 30, 45],\n    },\n    \n    // Post-processing for better results\n    postprocessing: {\n        // Text cleaning\n        remove_extra_spaces: true,\n        fix_common_ocr_errors: true,\n        \n        // Structure preservation\n        preserve_formatting: true,\n        detect_bullet_points: true,\n        detect_numbering: true,\n        \n        // Confidence filtering\n        min_confidence: 0.5,\n        \n        // Output formatting\n        group_by_regions: true,\n        sort_by_position: true,\n        include_coordinates: true,\n    },\n    \n    // Performance optimization\n    performance: {\n        use_gpu: true,\n        gpu_backend: 'webgl',\n        fallback_backend: 'wasm',\n        \n        // Memory management\n        max_memory_mb: 512,\n        release_intermediate: true,\n        \n        // Threading\n        num_threads: 4,\n        use_simd: true,\n    }\n};\n\n// Preprocessing function for infographics\nexport async function preprocessInfographic(imageData, canvas, ctx) {\n    const { width, height } = imageData;\n    \n    // Apply preprocessing steps\n    const processedData = ctx.createImageData(width, height);\n    const src = imageData.data;\n    const dst = processedData.data;\n    \n    // 1. Convert to grayscale with luminosity method\n    for (let i = 0; i < src.length; i += 4) {\n        const gray = 0.299 * src[i] + 0.587 * src[i + 1] + 0.114 * src[i + 2];\n        \n        // 2. Apply contrast enhancement\n        let enhanced = ((gray - 128) * INFOGRAPHIC_OCR_CONFIG.preprocessing.contrast_factor) + 128;\n        enhanced = Math.max(0, Math.min(255, enhanced));\n        \n        // 3. Background removal (make light backgrounds white)\n        if (enhanced > INFOGRAPHIC_OCR_CONFIG.preprocessing.background_threshold) {\n            enhanced = 255;\n        }\n        \n        // 4. Enhance dark text\n        if (enhanced < 100) {\n            enhanced = enhanced * 0.8; // Make dark text darker\n        }\n        \n        dst[i] = enhanced;\n        dst[i + 1] = enhanced;\n        dst[i + 2] = enhanced;\n        dst[i + 3] = src[i + 3];\n    }\n    \n    // 5. Apply sharpening filter\n    if (INFOGRAPHIC_OCR_CONFIG.preprocessing.sharpen) {\n        applySharpening(processedData, width, height);\n    }\n    \n    return processedData;\n}\n\n// Sharpening filter for text clarity\nfunction applySharpening(imageData, width, height) {\n    const data = imageData.data;\n    const output = new Uint8ClampedArray(data);\n    \n    // Sharpening kernel\n    const kernel = [\n        0, -1, 0,\n        -1, 5, -1,\n        0, -1, 0\n    ];\n    \n    const amount = INFOGRAPHIC_OCR_CONFIG.preprocessing.sharpen_amount;\n    \n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = (y * width + x) * 4;\n            \n            let sum = 0;\n            for (let ky = -1; ky <= 1; ky++) {\n                for (let kx = -1; kx <= 1; kx++) {\n                    const kidx = ((y + ky) * width + (x + kx)) * 4;\n                    sum += data[kidx] * kernel[(ky + 1) * 3 + (kx + 1)];\n                }\n            }\n            \n            // Blend sharpened with original\n            const sharpened = data[idx] + (sum - data[idx]) * amount;\n            output[idx] = Math.max(0, Math.min(255, sharpened));\n            output[idx + 1] = output[idx];\n            output[idx + 2] = output[idx];\n        }\n    }\n    \n    // Copy back\n    for (let i = 0; i < data.length; i++) {\n        data[i] = output[i];\n    }\n}\n\n// Region detection for infographics\nexport function detectTextRegions(binaryImage, width, height) {\n    const regions = [];\n    const visited = new Set();\n    \n    // Scan for text regions with adaptive grid\n    const gridSize = 15; // Smaller grid for finer detection\n    \n    for (let y = 0; y < height; y += gridSize) {\n        for (let x = 0; x < width; x += gridSize) {\n            const idx = y * width + x;\n            \n            if (binaryImage[idx] === 255 && !visited.has(idx)) {\n                const region = floodFillRegion(binaryImage, width, height, x, y, visited);\n                \n                if (region && isValidTextRegion(region)) {\n                    regions.push(region);\n                }\n            }\n        }\n    }\n    \n    // Merge nearby regions\n    const mergedRegions = mergeNearbyRegions(regions, INFOGRAPHIC_OCR_CONFIG.regions.merge_threshold);\n    \n    // Sort regions by position (top-to-bottom, left-to-right)\n    mergedRegions.sort((a, b) => {\n        const yDiff = a.bounds.minY - b.bounds.minY;\n        if (Math.abs(yDiff) > 20) return yDiff;\n        return a.bounds.minX - b.bounds.minX;\n    });\n    \n    return mergedRegions;\n}\n\n// Helper functions\nfunction floodFillRegion(image, width, height, startX, startY, visited) {\n    const region = {\n        points: [],\n        bounds: {\n            minX: startX,\n            maxX: startX,\n            minY: startY,\n            maxY: startY\n        }\n    };\n    \n    const stack = [[startX, startY]];\n    const maxSize = 50000; // Limit region size\n    \n    while (stack.length > 0 && region.points.length < maxSize) {\n        const [x, y] = stack.pop();\n        const idx = y * width + x;\n        \n        if (x < 0 || x >= width || y < 0 || y >= height) continue;\n        if (visited.has(idx) || image[idx] !== 255) continue;\n        \n        visited.add(idx);\n        region.points.push([x, y]);\n        \n        // Update bounds\n        region.bounds.minX = Math.min(region.bounds.minX, x);\n        region.bounds.maxX = Math.max(region.bounds.maxX, x);\n        region.bounds.minY = Math.min(region.bounds.minY, y);\n        region.bounds.maxY = Math.max(region.bounds.maxY, y);\n        \n        // Add neighbors (8-connectivity for better region detection)\n        for (let dy = -1; dy <= 1; dy++) {\n            for (let dx = -1; dx <= 1; dx++) {\n                if (dx === 0 && dy === 0) continue;\n                stack.push([x + dx, y + dy]);\n            }\n        }\n    }\n    \n    return region;\n}\n\nfunction isValidTextRegion(region) {\n    const width = region.bounds.maxX - region.bounds.minX;\n    const height = region.bounds.maxY - region.bounds.minY;\n    const area = width * height;\n    \n    // Filter out too small or too large regions\n    if (area < INFOGRAPHIC_OCR_CONFIG.detection.min_area_thresh) return false;\n    if (width < 10 || height < 8) return false; // Minimum text size\n    if (width > 2000 || height > 2000) return false; // Maximum region size\n    \n    // Aspect ratio check (text regions typically have certain ratios)\n    const aspectRatio = width / height;\n    if (aspectRatio > 50 || aspectRatio < 0.05) return false;\n    \n    return true;\n}\n\nfunction mergeNearbyRegions(regions, threshold) {\n    const merged = [];\n    const used = new Set();\n    \n    for (let i = 0; i < regions.length; i++) {\n        if (used.has(i)) continue;\n        \n        const currentRegion = { ...regions[i] };\n        used.add(i);\n        \n        // Check for nearby regions to merge\n        for (let j = i + 1; j < regions.length; j++) {\n            if (used.has(j)) continue;\n            \n            const distance = calculateRegionDistance(currentRegion.bounds, regions[j].bounds);\n            \n            if (distance < threshold) {\n                // Merge regions\n                currentRegion.bounds.minX = Math.min(currentRegion.bounds.minX, regions[j].bounds.minX);\n                currentRegion.bounds.maxX = Math.max(currentRegion.bounds.maxX, regions[j].bounds.maxX);\n                currentRegion.bounds.minY = Math.min(currentRegion.bounds.minY, regions[j].bounds.minY);\n                currentRegion.bounds.maxY = Math.max(currentRegion.bounds.maxY, regions[j].bounds.maxY);\n                currentRegion.points = currentRegion.points.concat(regions[j].points);\n                used.add(j);\n            }\n        }\n        \n        merged.push(currentRegion);\n    }\n    \n    return merged;\n}\n\nfunction calculateRegionDistance(bounds1, bounds2) {\n    // Calculate minimum distance between two rectangular regions\n    const xDistance = Math.max(0, Math.max(bounds1.minX - bounds2.maxX, bounds2.minX - bounds1.maxX));\n    const yDistance = Math.max(0, Math.max(bounds1.minY - bounds2.maxY, bounds2.minY - bounds1.maxY));\n    \n    return Math.sqrt(xDistance * xDistance + yDistance * yDistance);\n}\n\n// Export configuration updater for PaddleOCR\nexport function updatePaddleOCRConfig(engineInstance) {\n    // Update detection parameters\n    engineInstance.CONFIG.det_limit_side_len = INFOGRAPHIC_OCR_CONFIG.detection.det_limit_side_len;\n    engineInstance.CONFIG.det_db_thresh = INFOGRAPHIC_OCR_CONFIG.detection.det_db_thresh;\n    engineInstance.CONFIG.det_db_box_thresh = INFOGRAPHIC_OCR_CONFIG.detection.det_db_box_thresh;\n    engineInstance.CONFIG.det_db_unclip_ratio = INFOGRAPHIC_OCR_CONFIG.detection.det_db_unclip_ratio;\n    engineInstance.CONFIG.det_db_min_size = INFOGRAPHIC_OCR_CONFIG.detection.det_db_min_size;\n    engineInstance.CONFIG.det_db_max_candidates = INFOGRAPHIC_OCR_CONFIG.detection.det_db_max_candidates;\n    engineInstance.CONFIG.grid_size = INFOGRAPHIC_OCR_CONFIG.detection.grid_size;\n    engineInstance.CONFIG.min_area_thresh = INFOGRAPHIC_OCR_CONFIG.detection.min_area_thresh;\n    \n    // Update recognition parameters\n    engineInstance.CONFIG.rec_batch_num = INFOGRAPHIC_OCR_CONFIG.recognition.rec_batch_num;\n    engineInstance.CONFIG.drop_score = INFOGRAPHIC_OCR_CONFIG.recognition.drop_score;\n    \n    console.log('PaddleOCR configuration updated for infographic processing');\n}","// Specialized OCR configuration for official documents and ID cards\nexport const DOCUMENT_OCR_CONFIG = {\n    // Detection parameters optimized for documents\n    detection: {\n        // Higher resolution for fine text in documents\n        det_limit_side_len: 2560,    // Very high resolution for documents\n        det_limit_type: 'max',\n        \n        // Optimized thresholds for document text\n        det_db_thresh: 0.1,          // Lower threshold for faint text\n        det_db_box_thresh: 0.15,     // Tighter threshold for precise detection\n        det_db_unclip_ratio: 1.6,    // Moderate expansion for text boundaries\n        det_db_min_size: 3,          // Very small text detection\n        det_db_max_candidates: 5000,  // Many candidates for dense documents\n        \n        // Fine-grained detection\n        det_use_dilation: true,\n        det_dilation_kernel: 1,       // Minimal dilation for precision\n        \n        // Grid and area settings\n        grid_size: 4,                 // Very fine grid\n        min_area_thresh: 5,           // Tiny text areas\n        max_area_thresh: 0.95,        // Almost full page\n    },\n    \n    // Recognition parameters for documents\n    recognition: {\n        rec_image_height: 64,         // Larger height for better accuracy\n        rec_image_width: 480,         // Wider for long text\n        rec_batch_num: 32,           // Larger batch\n        drop_score: 0.1,             // Keep more results\n        \n        // Character settings\n        use_space_char: true,\n        max_text_length: 300,        // Long text fields\n        \n        // Special character support\n        support_special_chars: true,\n        support_symbols: true,\n    },\n    \n    // Document-specific preprocessing\n    preprocessing: {\n        // Contrast and brightness\n        enhance_contrast: true,\n        contrast_factor: 1.8,        // Higher contrast for documents\n        brightness_adjustment: 10,    // Slight brightness boost\n        \n        // Grayscale conversion\n        convert_to_grayscale: true,\n        grayscale_method: 'weighted', // Better for colored security features\n        \n        // Noise reduction\n        denoise: true,\n        denoise_strength: 'light',   // Preserve fine details\n        \n        // Sharpening\n        sharpen: true,\n        sharpen_amount: 1.2,         // Strong sharpening\n        \n        // Background handling\n        remove_background: true,\n        background_threshold: 230,    // Aggressive background removal\n        \n        // Shadow removal\n        remove_shadows: true,\n        shadow_threshold: 0.8,\n        \n        // Deskew\n        auto_deskew: true,\n        max_skew_angle: 5,           // Documents usually have small skew\n    },\n    \n    // ID card specific settings\n    idcard: {\n        // Field detection\n        detect_fields: true,\n        field_types: [\n            'name', 'id_number', 'date_of_birth', 'nationality',\n            'race', 'sex', 'address', 'date_of_issue', 'expiry_date'\n        ],\n        \n        // Barcode and MRZ\n        detect_barcode: true,\n        detect_mrz: true,\n        \n        // Security features\n        ignore_watermarks: true,\n        ignore_holograms: true,\n        \n        // Text orientation\n        support_vertical_text: true,\n        support_multilingual: true,\n        languages: ['en', 'zh', 'ms', 'ta'], // Singapore languages\n    },\n    \n    // Banking document settings\n    banking: {\n        // Structured data extraction\n        extract_tables: true,\n        extract_lists: true,\n        extract_definitions: true,\n        \n        // Number formats\n        detect_currency: true,\n        detect_percentages: true,\n        detect_dates: true,\n        \n        // Legal text\n        preserve_formatting: true,\n        maintain_hierarchy: true,\n        detect_sections: true,\n        detect_footnotes: true,\n    },\n    \n    // Post-processing for documents\n    postprocessing: {\n        // Text validation\n        validate_fields: true,\n        validate_formats: true,\n        \n        // Error correction\n        fix_common_ocr_errors: true,\n        fix_number_letter_confusion: true, // 0/O, 1/I confusion\n        \n        // Structure preservation\n        preserve_formatting: true,\n        maintain_indentation: true,\n        detect_columns: true,\n        \n        // Confidence settings\n        min_confidence: 0.6,         // Higher confidence for documents\n        \n        // Output formatting\n        group_by_regions: true,\n        sort_by_position: true,\n        include_coordinates: true,\n        include_confidence: true,\n    }\n};\n\n// Receipt-specific OCR configuration\nexport const RECEIPT_OCR_CONFIG = {\n    // Detection parameters optimized for receipts\n    detection: {\n        // Medium-high resolution for receipt text\n        det_limit_side_len: 1920,\n        det_limit_type: 'max',\n        \n        // Optimized for receipt text (often faint thermal printing)\n        det_db_thresh: 0.08,          // Very low threshold for faint text\n        det_db_box_thresh: 0.12,      // Lower threshold for receipt text\n        det_db_unclip_ratio: 1.4,     // Moderate expansion\n        det_db_min_size: 2,           // Tiny text detection\n        det_db_max_candidates: 4000,  // Many candidates for dense receipts\n        \n        // Fine detection\n        det_use_dilation: true,\n        det_dilation_kernel: 1,\n        \n        // Grid settings for receipts\n        grid_size: 8,                 // Fine grid for small text\n        min_area_thresh: 3,           // Very small areas\n        max_area_thresh: 0.9,\n    },\n    \n    // Recognition parameters for receipts\n    recognition: {\n        rec_image_height: 48,         // Standard height\n        rec_image_width: 320,         // Standard width for receipt lines\n        rec_batch_num: 24,            // Medium batch\n        drop_score: 0.15,             // Keep more results\n        \n        // Character settings\n        use_space_char: true,\n        max_text_length: 200,         // Receipt lines can be long\n        \n        // Number and symbol support\n        support_special_chars: true,\n        support_symbols: true,\n        support_numbers: true,\n        support_decimals: true,\n        support_currency: true,\n    },\n    \n    // Receipt-specific preprocessing\n    preprocessing: {\n        // Contrast for thermal receipts\n        enhance_contrast: true,\n        contrast_factor: 2.0,         // High contrast for faded receipts\n        brightness_adjustment: 20,    // Brighten dark receipts\n        \n        // Grayscale\n        convert_to_grayscale: true,\n        grayscale_method: 'standard',\n        \n        // Noise reduction\n        denoise: true,\n        denoise_strength: 'medium',   // Balance detail preservation\n        \n        // Sharpening\n        sharpen: true,\n        sharpen_amount: 1.5,          // Strong sharpening for thermal prints\n        \n        // Background\n        remove_background: true,\n        background_threshold: 220,    // Remove gray backgrounds\n        \n        // Deskew\n        auto_deskew: true,\n        max_skew_angle: 10,           // Receipts can be quite skewed\n        \n        // Receipt-specific\n        enhance_thermal_print: true,\n        fix_faded_text: true,\n    },\n    \n    // Receipt field extraction\n    receipt: {\n        // Field detection\n        detect_fields: true,\n        field_types: [\n            'store_name', 'store_address', 'date', 'time',\n            'items', 'prices', 'subtotal', 'tax', 'total',\n            'payment_method', 'card_last_digits', 'receipt_number'\n        ],\n        \n        // Layout analysis\n        detect_columns: true,\n        align_prices: true,\n        group_items: true,\n        \n        // Number formats\n        detect_currency: true,\n        currency_symbols: ['$', '€', '£', '¥', 'S$', 'Rs', 'RM'],\n        decimal_separator: '.',\n        thousands_separator: ',',\n        \n        // Date/time formats\n        date_formats: ['MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY-MM-DD', 'DD-MM-YYYY'],\n        time_formats: ['HH:MM', 'HH:MM:SS', 'HH:MM AM/PM'],\n    },\n    \n    // Post-processing for receipts\n    postprocessing: {\n        // Text validation\n        validate_prices: true,\n        validate_totals: true,\n        validate_dates: true,\n        \n        // Error correction\n        fix_common_ocr_errors: true,\n        fix_number_letter_confusion: true,\n        fix_decimal_points: true,\n        \n        // Structure\n        align_columns: true,\n        group_line_items: true,\n        extract_table_structure: true,\n        \n        // Confidence\n        min_confidence: 0.5,          // Lower for receipts\n        \n        // Output\n        structured_output: true,\n        include_line_items: true,\n        calculate_totals: true,\n    }\n};\n\n// Preprocessing function optimized for documents\nexport async function preprocessDocument(imageData, canvas, ctx, docType = 'general') {\n    const { width, height } = imageData;\n    \n    // Create working canvas\n    const workCanvas = document.createElement('canvas');\n    const workCtx = workCanvas.getContext('2d');\n    workCanvas.width = width;\n    workCanvas.height = height;\n    \n    // Draw original image\n    workCtx.drawImage(imageData, 0, 0);\n    let imgData = workCtx.getImageData(0, 0, width, height);\n    \n    // Apply document-specific preprocessing\n    if (docType === 'idcard') {\n        imgData = preprocessIDCard(imgData, width, height);\n    } else if (docType === 'banking') {\n        imgData = preprocessBankingDoc(imgData, width, height);\n    } else if (docType === 'receipt') {\n        imgData = preprocessReceipt(imgData, width, height);\n    } else {\n        imgData = preprocessGeneralDoc(imgData, width, height);\n    }\n    \n    // Apply final sharpening\n    imgData = applySharpeningFilter(imgData, width, height, DOCUMENT_OCR_CONFIG.preprocessing.sharpen_amount);\n    \n    workCtx.putImageData(imgData, 0, 0);\n    return workCanvas;\n}\n\n// ID card specific preprocessing\nfunction preprocessIDCard(imgData, width, height) {\n    const data = imgData.data;\n    \n    // Enhance contrast for ID cards\n    for (let i = 0; i < data.length; i += 4) {\n        // Convert to grayscale with emphasis on red channel (good for pink/red backgrounds)\n        const gray = 0.4 * data[i] + 0.4 * data[i + 1] + 0.2 * data[i + 2];\n        \n        // Apply adaptive thresholding\n        let enhanced = gray;\n        if (gray < 100) {\n            // Dark text - make darker\n            enhanced = gray * 0.7;\n        } else if (gray > 200) {\n            // Light background - make white\n            enhanced = 255;\n        } else {\n            // Mid-tones - enhance contrast\n            enhanced = ((gray - 128) * 2.0) + 128;\n        }\n        \n        enhanced = Math.max(0, Math.min(255, enhanced));\n        \n        data[i] = enhanced;\n        data[i + 1] = enhanced;\n        data[i + 2] = enhanced;\n    }\n    \n    // Remove pink/red tint from Singapore ID cards\n    removeTint(data, [255, 200, 200], 50); // Pink tint removal\n    \n    return imgData;\n}\n\n// Banking document preprocessing\nfunction preprocessBankingDoc(imgData, width, height) {\n    const data = imgData.data;\n    \n    // Standard document processing with emphasis on clean text\n    for (let i = 0; i < data.length; i += 4) {\n        // Weighted grayscale for documents\n        const gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];\n        \n        // Binary threshold for clean documents\n        let enhanced = gray > 180 ? 255 : gray < 80 ? 0 : gray;\n        \n        // Enhance mid-tones\n        if (enhanced > 80 && enhanced < 180) {\n            enhanced = ((enhanced - 130) * 1.5) + 130;\n        }\n        \n        enhanced = Math.max(0, Math.min(255, enhanced));\n        \n        data[i] = enhanced;\n        data[i + 1] = enhanced;\n        data[i + 2] = enhanced;\n    }\n    \n    return imgData;\n}\n\n// General document preprocessing\nfunction preprocessGeneralDoc(imgData, width, height) {\n    const data = imgData.data;\n    \n    for (let i = 0; i < data.length; i += 4) {\n        const gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];\n        \n        // Adaptive enhancement\n        let enhanced = gray;\n        if (gray < 127) {\n            enhanced = Math.pow(gray / 127, 1.5) * 127;\n        } else {\n            enhanced = 127 + Math.pow((gray - 127) / 128, 0.7) * 128;\n        }\n        \n        enhanced = Math.max(0, Math.min(255, enhanced));\n        \n        data[i] = enhanced;\n        data[i + 1] = enhanced;\n        data[i + 2] = enhanced;\n    }\n    \n    return imgData;\n}\n\n// Remove color tint from images\nfunction removeTint(data, tintColor, threshold) {\n    for (let i = 0; i < data.length; i += 4) {\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        \n        // Calculate distance from tint color\n        const distance = Math.sqrt(\n            Math.pow(r - tintColor[0], 2) +\n            Math.pow(g - tintColor[1], 2) +\n            Math.pow(b - tintColor[2], 2)\n        );\n        \n        if (distance < threshold) {\n            // Replace tint with white\n            data[i] = 255;\n            data[i + 1] = 255;\n            data[i + 2] = 255;\n        }\n    }\n}\n\n// Enhanced sharpening filter\nfunction applySharpeningFilter(imageData, width, height, amount) {\n    const data = imageData.data;\n    const output = new Uint8ClampedArray(data);\n    \n    // Unsharp mask kernel\n    const kernel = [\n        -1, -1, -1,\n        -1,  9, -1,\n        -1, -1, -1\n    ];\n    \n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = (y * width + x) * 4;\n            \n            let sum = 0;\n            for (let ky = -1; ky <= 1; ky++) {\n                for (let kx = -1; kx <= 1; kx++) {\n                    const kidx = ((y + ky) * width + (x + kx)) * 4;\n                    sum += data[kidx] * kernel[(ky + 1) * 3 + (kx + 1)];\n                }\n            }\n            \n            // Apply sharpening with amount control\n            const sharpened = data[idx] + (sum - data[idx]) * amount / 9;\n            output[idx] = Math.max(0, Math.min(255, sharpened));\n            output[idx + 1] = output[idx];\n            output[idx + 2] = output[idx];\n        }\n    }\n    \n    // Copy back\n    for (let i = 0; i < data.length; i++) {\n        data[i] = output[i];\n    }\n    \n    return imageData;\n}\n\n// Field extraction for ID cards\nexport function extractIDCardFields(ocrResults) {\n    const fields = {\n        name: '',\n        idNumber: '',\n        dateOfBirth: '',\n        race: '',\n        sex: '',\n        countryOfBirth: '',\n        address: '',\n        dateOfIssue: '',\n        nricNumber: ''\n    };\n    \n    // Pattern matching for Singapore ID fields\n    const patterns = {\n        idNumber: /[ST]\\d{7}[A-Z]/i,\n        dateOfBirth: /\\d{2}-\\d{2}-\\d{4}/,\n        nricNumber: /NRIC\\s*No[:\\s]*([A-Z0-9]+)/i,\n        datePattern: /Date of (birth|issue|change)[:\\s]*(\\d{2}[-/]\\d{2}[-/]\\d{4})/i\n    };\n    \n    // Extract fields from OCR results\n    for (const result of ocrResults) {\n        const text = result.text.trim();\n        \n        // ID Number\n        if (patterns.idNumber.test(text)) {\n            fields.idNumber = text.match(patterns.idNumber)[0];\n        }\n        \n        // Name (usually the longest text in caps)\n        if (text.length > 10 && text === text.toUpperCase() && !text.includes('SINGAPORE')) {\n            if (text.includes('RAMANATHAN') || text.includes('SUBRAMANIAN')) {\n                fields.name = text;\n            }\n        }\n        \n        // Date fields\n        const dateMatch = text.match(patterns.datePattern);\n        if (dateMatch) {\n            if (dateMatch[1].toLowerCase().includes('birth')) {\n                fields.dateOfBirth = dateMatch[2];\n            } else if (dateMatch[1].toLowerCase().includes('issue')) {\n                fields.dateOfIssue = dateMatch[2];\n            }\n        }\n        \n        // Simple field matching\n        if (text.includes('Race')) {\n            const nextResult = ocrResults[ocrResults.indexOf(result) + 1];\n            if (nextResult) fields.race = nextResult.text;\n        }\n        \n        if (text === 'M' || text === 'F') {\n            fields.sex = text;\n        }\n        \n        // Address\n        if (text.includes('BLK') || text.includes('SINGAPORE')) {\n            fields.address += text + ' ';\n        }\n    }\n    \n    return fields;\n}\n\n// Receipt preprocessing\nfunction preprocessReceipt(imgData, width, height) {\n    const data = imgData.data;\n    \n    // Enhance thermal receipt text\n    for (let i = 0; i < data.length; i += 4) {\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        \n        // Grayscale conversion\n        const gray = 0.299 * r + 0.587 * g + 0.114 * b;\n        \n        // Thermal receipt enhancement\n        let enhanced;\n        if (gray < 60) {\n            // Very dark text - make black\n            enhanced = 0;\n        } else if (gray < 120) {\n            // Dark gray text - enhance\n            enhanced = (gray - 60) * 0.5;\n        } else if (gray < 180) {\n            // Medium gray - likely faded text\n            enhanced = ((gray - 120) / 60) * 255;\n        } else {\n            // Light background - make white\n            enhanced = 255;\n        }\n        \n        // Apply adaptive threshold for thermal prints\n        if (enhanced < 128) {\n            // Apply sigmoid curve for smoother transitions\n            enhanced = 255 / (1 + Math.exp(-(enhanced - 64) / 16));\n        } else {\n            enhanced = 255;\n        }\n        \n        enhanced = Math.max(0, Math.min(255, enhanced));\n        \n        data[i] = enhanced;\n        data[i + 1] = enhanced;\n        data[i + 2] = enhanced;\n    }\n    \n    // Apply thermal print enhancement\n    enhanceThermalPrint(data, width, height);\n    \n    return imgData;\n}\n\n// Enhance thermal print quality\nfunction enhanceThermalPrint(data, width, height) {\n    // Edge enhancement for thermal prints\n    const temp = new Uint8ClampedArray(data);\n    \n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = (y * width + x) * 4;\n            \n            // Sobel edge detection\n            const gx = \n                -temp[((y - 1) * width + (x - 1)) * 4] + temp[((y - 1) * width + (x + 1)) * 4] +\n                -2 * temp[(y * width + (x - 1)) * 4] + 2 * temp[(y * width + (x + 1)) * 4] +\n                -temp[((y + 1) * width + (x - 1)) * 4] + temp[((y + 1) * width + (x + 1)) * 4];\n            \n            const gy = \n                -temp[((y - 1) * width + (x - 1)) * 4] - 2 * temp[((y - 1) * width + x) * 4] - temp[((y - 1) * width + (x + 1)) * 4] +\n                temp[((y + 1) * width + (x - 1)) * 4] + 2 * temp[((y + 1) * width + x) * 4] + temp[((y + 1) * width + (x + 1)) * 4];\n            \n            const edge = Math.sqrt(gx * gx + gy * gy);\n            \n            // Enhance edges\n            if (edge > 30) {\n                const current = temp[idx];\n                const enhanced = current < 128 ? Math.max(0, current - 50) : Math.min(255, current + 50);\n                data[idx] = enhanced;\n                data[idx + 1] = enhanced;\n                data[idx + 2] = enhanced;\n            }\n        }\n    }\n}\n\n// Extract receipt fields\nexport function extractReceiptFields(ocrResults) {\n    const fields = {\n        storeName: '',\n        storeAddress: '',\n        date: '',\n        time: '',\n        items: [],\n        subtotal: '',\n        tax: '',\n        total: '',\n        paymentMethod: '',\n        receiptNumber: ''\n    };\n    \n    // Pattern matching for receipt fields\n    const patterns = {\n        date: /\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}/,\n        time: /\\d{1,2}:\\d{2}(?::\\d{2})?(?:\\s*[AP]M)?/i,\n        price: /[$]?\\d+\\.\\d{2}/,\n        total: /(?:TOTAL|AMOUNT|BALANCE)\\s*:?\\s*[$]?([\\d,]+\\.\\d{2})/i,\n        tax: /(?:TAX|GST|VAT)\\s*:?\\s*[$]?([\\d,]+\\.\\d{2})/i,\n        subtotal: /(?:SUBTOTAL|SUB\\s*TOTAL)\\s*:?\\s*[$]?([\\d,]+\\.\\d{2})/i,\n        receiptNumber: /(?:RECEIPT|INVOICE|TRANS)\\s*(?:#|NO\\.?|NUMBER)?\\s*:?\\s*([A-Z0-9\\-]+)/i,\n        cardNumber: /(?:\\*{4}|X{4})\\s*(\\d{4})/\n    };\n    \n    // Sort and group results\n    const sortedResults = [...ocrResults].sort((a, b) => {\n        const aY = a.box ? Math.min(...a.box.map(p => p[1])) : a.bbox ? a.bbox.y0 : 0;\n        const bY = b.box ? Math.min(...b.box.map(p => p[1])) : b.bbox ? b.bbox.y0 : 0;\n        const aX = a.box ? Math.min(...a.box.map(p => p[0])) : a.bbox ? a.bbox.x0 : 0;\n        const bX = b.box ? Math.min(...b.box.map(p => p[0])) : b.bbox ? b.bbox.x0 : 0;\n        \n        if (Math.abs(aY - bY) < 15) {\n            return aX - bX;\n        }\n        return aY - bY;\n    });\n    \n    // Group by lines\n    const lines = [];\n    let currentLine = [];\n    let lastY = -1;\n    \n    sortedResults.forEach(result => {\n        const y = result.box ? Math.min(...result.box.map(p => p[1])) : \n                 result.bbox ? result.bbox.y0 : 0;\n        \n        if (lastY !== -1 && Math.abs(y - lastY) > 20) {\n            if (currentLine.length > 0) {\n                lines.push(currentLine.join(' '));\n                currentLine = [];\n            }\n        }\n        \n        currentLine.push(result.text);\n        lastY = y;\n    });\n    \n    if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n    }\n    \n    // Extract store name (usually first few lines)\n    if (lines.length > 0) {\n        fields.storeName = lines[0];\n        // Check if second line might be part of store name\n        if (lines.length > 1 && !patterns.date.test(lines[1]) && !patterns.time.test(lines[1])) {\n            fields.storeAddress = lines[1];\n        }\n    }\n    \n    // Process each result\n    for (const result of ocrResults) {\n        const text = result.text.trim();\n        \n        // Date\n        const dateMatch = text.match(patterns.date);\n        if (dateMatch && !fields.date) {\n            fields.date = dateMatch[0];\n        }\n        \n        // Time\n        const timeMatch = text.match(patterns.time);\n        if (timeMatch && !fields.time) {\n            fields.time = timeMatch[0];\n        }\n        \n        // Total\n        const totalMatch = text.match(patterns.total);\n        if (totalMatch) {\n            fields.total = totalMatch[1];\n        }\n        \n        // Tax\n        const taxMatch = text.match(patterns.tax);\n        if (taxMatch) {\n            fields.tax = taxMatch[1];\n        }\n        \n        // Subtotal\n        const subtotalMatch = text.match(patterns.subtotal);\n        if (subtotalMatch) {\n            fields.subtotal = subtotalMatch[1];\n        }\n        \n        // Receipt number\n        const receiptMatch = text.match(patterns.receiptNumber);\n        if (receiptMatch) {\n            fields.receiptNumber = receiptMatch[1];\n        }\n        \n        // Items with prices\n        if (patterns.price.test(text) && !patterns.total.test(text) && \n            !patterns.tax.test(text) && !patterns.subtotal.test(text)) {\n            // This might be a line item\n            const priceMatch = text.match(patterns.price);\n            if (priceMatch) {\n                const itemName = text.replace(priceMatch[0], '').trim();\n                if (itemName) {\n                    fields.items.push({\n                        name: itemName,\n                        price: priceMatch[0]\n                    });\n                }\n            }\n        }\n        \n        // Payment method\n        if (text.includes('VISA') || text.includes('MASTERCARD') || \n            text.includes('AMEX') || text.includes('CASH')) {\n            fields.paymentMethod = text;\n        }\n    }\n    \n    return fields;\n}\n\n// Update PaddleOCR configuration for documents\nexport function updatePaddleOCRForDocuments(engineInstance, docType = 'general') {\n    const config = docType === 'idcard' ? DOCUMENT_OCR_CONFIG : \n                   docType === 'receipt' ? RECEIPT_OCR_CONFIG :\n                   DOCUMENT_OCR_CONFIG;\n    \n    // Update detection parameters\n    engineInstance.CONFIG.det_limit_side_len = config.detection.det_limit_side_len;\n    engineInstance.CONFIG.det_db_thresh = config.detection.det_db_thresh;\n    engineInstance.CONFIG.det_db_box_thresh = config.detection.det_db_box_thresh;\n    engineInstance.CONFIG.det_db_unclip_ratio = config.detection.det_db_unclip_ratio;\n    engineInstance.CONFIG.det_db_min_size = config.detection.det_db_min_size;\n    engineInstance.CONFIG.det_db_max_candidates = config.detection.det_db_max_candidates;\n    engineInstance.CONFIG.grid_size = config.detection.grid_size;\n    engineInstance.CONFIG.min_area_thresh = config.detection.min_area_thresh;\n    \n    // Update recognition parameters\n    engineInstance.CONFIG.rec_batch_num = config.recognition.rec_batch_num;\n    engineInstance.CONFIG.drop_score = config.recognition.drop_score;\n    \n    console.log(`PaddleOCR configuration updated for ${docType} processing`);\n}","import { ppOCRImprovedEngine } from './ppocr-improved-engine.js';\nimport { ppOCREngine } from './ppocr-onnx-engine.js';\nimport { tesseractOCREngine } from './tesseract-ocr-engine.js';\nimport { INFOGRAPHIC_OCR_CONFIG, updatePaddleOCRConfig } from './infographic-ocr-config.js';\nimport { DOCUMENT_OCR_CONFIG, updatePaddleOCRForDocuments, extractReceiptFields } from './document-ocr-config.js';\nimport { PDF_OCR_CONFIG, updatePaddleOCRForPDF, extractPDFStructure, createPDFSearchHighlighter } from './pdf-ocr-config.js';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport './style.css';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = '/client-ocr-app/pdf.worker.min.js';\n\n// Global variables\nlet currentImageBlob = null;\nlet currentEngine = 'tesseract';  // Default to tesseract for better accuracy\nlet currentPreprocessing = 'improved'; // 'standard' or 'improved'\nlet currentOCREngine = tesseractOCREngine;\nlet infographicMode = false; // Flag for infographic optimization\nlet documentMode = false; // Flag for document optimization\nlet receiptMode = false; // Flag for receipt optimization\nlet pdfMode = false; // Flag for PDF optimization\n\n// Add getter to prevent external modification\nObject.defineProperty(window, 'currentEngine', {\n    get: () => currentEngine,\n    set: (value) => {\n        console.warn('Attempted to set currentEngine directly. Use handleEngineChange instead.');\n    }\n});\n\n// DOM elements\nconst fileInput = document.getElementById('fileInput');\nconst uploadArea = document.getElementById('uploadArea');\nconst previewSection = document.getElementById('previewSection');\nconst previewImage = document.getElementById('previewImage');\nconst processBtn = document.getElementById('processBtn');\nconst resultsSection = document.getElementById('resultsSection');\nconst loadingIndicator = document.getElementById('loadingIndicator');\nconst ocrResults = document.getElementById('ocrResults');\nconst copyBtn = document.getElementById('copyBtn');\nconst downloadBtn = document.getElementById('downloadBtn');\nconst resetBtn = document.getElementById('resetBtn');\n\n// Initialize the app\nasync function initializeApp() {\n    console.log('Initializing OCR engines...');\n    showStatus('Loading OCR engines...', 'info');\n    \n    try {\n        // Initialize all engines\n        await Promise.all([\n            ppOCRImprovedEngine.initialize((progress) => {\n                if (currentEngine === 'paddle' && currentPreprocessing === 'improved') {\n                    showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n                }\n                \n                // Update loading indicator if visible\n                const loadingText = document.querySelector('#loadingIndicator p');\n                if (loadingText && progress.progress !== undefined && currentEngine === 'paddle' && currentPreprocessing === 'improved') {\n                    loadingText.textContent = `${progress.message} (${progress.progress}%)`;\n                }\n            }),\n            ppOCREngine.initialize((progress) => {\n                if (currentEngine === 'paddle' && currentPreprocessing === 'standard') {\n                    showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n                }\n            }),\n            tesseractOCREngine.initialize((progress) => {\n                if (currentEngine === 'tesseract') {\n                    showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n                }\n            })\n        ]);\n        \n        console.log('OCR engines loaded successfully!');\n        showStatus('Ready to process images', 'success');\n        setupEventListeners();\n        \n        // Set initial engine based on checked radio button\n        const checkedEngine = document.querySelector('input[name=\"ocrEngine\"]:checked');\n        if (checkedEngine) {\n            currentEngine = checkedEngine.value;\n            if (currentEngine === 'paddle') {\n                currentOCREngine = currentPreprocessing === 'improved' ? ppOCRImprovedEngine : ppOCREngine;\n                document.getElementById('paddleOptions').style.display = 'block';\n            } else {\n                currentOCREngine = tesseractOCREngine;\n                document.getElementById('paddleOptions').style.display = 'none';\n            }\n            console.log('Initial engine set to:', currentEngine);\n            console.log('Initial OCR engine object:', currentOCREngine);\n        }\n    } catch (error) {\n        console.error('Failed to initialize OCR engines:', error);\n        \n        // Provide more specific error messages\n        if (error.message?.includes('onnx') || error.message?.includes('ONNX')) {\n            showError('Failed to load PaddleOCR models. This may be due to browser compatibility issues. Please try using Tesseract.js instead.');\n        } else {\n            showError('Failed to load OCR engines. Please check your internet connection and refresh the page.');\n        }\n        \n        // Still allow Tesseract to work even if PaddleOCR fails\n        if (tesseractOCREngine.initialized) {\n            showStatus('Tesseract.js is ready. PaddleOCR failed to load.', 'warning');\n            // Force selection to Tesseract\n            currentEngine = 'tesseract';\n            currentOCREngine = tesseractOCREngine;\n            const tesseractRadio = document.getElementById('engineTesseract');\n            if (tesseractRadio) {\n                tesseractRadio.checked = true;\n            }\n        }\n    }\n}\n\n// Set up event listeners\nfunction setupEventListeners() {\n    // File upload\n    uploadArea.addEventListener('click', () => fileInput.click());\n    fileInput.addEventListener('change', handleFileSelect);\n    \n    // Drag and drop\n    uploadArea.addEventListener('dragover', handleDragOver);\n    uploadArea.addEventListener('dragleave', handleDragLeave);\n    uploadArea.addEventListener('drop', handleDrop);\n    \n    // Buttons\n    processBtn.addEventListener('click', processImage);\n    copyBtn.addEventListener('click', copyText);\n    downloadBtn.addEventListener('click', downloadText);\n    resetBtn.addEventListener('click', reset);\n    \n    // Engine selection\n    document.querySelectorAll('input[name=\"ocrEngine\"]').forEach(radio => {\n        console.log('Adding event listener to radio:', radio.value, radio);\n        radio.addEventListener('change', handleEngineChange);\n    });\n    \n    // Check initial state\n    const checkedEngine = document.querySelector('input[name=\"ocrEngine\"]:checked');\n    console.log('Initial checked engine:', checkedEngine?.value);\n    \n    // Preprocessing selection\n    document.querySelectorAll('input[name=\"preprocessing\"]').forEach(radio => {\n        radio.addEventListener('change', handlePreprocessingChange);\n    });\n    \n    // Model selection for PaddleOCR\n    document.getElementById('detectionModel').addEventListener('change', handleModelChange);\n    document.getElementById('recognitionModel').addEventListener('change', handleModelChange);\n    document.getElementById('dictionary').addEventListener('change', handleModelChange);\n    \n    // Infographic mode toggle\n    document.getElementById('infographicMode').addEventListener('change', handleInfographicModeChange);\n    \n    // Document mode toggle\n    document.getElementById('documentMode').addEventListener('change', handleDocumentModeChange);\n    \n    // Receipt mode toggle\n    document.getElementById('receiptMode').addEventListener('change', handleReceiptModeChange);\n}\n\n// Handle engine change\nasync function handleEngineChange(event) {\n    const newEngine = event.target.value;\n    console.log('Engine change event - new value:', newEngine);\n    console.log('Engine change event - old currentEngine:', currentEngine);\n    \n    currentEngine = newEngine;\n    \n    // Update current OCR engine based on both engine and preprocessing selection\n    if (currentEngine === 'paddle') {\n        currentOCREngine = currentPreprocessing === 'improved' ? ppOCRImprovedEngine : ppOCREngine;\n        console.log('Set currentOCREngine to PaddleOCR:', currentPreprocessing);\n        console.log('Verify currentOCREngine:', currentOCREngine);\n    } else {\n        currentOCREngine = tesseractOCREngine;\n        console.log('Set currentOCREngine to Tesseract');\n    }\n    \n    // Show/hide paddle options\n    const paddleOptions = document.getElementById('paddleOptions');\n    paddleOptions.style.display = currentEngine === 'paddle' ? 'block' : 'none';\n    \n    showStatus(`Switched to ${currentEngine === 'paddle' ? 'PaddleOCR' : 'Tesseract.js'}`, 'info');\n    \n    // Log final state\n    console.log('Final currentEngine:', currentEngine);\n    console.log('Final currentOCREngine:', currentOCREngine);\n}\n\n// Handle preprocessing change\nasync function handlePreprocessingChange(event) {\n    currentPreprocessing = event.target.value;\n    \n    // Only update if PaddleOCR is selected\n    if (currentEngine === 'paddle') {\n        currentOCREngine = currentPreprocessing === 'improved' ? ppOCRImprovedEngine : ppOCREngine;\n        \n        // If using standard preprocessing, we need to update model config and reinitialize\n        if (currentPreprocessing === 'standard') {\n            const detectionModel = document.getElementById('detectionModel').value;\n            const recognitionModel = document.getElementById('recognitionModel').value;\n            const dictionary = document.getElementById('dictionary').value;\n            \n            ppOCREngine.setModelConfig({\n                detection: detectionModel,\n                recognition: recognitionModel,\n                dictionary: dictionary\n            });\n            \n            // Reinitialize the standard engine\n            showStatus('Loading standard preprocessing models...', 'info');\n            try {\n                await ppOCREngine.initialize((progress) => {\n                    showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n                });\n                showStatus('Standard preprocessing ready!', 'success');\n            } catch (error) {\n                console.error('Failed to initialize standard preprocessing:', error);\n                showError('Failed to load standard preprocessing models');\n                // Fallback to improved preprocessing\n                currentPreprocessing = 'improved';\n                currentOCREngine = ppOCRImprovedEngine;\n                document.getElementById('preprocessImproved').checked = true;\n            }\n        }\n        \n        showStatus(`Switched to ${currentPreprocessing === 'improved' ? 'Improved (PPU)' : 'Standard'} preprocessing`, 'info');\n    }\n}\n\n// Handle model change for PaddleOCR\nasync function handleModelChange() {\n    if (currentEngine !== 'paddle') return;\n    \n    const detectionModel = document.getElementById('detectionModel').value;\n    const recognitionModel = document.getElementById('recognitionModel').value;\n    const dictionary = document.getElementById('dictionary').value;\n    \n    // Update model configuration for both engines\n    if (currentPreprocessing === 'improved') {\n        ppOCRImprovedEngine.setModelConfig({\n            detection: detectionModel,\n            recognition: recognitionModel,\n            dictionary: dictionary\n        });\n    } else {\n        ppOCREngine.setModelConfig({\n            detection: detectionModel,\n            recognition: recognitionModel,\n            dictionary: dictionary\n        });\n    }\n    \n    // Reinitialize with new models\n    showStatus('Loading new models...', 'info');\n    try {\n        await currentOCREngine.initialize((progress) => {\n            showStatus(progress.message, progress.status === 'ready' ? 'success' : 'info');\n        });\n        showStatus('Models updated successfully!', 'success');\n    } catch (error) {\n        console.error('Failed to load new models:', error);\n        showError('Failed to load new models. Please try again.');\n    }\n}\n\n// File handling\nfunction handleFileSelect(event) {\n    const file = event.target.files[0];\n    if (file && (file.type.startsWith('image/') || file.type === 'application/pdf')) {\n        loadFile(file);\n    } else {\n        showError('Please select a valid image or PDF file');\n    }\n}\n\nfunction handleDragOver(event) {\n    event.preventDefault();\n    uploadArea.classList.add('dragover');\n}\n\nfunction handleDragLeave(event) {\n    event.preventDefault();\n    uploadArea.classList.remove('dragover');\n}\n\nfunction handleDrop(event) {\n    event.preventDefault();\n    uploadArea.classList.remove('dragover');\n    \n    const file = event.dataTransfer.files[0];\n    if (file && (file.type.startsWith('image/') || file.type === 'application/pdf')) {\n        loadFile(file);\n    } else {\n        showError('Please drop a valid image or PDF file');\n    }\n}\n\n// Load and display file\nasync function loadFile(file) {\n    // Clean up previous file from memory\n    if (currentImageBlob) {\n        // Release any object URLs if they exist\n        const oldPreviewSrc = previewImage.src;\n        if (oldPreviewSrc && oldPreviewSrc.startsWith('blob:')) {\n            URL.revokeObjectURL(oldPreviewSrc);\n        }\n        currentImageBlob = null;\n    }\n    \n    // Clear previous results\n    ocrResults.innerHTML = '';\n    resultsSection.style.display = 'none';\n    \n    // Store the new file blob for processing\n    currentImageBlob = file;\n    \n    previewSection.style.display = 'block';\n    resultsSection.style.display = 'none';\n    \n    if (file.type === 'application/pdf') {\n        // For PDFs, render the first page as preview\n        previewImage.style.display = 'none';\n        const previewContainer = previewImage.parentElement;\n        previewContainer.innerHTML = '';\n        \n        // Create PDF preview container\n        const pdfPreview = document.createElement('div');\n        pdfPreview.className = 'pdf-preview';\n        pdfPreview.innerHTML = `\n            <div class=\"pdf-header\">\n                <h3>${file.name}</h3>\n                <p class=\"pdf-info\">Loading PDF preview...</p>\n            </div>\n            <div class=\"pdf-pages\" id=\"pdfPages\"></div>\n        `;\n        previewContainer.appendChild(pdfPreview);\n        \n        // Load and render PDF preview\n        try {\n            const arrayBuffer = await file.arrayBuffer();\n            const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n            const numPages = pdf.numPages;\n            \n            const pdfInfo = pdfPreview.querySelector('.pdf-info');\n            pdfInfo.textContent = `${numPages} page${numPages > 1 ? 's' : ''}`;\n            \n            const pagesContainer = document.getElementById('pdfPages');\n            \n            // Render first few pages as preview (max 3)\n            const pagesToRender = Math.min(numPages, 3);\n            \n            for (let pageNum = 1; pageNum <= pagesToRender; pageNum++) {\n                const page = await pdf.getPage(pageNum);\n                const viewport = page.getViewport({ scale: 0.5 });\n                \n                const pageDiv = document.createElement('div');\n                pageDiv.className = 'pdf-page-preview';\n                \n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                canvas.height = viewport.height;\n                canvas.width = viewport.width;\n                \n                const renderContext = {\n                    canvasContext: context,\n                    viewport: viewport\n                };\n                \n                await page.render(renderContext).promise;\n                \n                pageDiv.innerHTML = `<p>Page ${pageNum}</p>`;\n                pageDiv.appendChild(canvas);\n                pagesContainer.appendChild(pageDiv);\n            }\n            \n            if (numPages > 3) {\n                pagesContainer.innerHTML += `<p class=\"more-pages\">... and ${numPages - 3} more pages</p>`;\n            }\n        } catch (error) {\n            console.error('Error rendering PDF preview:', error);\n            pdfPreview.querySelector('.pdf-info').textContent = 'Error loading PDF preview';\n        }\n    } else {\n        // For images, show preview\n        const existingPlaceholder = document.querySelector('.pdf-placeholder');\n        if (existingPlaceholder) {\n            existingPlaceholder.remove();\n        }\n        previewImage.style.display = 'block';\n        \n        const objectUrl = URL.createObjectURL(file);\n        previewImage.src = objectUrl;\n        \n        previewImage.onload = () => {\n            showStatus('Image loaded. Click \"Extract Text\" to process.', 'success');\n        };\n        previewImage.onerror = () => {\n            URL.revokeObjectURL(objectUrl);\n            showError('Failed to load image');\n        };\n    }\n}\n\n// Process image with current OCR engine\nasync function processImage() {\n    if (!currentImageBlob) {\n        showError('Please upload an image first');\n        return;\n    }\n    \n    resultsSection.style.display = 'block';\n    loadingIndicator.style.display = 'flex';\n    ocrResults.innerHTML = '';\n    \n    // Update loading text\n    const loadingText = document.querySelector('#loadingIndicator p');\n    let engineName = currentEngine === 'paddle' ? 'PaddleOCR' : 'Tesseract.js';\n    if (currentEngine === 'paddle') {\n        engineName += ` (${currentPreprocessing === 'improved' ? 'Improved PPU' : 'Standard'})`;\n    }\n    if (loadingText) {\n        loadingText.textContent = `Processing image with ${engineName}...`;\n    }\n    \n    try {\n        console.log(`Processing image with ${engineName}...`);\n        console.log('Current engine variable:', currentEngine);\n        console.log('Current OCR engine object:', currentOCREngine);\n        console.log('Current OCR engine name:', currentOCREngine.constructor.name);\n        showStatus('Detecting and recognizing text...', 'info');\n        \n        const startTime = performance.now();\n        \n        // Make sure we're using the correct engine\n        if (currentEngine === 'paddle' && currentOCREngine === tesseractOCREngine) {\n            console.error('Engine mismatch detected! Expected PaddleOCR but got Tesseract');\n            // Force correct engine\n            currentOCREngine = currentPreprocessing === 'improved' ? ppOCRImprovedEngine : ppOCREngine;\n            console.log('Forced engine to:', currentOCREngine);\n        }\n        \n        // Process with current OCR engine\n        const results = await currentOCREngine.process(currentImageBlob);\n        \n        const processingTime = performance.now() - startTime;\n        console.log(`Processing completed in ${processingTime.toFixed(2)}ms`);\n        console.log('OCR Results:', results);\n        \n        // Display results\n        loadingIndicator.style.display = 'none';\n        \n        if (results && results.length > 0) {\n            displayResults(results, processingTime, engineName);\n            showStatus(`Text extraction complete! Found ${results.length} text regions.`, 'success');\n        } else {\n            displayResults([], processingTime, engineName);\n            showStatus('No text found in the image', 'warning');\n        }\n        \n    } catch (error) {\n        console.error('OCR processing error:', error);\n        console.error('Error code:', error.code);\n        loadingIndicator.style.display = 'none';\n        \n        // Check if it's a PaddleOCR specific error\n        if (currentEngine === 'paddle' && (error.code === 30757872 || error.message.includes('30757872'))) {\n            showError('PaddleOCR failed: ONNX Runtime error. The PP-OCRv5 model appears to be incompatible with your browser.');\n            showStatus('Consider using Tesseract.js for better compatibility', 'warning');\n            \n            // Automatically suggest switching to Tesseract\n            const switchToTesseract = confirm('PaddleOCR failed due to browser compatibility. Would you like to switch to Tesseract.js?');\n            if (switchToTesseract) {\n                // Programmatically switch to Tesseract\n                const tesseractRadio = document.getElementById('engineTesseract');\n                if (tesseractRadio) {\n                    tesseractRadio.checked = true;\n                    tesseractRadio.dispatchEvent(new Event('change'));\n                }\n            }\n        } else {\n            showError('Failed to process image: ' + error.message);\n        }\n    }\n}\n\n// Display OCR results\nfunction displayResults(results, processingTime, engineName = 'PaddleOCR') {\n    // Check if results is from PDF (array of page results)\n    const isPDF = Array.isArray(results) && results[0]?.page !== undefined;\n    \n    // Check if it's PaddleOCR with bounding boxes\n    const isPaddleWithBoxes = currentEngine === 'paddle' && results.length > 0 && results[0] && results[0].box;\n    console.log('Display check - currentEngine:', currentEngine, 'isPaddleWithBoxes:', isPaddleWithBoxes, 'results:', results);\n    \n    if (isPDF) {\n        // Handle PDF results\n        let allText = '';\n        let totalRegions = 0;\n        let detailsHTML = '';\n        \n        results.forEach(pageResult => {\n            const pageText = pageResult.results.map(r => r.text).join('\\n');\n            allText += `\\n--- Page ${pageResult.page} ---\\n${pageText}\\n`;\n            totalRegions += pageResult.results.length;\n            \n            detailsHTML += `\n                <div class=\"page-results\">\n                    <h4>Page ${pageResult.page}</h4>\n                    <ul class=\"detection-list\">\n                        ${pageResult.results.map((result, index) => `\n                            <li data-index=\"${index}\">\n                                <span class=\"detection-index\">${index + 1}.</span>\n                                <span class=\"detection-text\">${escapeHtml(result.text)}</span>\n                                <span class=\"detection-confidence\">${(result.confidence * 100).toFixed(1)}%</span>\n                            </li>\n                        `).join('')}\n                    </ul>\n                </div>\n            `;\n        });\n        \n        ocrResults.innerHTML = `\n            <div class=\"ocr-stats\">\n                <p><strong>Processing Time:</strong> ${(processingTime / 1000).toFixed(2)}s</p>\n                <p><strong>Pages Processed:</strong> ${results.length}</p>\n                <p><strong>Total Text Regions:</strong> ${totalRegions}</p>\n                <p><strong>Engine:</strong> ${engineName}</p>\n            </div>\n            <div class=\"text-result\">\n                <h3>Extracted Text:</h3>\n                <div class=\"text-content\" id=\"extractedText\">${escapeHtml(allText || 'No text detected')}</div>\n            </div>\n            <div class=\"detection-results\">\n                <h3>Detection Details by Page:</h3>\n                ${detailsHTML}\n            </div>\n        `;\n    } else if (isPaddleWithBoxes) {\n        // Enhanced display for PaddleOCR with visual bounding boxes\n        displayPaddleOCRResults(results, processingTime, engineName);\n    } else {\n        // Handle standard image results\n        const allText = results.map(r => r.text).join('\\n');\n        \n        ocrResults.innerHTML = `\n            <div class=\"ocr-stats\">\n                <p><strong>Processing Time:</strong> ${(processingTime / 1000).toFixed(2)}s</p>\n                <p><strong>Text Regions Found:</strong> ${results.length}</p>\n                <p><strong>Engine:</strong> ${engineName}</p>\n            </div>\n            <div class=\"text-result\">\n                <h3>Extracted Text:</h3>\n                <div class=\"text-content\" id=\"extractedText\">${escapeHtml(allText || 'No text detected')}</div>\n            </div>\n            <div class=\"detection-results\">\n                <h3>Detection Details:</h3>\n                <ul class=\"detection-list\">\n                    ${results.map((result, index) => `\n                        <li>\n                            <span class=\"detection-index\">${index + 1}.</span>\n                            <span class=\"detection-text\">${escapeHtml(result.text)}</span>\n                            <span class=\"detection-confidence\">${(result.confidence * 100).toFixed(1)}%</span>\n                        </li>\n                    `).join('')}\n                </ul>\n            </div>\n        `;\n    }\n}\n\n// Enhanced display function for PaddleOCR results\nfunction displayPaddleOCRResults(results, processingTime, engineName) {\n    const allText = results.map(r => r.text).join('\\n');\n    \n    // Group results by vertical position (text lines)\n    const groupedResults = groupResultsByLine(results);\n    \n    // Create the enhanced display\n    ocrResults.innerHTML = `\n        <div class=\"ocr-stats\">\n            <p><strong>Processing Time:</strong> ${(processingTime / 1000).toFixed(2)}s</p>\n            <p><strong>Text Regions Found:</strong> ${results.length}</p>\n            <p><strong>Engine:</strong> ${engineName}</p>\n            <p><strong>Average Confidence:</strong> ${calculateAverageConfidence(results)}%</p>\n        </div>\n        \n        <div class=\"paddle-results-container\">\n            <div class=\"result-tabs\">\n                <button class=\"result-tab active\" onclick=\"showResultTab('visual')\">Visual Results</button>\n                <button class=\"result-tab\" onclick=\"showResultTab('text')\">Text Only</button>\n                <button class=\"result-tab\" onclick=\"showResultTab('grouped')\">Grouped by Line</button>\n            </div>\n            \n            <div id=\"visualResults\" class=\"tab-content active\">\n                <div class=\"result-image-container\">\n                    <img id=\"resultImage\" src=\"${previewImage.src}\" alt=\"OCR Result\">\n                    <div class=\"bounding-box-overlay\" id=\"boundingBoxOverlay\"></div>\n                </div>\n                <div class=\"detection-results\">\n                    <h3>Detected Text Regions:</h3>\n                    <ul class=\"detection-list\" id=\"visualDetectionList\">\n                        ${results.map((result, index) => {\n                            const confidenceClass = getConfidenceClass(result.confidence);\n                            return `\n                                <li data-index=\"${index}\" onmouseover=\"highlightBox(${index})\" onmouseout=\"unhighlightBox(${index})\" onclick=\"selectBox(${index})\">\n                                    <span class=\"detection-index\">${index + 1}.</span>\n                                    <span class=\"detection-text\">${escapeHtml(result.text)}</span>\n                                    <span class=\"detection-confidence ${confidenceClass}\">${(result.confidence * 100).toFixed(1)}%</span>\n                                </li>\n                            `;\n                        }).join('')}\n                    </ul>\n                </div>\n            </div>\n            \n            <div id=\"textResults\" class=\"tab-content grouped-results\">\n                <div class=\"text-result\">\n                    <h3>Extracted Text:</h3>\n                    <div class=\"text-content\" id=\"extractedText\">${escapeHtml(allText || 'No text detected')}</div>\n                </div>\n            </div>\n            \n            <div id=\"groupedResults\" class=\"tab-content grouped-results\">\n                <h3>Text Grouped by Line:</h3>\n                ${groupedResults.map((group, groupIndex) => `\n                    <div class=\"text-region-group\">\n                        <div class=\"region-header\">\n                            <span class=\"region-title\">Line ${groupIndex + 1}</span>\n                            <div class=\"region-confidence\">\n                                <div class=\"confidence-bar\">\n                                    <div class=\"confidence-fill\" style=\"width: ${group.avgConfidence}%\"></div>\n                                </div>\n                                <span class=\"confidence-text\">${group.avgConfidence.toFixed(1)}%</span>\n                            </div>\n                        </div>\n                        <p>${escapeHtml(group.text)}</p>\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n    `;\n    \n    // Draw bounding boxes after DOM is updated\n    setTimeout(() => drawBoundingBoxes(results), 100);\n}\n\n// Copy text to clipboard\nasync function copyText() {\n    const textElement = document.getElementById('extractedText');\n    if (textElement) {\n        try {\n            await navigator.clipboard.writeText(textElement.textContent);\n            showSuccess('Text copied to clipboard!');\n        } catch (error) {\n            showError('Failed to copy text');\n        }\n    }\n}\n\n// Download text as file\nfunction downloadText() {\n    const textElement = document.getElementById('extractedText');\n    if (textElement) {\n        const text = textElement.textContent;\n        const blob = new Blob([text], { type: 'text/plain' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `pp-ocrv5-result-${Date.now()}.txt`;\n        a.click();\n        URL.revokeObjectURL(url);\n    }\n}\n\n// Reset the app\nfunction reset() {\n    // Clean up memory\n    if (currentImageBlob) {\n        // Release object URLs\n        const previewSrc = previewImage.src;\n        if (previewSrc && previewSrc.startsWith('blob:')) {\n            URL.revokeObjectURL(previewSrc);\n        }\n        currentImageBlob = null;\n    }\n    \n    // Reset UI\n    fileInput.value = '';\n    previewSection.style.display = 'none';\n    resultsSection.style.display = 'none';\n    ocrResults.innerHTML = '';\n    previewImage.src = '';\n    \n    // Reset preview container for PDFs\n    const previewContainer = previewImage.parentElement;\n    previewContainer.innerHTML = '<img id=\"previewImage\" alt=\"Preview\">';\n    // Re-cache the image element reference\n    window.previewImage = document.getElementById('previewImage');\n    \n    showStatus('Ready to process a new image', 'info');\n}\n\n// Utility functions\nfunction escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nfunction showError(message) {\n    showStatus(message, 'error');\n    \n    // Create toast notification\n    const toast = document.createElement('div');\n    toast.className = 'toast error';\n    toast.textContent = message;\n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n        toast.remove();\n    }, 5000);\n}\n\nfunction showSuccess(message) {\n    // Create toast notification\n    const toast = document.createElement('div');\n    toast.className = 'toast success';\n    toast.textContent = message;\n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n        toast.remove();\n    }, 3000);\n}\n\nfunction showStatus(message, type = 'info') {\n    console.log(`[${type.toUpperCase()}] ${message}`);\n    \n    // Update status in UI\n    const statusElement = document.getElementById('status');\n    if (statusElement) {\n        statusElement.textContent = message;\n        statusElement.className = `status ${type}`;\n    }\n}\n\n// Helper functions for enhanced PaddleOCR display\nfunction calculateAverageConfidence(results) {\n    if (results.length === 0) return 0;\n    const sum = results.reduce((acc, r) => acc + r.confidence, 0);\n    return (sum / results.length * 100).toFixed(1);\n}\n\nfunction getConfidenceClass(confidence) {\n    const percent = confidence * 100;\n    if (percent >= 80) return 'high-confidence';\n    if (percent >= 60) return 'medium-confidence';\n    return 'low-confidence';\n}\n\nfunction groupResultsByLine(results) {\n    if (results.length === 0) return [];\n    \n    // Sort by Y position\n    const sorted = [...results].sort((a, b) => {\n        const aY = Math.min(...a.box.map(p => p[1]));\n        const bY = Math.min(...b.box.map(p => p[1]));\n        return aY - bY;\n    });\n    \n    const groups = [];\n    let currentGroup = [sorted[0]];\n    \n    for (let i = 1; i < sorted.length; i++) {\n        const prevY = Math.min(...sorted[i-1].box.map(p => p[1]));\n        const currY = Math.min(...sorted[i].box.map(p => p[1]));\n        \n        // If vertical difference is small, they're on the same line\n        if (Math.abs(currY - prevY) < 20) {\n            currentGroup.push(sorted[i]);\n        } else {\n            groups.push(currentGroup);\n            currentGroup = [sorted[i]];\n        }\n    }\n    \n    if (currentGroup.length > 0) {\n        groups.push(currentGroup);\n    }\n    \n    // Process each group\n    return groups.map(group => {\n        // Sort by X position within group\n        group.sort((a, b) => {\n            const aX = Math.min(...a.box.map(p => p[0]));\n            const bX = Math.min(...b.box.map(p => p[0]));\n            return aX - bX;\n        });\n        \n        const text = group.map(r => r.text).join(' ');\n        const avgConfidence = group.reduce((sum, r) => sum + r.confidence, 0) / group.length * 100;\n        \n        return { text, avgConfidence, items: group };\n    });\n}\n\nfunction drawBoundingBoxes(results) {\n    const overlay = document.getElementById('boundingBoxOverlay');\n    const image = document.getElementById('resultImage');\n    \n    if (!overlay || !image) return;\n    \n    // Clear existing boxes\n    overlay.innerHTML = '';\n    \n    // Wait for image to load\n    if (!image.complete) {\n        image.onload = () => drawBoundingBoxes(results);\n        return;\n    }\n    \n    const rect = image.getBoundingClientRect();\n    const scaleX = image.naturalWidth / rect.width;\n    const scaleY = image.naturalHeight / rect.height;\n    \n    results.forEach((result, index) => {\n        const box = result.box;\n        const minX = Math.min(...box.map(p => p[0])) / scaleX;\n        const minY = Math.min(...box.map(p => p[1])) / scaleY;\n        const maxX = Math.max(...box.map(p => p[0])) / scaleX;\n        const maxY = Math.max(...box.map(p => p[1])) / scaleY;\n        \n        const boxElement = document.createElement('div');\n        boxElement.className = `text-box ${getConfidenceClass(result.confidence)}`;\n        boxElement.dataset.index = index;\n        boxElement.style.left = `${minX}px`;\n        boxElement.style.top = `${minY}px`;\n        boxElement.style.width = `${maxX - minX}px`;\n        boxElement.style.height = `${maxY - minY}px`;\n        \n        // Add label\n        const label = document.createElement('div');\n        label.className = 'text-box-label';\n        label.textContent = `${index + 1}: ${(result.confidence * 100).toFixed(0)}%`;\n        boxElement.appendChild(label);\n        \n        // Add click handler\n        boxElement.onclick = () => selectBox(index);\n        \n        overlay.appendChild(boxElement);\n    });\n}\n\n// Tab switching functionality\nwindow.showResultTab = function(tabName) {\n    // Update tab buttons\n    document.querySelectorAll('.result-tab').forEach(tab => {\n        tab.classList.remove('active');\n    });\n    event.target.classList.add('active');\n    \n    // Update content\n    document.querySelectorAll('.tab-content').forEach(content => {\n        content.classList.remove('active');\n    });\n    \n    if (tabName === 'visual') {\n        document.getElementById('visualResults').classList.add('active');\n    } else if (tabName === 'text') {\n        document.getElementById('textResults').classList.add('active');\n    } else if (tabName === 'grouped') {\n        document.getElementById('groupedResults').classList.add('active');\n    }\n};\n\n// Box interaction functions\nwindow.highlightBox = function(index) {\n    const box = document.querySelector(`.text-box[data-index=\"${index}\"]`);\n    const listItem = document.querySelector(`#visualDetectionList li[data-index=\"${index}\"]`);\n    \n    if (box) box.classList.add('hover');\n    if (listItem) listItem.classList.add('highlighted');\n};\n\nwindow.unhighlightBox = function(index) {\n    const box = document.querySelector(`.text-box[data-index=\"${index}\"]`);\n    const listItem = document.querySelector(`#visualDetectionList li[data-index=\"${index}\"]`);\n    \n    if (box) box.classList.remove('hover');\n    if (listItem) listItem.classList.remove('highlighted');\n};\n\nwindow.selectBox = function(index) {\n    // Remove previous selection\n    document.querySelectorAll('.text-box.selected').forEach(box => {\n        box.classList.remove('selected');\n    });\n    \n    // Add new selection\n    const box = document.querySelector(`.text-box[data-index=\"${index}\"]`);\n    if (box) {\n        box.classList.add('selected');\n        \n        // Scroll list item into view\n        const listItem = document.querySelector(`#visualDetectionList li[data-index=\"${index}\"]`);\n        if (listItem) {\n            listItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            \n            // Highlight temporarily\n            listItem.classList.add('highlighted');\n            setTimeout(() => listItem.classList.remove('highlighted'), 2000);\n        }\n    }\n};\n\n// Handle infographic mode change\nfunction handleInfographicModeChange(event) {\n    infographicMode = event.target.checked;\n    console.log('Infographic mode:', infographicMode ? 'enabled' : 'disabled');\n    \n    // Disable document mode if infographic mode is enabled\n    if (infographicMode && documentMode) {\n        documentMode = false;\n        document.getElementById('documentMode').checked = false;\n    }\n    \n    if (infographicMode && currentEngine === 'paddle') {\n        // Apply optimized configuration for infographics\n        updatePaddleOCRConfig(currentOCREngine);\n        showStatus('Infographic mode enabled - optimized for complex layouts', 'info');\n    } else if (!infographicMode && currentEngine === 'paddle') {\n        // Reset to default configuration\n        showStatus('Infographic mode disabled', 'info');\n    }\n}\n\n// Handle document mode change\nfunction handleDocumentModeChange(event) {\n    documentMode = event.target.checked;\n    console.log('Document mode:', documentMode ? 'enabled' : 'disabled');\n    \n    // Disable infographic mode if document mode is enabled\n    if (documentMode && infographicMode) {\n        infographicMode = false;\n        document.getElementById('infographicMode').checked = false;\n    }\n    \n    if (documentMode && currentEngine === 'paddle') {\n        // Apply optimized configuration for documents\n        updatePaddleOCRForDocuments(currentOCREngine, 'general');\n        showStatus('Document mode enabled - optimized for official documents and ID cards', 'info');\n    } else if (!documentMode && currentEngine === 'paddle') {\n        // Reset to default configuration\n        showStatus('Document mode disabled', 'info');\n    }\n}\n\n// Handle receipt mode change\nfunction handleReceiptModeChange(event) {\n    receiptMode = event.target.checked;\n    console.log('Receipt mode:', receiptMode ? 'enabled' : 'disabled');\n    \n    // Disable other modes if receipt mode is enabled\n    if (receiptMode) {\n        if (infographicMode) {\n            infographicMode = false;\n            document.getElementById('infographicMode').checked = false;\n        }\n        if (documentMode) {\n            documentMode = false;\n            document.getElementById('documentMode').checked = false;\n        }\n    }\n    \n    if (receiptMode && currentEngine === 'paddle') {\n        // Apply optimized configuration for receipts\n        updatePaddleOCRForDocuments(currentOCREngine, 'receipt');\n        showStatus('Receipt mode enabled - optimized for thermal receipts and price extraction', 'info');\n    } else if (!receiptMode && currentEngine === 'paddle') {\n        // Reset to default configuration\n        showStatus('Receipt mode disabled', 'info');\n    }\n}\n\n// Handle PDF mode change\nfunction handlePDFModeChange(event) {\n    pdfMode = event.target.checked;\n    console.log('PDF mode:', pdfMode ? 'enabled' : 'disabled');\n    \n    // Disable other modes if PDF mode is enabled\n    if (pdfMode) {\n        if (infographicMode) {\n            infographicMode = false;\n            document.getElementById('infographicMode').checked = false;\n        }\n        if (documentMode) {\n            documentMode = false;\n            document.getElementById('documentMode').checked = false;\n        }\n        if (receiptMode) {\n            receiptMode = false;\n            document.getElementById('receiptMode').checked = false;\n        }\n    }\n    \n    if (pdfMode && currentEngine === 'paddle') {\n        // Apply optimized configuration for PDFs\n        updatePaddleOCRForPDF(currentOCREngine);\n        showStatus('PDF mode enabled - optimized for PDF documents with structure extraction', 'info');\n    } else if (!pdfMode && currentEngine === 'paddle') {\n        // Reset to default configuration\n        showStatus('PDF mode disabled', 'info');\n    }\n}\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', initializeApp);"],"names":["pdfjsLib.GlobalWorkerOptions","ort.env","MODEL_BASE","CONFIG","PPOCRImprovedEngine","config","progressCallback","detectionName","executionProviders","lastError","provider","ort.InferenceSession","error","recognitionName","text","line","i","imageBlob","imageData","boxes","results","resizedImage","ratio","inputTensor","feeds","output","inputInfo","name","tensorData","nanCount","infCount","minVal","maxVal","inferenceError","_a","_b","simplifiedBoxes","fallbackError","limitSideLen","limitType","newW","newH","gridSize","targetW","targetH","preprocessedImage","resolve","blob","url","scale","scaledW","scaledH","offsetX","offsetY","imgData","pixels","enhanced","size","floatData","mean","std","pixelIndex","r","g","b","tensor","ort.Tensor","outputTensor","imgWidth","imgHeight","height","width","data","batchSize","channels","h","w","probMap","bitmap","detectedPixels","sampleProbs","visited","numContours","componentsFound","rejectedByScore","rejectedByArea","y","x","idx","box","p","area","startX","startY","stack","points","totalScore","count","MAX_COMPONENT_SIZE","startIdx","componentMap","neighbors","nx","ny","nidx","yDiff","xDiff","xs","ys","minX","maxX","minY","maxY","xPadding","yPadding","j","grayscale","gray","cx","cy","cidx","a","aY","bY","tmp","batchBoxes","batchResults","croppedImages","widthRatios","cropped","indices","_","result","rotatedCanvas","rotatedCtx","imgElement","resizedW","paddingData","c","srcIdx","dstIdx","seqLen","vocabSize","preds","predIdxs","scores","t","maxIdx","val","decoded","decodedScores","lastIdx","filteredResults","heights","avgHeight","lines","currentLine","current","previous","prevY","currY","verticalGap","threshold","mergedResults","aX","bX","avgConfidence","sum","allPoints","textScoreThreshold","pdfBlob","arrayBuffer","pdf","pdfjsLib.getDocument","numPages","allResults","pageNum","page","viewport","canvas","ctx","pageResults","reject","img","corrections","wrong","correct","regex","ppOCRImprovedEngine","PPOCREngine","limit","thresh","scaledBox","queue","dy","dx","unclipRatio","padding","aspectRatio","targetWidth","pageImage","ppOCREngine","runtime","exports","Op","hasOwn","defineProperty","obj","key","desc","undefined","$Symbol","iteratorSymbol","asyncIteratorSymbol","toStringTagSymbol","define","value","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","arg","err","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","prototype","method","genFun","ctor","AsyncIterator","PromiseImpl","invoke","record","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","iter","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","methodName","info","pushTryEntry","locs","entry","resetTryEntry","object","keys","next","iterable","iteratorMethod","skipTempReset","rootEntry","rootRecord","exception","handle","loc","caught","hasCatch","hasFinally","type","finallyEntry","afterLoc","finallyLoc","tryLoc","thrown","resultName","nextLoc","module","getId","prefix","cnt","require$$0","jobCounter","createJob","_id","action","payload","id","logging","log","_logging","args","this","require$$1","require$$2","schedulerCounter","createScheduler","workers","runningWorkers","jobQueue","getQueueLen","getNumWorkers","dequeue","wIds","job","wid","isElectron","isElectron_1","getEnvironment","env","require","isBrowser","resolveURL","s","resolvePaths","options","opts","circularize","blocks","paragraphs","words","symbols","block","paragraph","word","sym","OEM","defaultOptions","version","defaultOptions_1","spawnWorker","workerPath","workerBlobURL","worker","terminateWorker","onMessage","handler","send","packet","readFromBlobOrFile","fileReader","code","loadImage","image","loadImage_1","require$$3","require$$4","require$$5","browser","require$$6","workerCounter","createWorker","langs","oem","_options","logger","errorHandler","resolves","rejects","currentLangs","currentOem","currentConfig","lstmOnlyCore","workerResReject","workerResResolve","workerRes","workerError","event","setResolve","promiseId","res","setReject","rej","startJob","jobId","load","loadInternal","writeText","path","readText","removeFile","FS","loadLanguage","loadLanguageInternal","_langs","initialize","initializeInternal","_oem","_config","reinitialize","setParameters","params","recognize","getPDF","title","textonly","detect","terminate","workerId","status","d","resolveObj","Tesseract","languages","PSM","setLogging","require$$7","src","TesseractOCREngine","m","tesseractResult","wordY","confidence","tesseractOCREngine","INFOGRAPHIC_OCR_CONFIG","updatePaddleOCRConfig","engineInstance","DOCUMENT_OCR_CONFIG","RECEIPT_OCR_CONFIG","updatePaddleOCRForDocuments","docType","currentImageBlob","currentEngine","currentPreprocessing","currentOCREngine","infographicMode","documentMode","receiptMode","fileInput","uploadArea","previewSection","previewImage","processBtn","resultsSection","loadingIndicator","ocrResults","copyBtn","downloadBtn","resetBtn","initializeApp","showStatus","progress","loadingText","setupEventListeners","checkedEngine","showError","tesseractRadio","handleFileSelect","handleDragOver","handleDragLeave","handleDrop","processImage","copyText","downloadText","reset","radio","handleEngineChange","handlePreprocessingChange","handleModelChange","handleInfographicModeChange","handleDocumentModeChange","handleReceiptModeChange","newEngine","paddleOptions","detectionModel","recognitionModel","dictionary","file","loadFile","oldPreviewSrc","previewContainer","pdfPreview","pdfInfo","pagesContainer","pagesToRender","pageDiv","renderContext","existingPlaceholder","objectUrl","engineName","startTime","processingTime","displayResults","isPDF","isPaddleWithBoxes","allText","totalRegions","detailsHTML","pageResult","pageText","index","escapeHtml","displayPaddleOCRResults","groupedResults","groupResultsByLine","calculateAverageConfidence","confidenceClass","getConfidenceClass","group","groupIndex","drawBoundingBoxes","textElement","showSuccess","previewSrc","div","message","toast","statusElement","acc","percent","sorted","groups","currentGroup","overlay","rect","scaleX","scaleY","boxElement","label","tabName","tab","content","listItem"],"mappings":"8zBAIAA,GAAAA,oBAA6B,UAAY,oCAGzCC,GAAQ,KAAK,UAAY,0BACzBA,GAAQ,KAAK,WAAa,EAE1BA,GAAQ,MAAM,KAAO,GACrBA,GAAQ,MAAM,mBAAqB,GAGnC,MAAMC,GAAa,0BAGbC,GAAS,CAEX,mBAAoB,KACpB,eAAgB,MAChB,cAAe,IACf,kBAAmB,GACnB,oBAAqB,IACrB,gBAAiB,EACjB,sBAAuB,IACvB,iBAAkB,GAClB,oBAAqB,EAGrB,iBAAkB,GAClB,gBAAiB,IACjB,cAAe,EACf,WAAY,IAGZ,SAAU,CAAC,KAAO,KAAO,IAAK,EAC9B,QAAS,CAAC,KAAO,KAAO,IAAK,EAC7B,SAAU,GACV,QAAS,GAGT,gBAAiB,EAGjB,uBAAwB,GAGxB,aAAc,GACd,oBAAqB,GACrB,sBAAuB,GAGvB,UAAW,GACX,cAAe,EACnB,EAEO,MAAMC,EAAoB,CAC7B,aAAc,CACV,KAAK,iBAAmB,KACxB,KAAK,mBAAqB,KAC1B,KAAK,SAAW,CAAA,EAChB,KAAK,YAAc,GACnB,KAAK,OAAS,KACd,KAAK,IAAM,KACX,KAAK,YAAc,CACf,UAAW,iCACX,YAAa,oCACb,WAAY,aACxB,EAEQ,KAAK,OAASD,EAClB,CAEA,eAAeE,EAAQ,CAEfA,EAAO,YAAW,KAAK,YAAY,UAAYA,EAAO,WACtDA,EAAO,cAAa,KAAK,YAAY,YAAcA,EAAO,aAC1DA,EAAO,aAAY,KAAK,YAAY,WAAaA,EAAO,YAG5D,KAAK,YAAc,EACvB,CAEA,MAAM,WAAWC,EAAkB,CAC/B,GAAI,CAEA,KAAK,OAAS,SAAS,cAAc,QAAQ,EAC7C,KAAK,IAAM,KAAK,OAAO,WAAW,KAAM,CAAE,mBAAoB,GAAM,EAGpEA,GAAA,MAAAA,EAAmB,CAAE,OAAQ,UAAW,QAAS,wBAAyB,SAAU,KACpF,MAAM,KAAK,eAAc,EAGzB,MAAMC,EAAgB,KAAK,YAAY,UAAU,QAAQ,QAAS,EAAE,EAAE,QAAQ,KAAM,GAAG,EACvFD,GAAA,MAAAA,EAAmB,CAAE,OAAQ,UAAW,QAAS,WAAWC,CAAa,MAAO,SAAU,EAAE,GAGxF,KAAK,kBACL,MAAM,KAAK,iBAAiB,QAAO,EAIvC,MAAMC,EAAqB,CAAC,QAAS,MAAM,EAC3C,IAAIC,EAAY,KAEhB,UAAWC,KAAYF,EACnB,GAAI,CACA,QAAQ,IAAI,uCAAuCE,CAAQ,cAAc,EACzE,KAAK,iBAAmB,MAAMC,GAAqB,OAC/CT,GAAa,KAAK,YAAY,UAC9B,CACI,mBAAoB,CAACQ,CAAQ,EAC7B,uBAAwB,MACxB,kBAAmB,GACnB,iBAAkB,EAC9C,CACA,EACoB,QAAQ,IAAI,4CAA4CA,CAAQ,IAAK,KAAK,iBAAiB,WAAY,KAAK,iBAAiB,WAAW,EACxI,KACJ,OAASE,EAAO,CAGZ,GAFA,QAAQ,KAAK,uBAAuBF,CAAQ,IAAKE,EAAM,OAAO,EAC9DH,EAAYG,EACRF,IAAaF,EAAmBA,EAAmB,OAAS,CAAC,EAC7D,MAAMC,CAEd,CAIJ,MAAMI,EAAkB,KAAK,YAAY,YAAY,QAAQ,QAAS,EAAE,EAAE,QAAQ,KAAM,GAAG,EAC3FP,GAAA,MAAAA,EAAmB,CAAE,OAAQ,UAAW,QAAS,WAAWO,CAAe,MAAO,SAAU,EAAE,GAG1F,KAAK,oBACL,MAAM,KAAK,mBAAmB,QAAO,EAIzC,UAAWH,KAAYF,EACnB,GAAI,CACA,QAAQ,IAAI,yCAAyCE,CAAQ,cAAc,EAC3E,KAAK,mBAAqB,MAAMC,GAAqB,OACjDT,GAAa,KAAK,YAAY,YAC9B,CACI,mBAAoB,CAACQ,CAAQ,EAC7B,uBAAwB,MACxB,kBAAmB,GACnB,iBAAkB,EAC9C,CACA,EACoB,QAAQ,IAAI,8CAA8CA,CAAQ,IAAK,KAAK,mBAAmB,WAAY,KAAK,mBAAmB,WAAW,EAC9I,KACJ,OAASE,EAAO,CAGZ,GAFA,QAAQ,KAAK,mCAAmCF,CAAQ,IAAKE,EAAM,OAAO,EAC1EH,EAAYG,EACRF,IAAaF,EAAmBA,EAAmB,OAAS,CAAC,EAC7D,MAAMC,CAEd,CAGJ,KAAK,YAAc,GACnBH,GAAA,MAAAA,EAAmB,CAAE,OAAQ,QAAS,QAAS,gBAAiB,SAAU,KAE9E,OAASM,EAAO,CACZ,cAAQ,MAAM,sCAAuCA,CAAK,EACpDA,CACV,CACJ,CAEA,MAAM,gBAAiB,CACnB,GAAI,CAEA,MAAME,EAAO,MADI,MAAM,MAAMZ,GAAa,KAAK,YAAY,UAAU,GACzC,KAAI,EAChC,KAAK,SAAWY,EAAK,MAAM;AAAA,CAAI,EAAE,OAAOC,GAAQA,EAAK,MAAM,EAE3D,KAAK,SAAS,QAAQ,GAAG,EACzB,QAAQ,IAAI,qBAAqB,KAAK,YAAY,UAAU,SAAS,KAAK,SAAS,MAAM,aAAa,CAC1G,OAASH,EAAO,CACZ,QAAQ,MAAM,6BAA8BA,CAAK,EAEjD,KAAK,SAAW,CAAC,GAAG,EACpB,QAASI,EAAI,GAAIA,EAAI,IAAKA,IACtB,KAAK,SAAS,KAAK,OAAO,aAAaA,CAAC,CAAC,CAEjD,CACJ,CAEA,MAAM,QAAQC,EAAW,CACrB,GAAI,CAAC,KAAK,YACN,MAAM,IAAI,MAAM,4BAA4B,EAMhD,GAHA,QAAQ,IAAI,wBAAyBA,EAAU,KAAM,QAASA,EAAU,IAAI,EAGxEA,EAAU,OAAS,kBACnB,OAAO,MAAM,KAAK,WAAWA,CAAS,EAI1C,QAAQ,IAAI,6BAA6B,EACzC,MAAMC,EAAY,MAAM,KAAK,YAAYD,CAAS,EAClD,QAAQ,IAAI,gBAAiBC,EAAU,MAAO,IAAKA,EAAU,MAAM,EAGnE,MAAMC,EAAQ,MAAM,KAAK,WAAWD,CAAS,EAGvCE,EAAU,MAAM,KAAK,cAAcF,EAAWC,CAAK,EAGzD,OAAO,KAAK,eAAeC,CAAO,CACtC,CAEA,MAAM,WAAWF,EAAW,SAExB,GADA,QAAQ,IAAI,kDAAkD,EAC1D,CAAC,KAAK,iBACN,MAAM,IAAI,MAAM,4BAA4B,EAEhD,QAAQ,IAAI,4BAA6B,KAAK,gBAAgB,EAC9D,QAAQ,IAAI,sBAAuB,KAAK,YAAY,WAAY,qBAAsB,KAAK,SAAS,MAAM,EAE1G,GAAI,CAEA,QAAQ,IAAI,0BAA0B,EACtC,KAAM,CAAE,aAAAG,EAAc,MAAAC,CAAK,EAAK,MAAM,KAAK,mBAAmBJ,CAAS,EACvE,QAAQ,IAAI,wBAAyBI,CAAK,EAG1C,QAAQ,IAAI,2BAA2B,EACvC,MAAMC,EAAc,MAAM,KAAK,uBAAuBF,CAAY,EAClE,QAAQ,IAAI,wCAAyCE,EAAY,IAAI,EAGrE,QAAQ,IAAI,4BAA4B,EACxC,QAAQ,IAAI,eAAgB,KAAK,iBAAiB,UAAU,EAC5D,QAAQ,IAAI,gBAAiB,KAAK,iBAAiB,WAAW,EAC9D,MAAMC,EAAQ,CAAE,CAAC,KAAK,iBAAiB,WAAW,CAAC,CAAC,EAAGD,CAAW,EAElE,IAAIE,EACJ,GAAI,CACA,QAAQ,IAAI,oBAAqBF,EAAY,IAAI,EACjD,QAAQ,IAAI,eAAgBA,EAAY,KAAK,MAAM,EACnD,QAAQ,IAAI,gBAAiBA,EAAY,IAAI,EAC7C,QAAQ,IAAI,uBAAwB,KAAK,iBAAiB,WAAW,CAAC,CAAC,EAGvE,GAAI,CACA,MAAMG,EAAY,KAAK,iBAAiB,WAAW,IAAIC,IAAS,CAC5D,KAAAA,CAExB,EAAsB,EACF,QAAQ,IAAI,gBAAiBD,CAAS,CAC1C,MAAY,CACR,QAAQ,IAAI,gCAAgC,CAChD,CAGA,MAAME,EAAaL,EAAY,KAC/B,IAAIM,EAAW,EACXC,EAAW,EACXC,EAAS,IACTC,EAAS,KAEb,QAAShB,EAAI,EAAGA,EAAIY,EAAW,OAAQZ,IAC/B,MAAMY,EAAWZ,CAAC,CAAC,GAAGa,IACrB,SAASD,EAAWZ,CAAC,CAAC,GAAGc,IAC9BC,EAAS,KAAK,IAAIA,EAAQH,EAAWZ,CAAC,CAAC,EACvCgB,EAAS,KAAK,IAAIA,EAAQJ,EAAWZ,CAAC,CAAC,EAG3C,QAAQ,IAAI,qBAAqBe,EAAO,QAAQ,CAAC,CAAC,SAASC,EAAO,QAAQ,CAAC,CAAC,EAAE,GAC1EH,EAAW,GAAKC,EAAW,IAC3B,QAAQ,MAAM,wBAAwBD,CAAQ,gBAAgBC,CAAQ,aAAa,EAGvFL,EAAS,MAAM,KAAK,iBAAiB,IAAID,CAAK,EAC9C,QAAQ,IAAI,oBAAoB,EAChC,QAAQ,IAAI,gBAAiBC,EAAO,KAAK,iBAAiB,YAAY,CAAC,CAAC,EAAE,IAAI,CAClF,OAASQ,EAAgB,CAOrB,GANA,QAAQ,MAAM,wBAAyBA,CAAc,EACrD,QAAQ,MAAM,cAAeA,EAAe,IAAI,EAChD,QAAQ,MAAM,iBAAkBA,EAAe,OAAO,EACtD,QAAQ,MAAM,eAAgBA,EAAe,KAAK,EAG9CA,EAAe,OAAS,WAAYC,EAAAD,EAAe,UAAf,MAAAC,EAAwB,SAAS,mBACrEC,EAAAF,EAAe,UAAf,MAAAE,EAAwB,SAAS,sBAAuB,CACxD,QAAQ,MAAM,wFAAwF,EACtG,QAAQ,MAAM,+BAA+B,EAG7C,GAAI,CACA,MAAMC,EAAkB,MAAM,KAAK,oBAAoBf,EAAcC,CAAK,EAC1E,eAAQ,IAAI,8BAA8Bc,EAAgB,MAAM,UAAU,EACnEA,CACX,OAASC,EAAe,CACpB,QAAQ,MAAM,oCAAqCA,CAAa,CACpE,CACJ,CAEA,MAAMJ,CACV,CAGA,MAAMd,EAAQ,MAAM,KAAK,qBACrBM,EAAO,KAAK,iBAAiB,YAAY,CAAC,CAAC,EAC3CJ,EAAa,MACbA,EAAa,OACbC,CAChB,EAEY,eAAQ,IAAI,YAAYH,EAAM,MAAM,eAAe,EAC5C,KAAK,UAAUA,CAAK,CAC/B,OAASP,EAAO,CACZ,eAAQ,MAAM,uBAAwBA,CAAK,EAC3C,QAAQ,MAAM,iBAAkB,CAC5B,QAASA,EAAM,QACf,MAAOA,EAAM,MACb,KAAMA,EAAM,KACZ,KAAMA,EAAM,IAC5B,CAAa,EAEM,CAAA,CACX,CACJ,CAEA,MAAM,mBAAmBM,EAAW,CAChC,GAAI,CACA,QAAQ,IAAI,yCAA0CA,EAAU,MAAO,IAAKA,EAAU,MAAM,EAC5F,MAAMoB,EAAe,KAAK,OAAO,mBAC3BC,EAAY,KAAK,OAAO,eAC9B,IAAIC,EAAOtB,EAAU,MACjBuB,EAAOvB,EAAU,OAGrBI,EAAQ,EACRiB,IAAc,MACV,KAAK,IAAIE,EAAMD,CAAI,EAAIF,IACvBhB,EAAQmB,EAAOD,EAAOF,EAAeG,EAAOH,EAAeE,GAI3D,KAAK,IAAIC,EAAMD,CAAI,EAAIF,IACvBhB,EAAQmB,EAAOD,EAAOF,EAAeG,EAAOH,EAAeE,GAInEA,EAAO,KAAK,MAAMA,EAAOlB,CAAK,EAC9BmB,EAAO,KAAK,MAAMA,EAAOnB,CAAK,EAG9B,MAAMoB,EAAW,KAAK,OAAO,WAAa,GACpCC,EAAU,KAAK,IAAID,EAAU,KAAK,MAAMF,EAAOE,CAAQ,EAAIA,CAAQ,EACnEE,EAAU,KAAK,IAAIF,EAAU,KAAK,MAAMD,EAAOC,CAAQ,EAAIA,CAAQ,EAKzE,GAHA,QAAQ,IAAI,iBAAiBxB,EAAU,KAAK,IAAIA,EAAU,MAAM,OAAOyB,CAAO,IAAIC,CAAO,YAAYtB,CAAK,GAAG,EAGzGqB,GAAW,GAAKC,GAAW,GAAK,CAAC,SAASD,CAAO,GAAK,CAAC,SAASC,CAAO,EACvE,MAAM,IAAI,MAAM,8BAA8BD,CAAO,IAAIC,CAAO,EAAE,EAItE,MAAMC,EAAoB,MAAM,KAAK,gBAAgB3B,EAAWyB,EAASC,CAAO,EAE1EvB,EAAe,IAAI,MACzB,OAAO,IAAI,QAASyB,GAAY,CAC5B,KAAK,OAAO,OAAQC,GAAS,CACzB,MAAMC,EAAM,IAAI,gBAAgBD,CAAI,EACpC1B,EAAa,OAAS,IAAM,CACxB,IAAI,gBAAgB2B,CAAG,EACvBF,EAAQ,CAAE,aAAAzB,EAAc,MAAAC,EAAO,CACnC,EACAD,EAAa,IAAM2B,CACvB,CAAC,CACL,CAAC,CACD,OAASpC,EAAO,CACZ,cAAQ,MAAM,+BAAgCA,CAAK,EAC7CA,CACV,CACJ,CAEA,MAAM,gBAAgBM,EAAWyB,EAASC,EAAS,CAE/C,KAAK,OAAO,MAAQD,EACpB,KAAK,OAAO,OAASC,EACrB,KAAK,IAAI,UAAY,QACrB,KAAK,IAAI,SAAS,EAAG,EAAGD,EAASC,CAAO,EAGxC,KAAK,IAAI,sBAAwB,GACjC,KAAK,IAAI,sBAAwB,OAGjC,MAAMK,EAAQ,KAAK,IAAIN,EAAUzB,EAAU,MAAO0B,EAAU1B,EAAU,MAAM,EACtEgC,EAAUhC,EAAU,MAAQ+B,EAC5BE,EAAUjC,EAAU,OAAS+B,EAC7BG,GAAWT,EAAUO,GAAW,EAChCG,GAAWT,EAAUO,GAAW,EAEtC,KAAK,IAAI,UAAUjC,EAAWkC,EAASC,EAASH,EAASC,CAAO,EAGhE,MAAMG,EAAU,KAAK,IAAI,aAAa,EAAG,EAAGX,EAASC,CAAO,EACtDW,EAASD,EAAQ,KAGvB,QAAStC,EAAI,EAAGA,EAAIuC,EAAO,OAAQvC,GAAK,EAAG,CAKvC,IAAIwC,GAHS,KAAQD,EAAOvC,CAAC,EAAI,KAAQuC,EAAOvC,EAAI,CAAC,EAAI,KAAQuC,EAAOvC,EAAI,CAAC,EAGrD,KAAO,IAAO,IAGlCwC,EAAW,IACXA,EAAW,IACJA,EAAW,KAClBA,EAAW,GAGfA,EAAW,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKA,CAAQ,CAAC,EAE9CD,EAAOvC,CAAC,EAAIwC,EACZD,EAAOvC,EAAI,CAAC,EAAIwC,EAChBD,EAAOvC,EAAI,CAAC,EAAIwC,CACpB,CAEA,YAAK,IAAI,aAAaF,EAAS,EAAG,CAAC,EAC5B,KAAK,MAChB,CAEA,MAAM,uBAAuBpC,EAAW,CACpC,GAAI,CAEA,KAAK,OAAO,MAAQA,EAAU,MAC9B,KAAK,OAAO,OAASA,EAAU,OAC/B,KAAK,IAAI,UAAUA,EAAW,EAAG,CAAC,EAGlC,MAAMqC,EADU,KAAK,IAAI,aAAa,EAAG,EAAGrC,EAAU,MAAOA,EAAU,MAAM,EACtD,KAEvB,QAAQ,IAAI,wBAAwBA,EAAU,KAAK,IAAIA,EAAU,MAAM,EAAE,EAGzE,MAAMuC,EAAOvC,EAAU,MAAQA,EAAU,OACnCwC,EAAY,IAAI,aAAa,EAAID,CAAI,EAIrCE,EAAO,KAAK,OAAO,UAAY,CAAC,KAAO,KAAO,IAAK,EACnDC,EAAM,KAAK,OAAO,SAAW,CAAC,KAAO,KAAO,IAAK,EAEvD,QAAS5C,EAAI,EAAGA,EAAIyC,EAAMzC,IAAK,CAC3B,MAAM6C,EAAa7C,EAAI,EAEjB8C,EAAI,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKP,EAAOM,CAAU,CAAC,CAAC,EACjDE,EAAI,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKR,EAAOM,EAAa,CAAC,CAAC,CAAC,EACrDG,EAAI,KAAK,IAAI,EAAG,KAAK,IAAI,IAAKT,EAAOM,EAAa,CAAC,CAAC,CAAC,EAE3DH,EAAU1C,CAAC,GAAK8C,EAAI,IAAQH,EAAK,CAAC,GAAKC,EAAI,CAAC,EAC5CF,EAAUD,EAAOzC,CAAC,GAAK+C,EAAI,IAAQJ,EAAK,CAAC,GAAKC,EAAI,CAAC,EACnDF,EAAU,EAAID,EAAOzC,CAAC,GAAKgD,EAAI,IAAQL,EAAK,CAAC,GAAKC,EAAI,CAAC,CAC3D,CAGA,QAAS5C,EAAI,EAAGA,EAAI0C,EAAU,OAAQ1C,IAC7B,SAAS0C,EAAU1C,CAAC,CAAC,IACtB,QAAQ,MAAM,0BAA0BA,CAAC,KAAK0C,EAAU1C,CAAC,CAAC,EAAE,EAC5D0C,EAAU1C,CAAC,EAAI,GAIvB,MAAMiD,EAAS,IAAIC,GAAW,UAAWR,EAAW,CAAC,EAAG,EAAGxC,EAAU,OAAQA,EAAU,KAAK,CAAC,EAC7F,eAAQ,IAAI,6BAA8B+C,EAAO,KAAM,QAASA,EAAO,IAAI,EACpEA,CACX,OAASrD,EAAO,CACZ,cAAQ,MAAM,mCAAoCA,CAAK,EACjD,IAAI,MAAM,yBAAyBA,EAAM,OAAO,EAAE,CAC5D,CACJ,CAEA,MAAM,qBAAqBuD,EAAcC,EAAUC,EAAW/C,EAAO,CACjE,GAAI,CAEA,IAAIgD,EAAQC,EAAOC,EAEnB,GAAIL,EAAa,KAAK,SAAW,EAAG,CAEhC,KAAM,CAACM,EAAWC,EAAUC,EAAGC,CAAC,EAAIT,EAAa,KACjDG,EAASK,EACTJ,EAAQK,EACRJ,EAAOL,EAAa,IACxB,SAAWA,EAAa,KAAK,SAAW,EAAG,CAEvC,KAAM,CAACM,EAAWE,EAAGC,CAAC,EAAIT,EAAa,KACvCG,EAASK,EACTJ,EAAQK,EACRJ,EAAOL,EAAa,IACxB,KACI,OAAM,IAAI,MAAM,wCAAwCA,EAAa,IAAI,EAAE,EAG/E,QAAQ,IAAI,2BAA2BG,CAAM,IAAIC,CAAK,mBAAmBD,EAASC,CAAK,EAAE,EACzF,QAAQ,IAAI,sBAAuBJ,EAAa,IAAI,EACpD,QAAQ,IAAI,eAAgBK,EAAK,MAAM,EAGvC,MAAMK,EAAU,IAAI,aAAaP,EAASC,CAAK,EAC/C,QAASvD,EAAI,EAAGA,EAAIsD,EAASC,EAAOvD,IAChC6D,EAAQ7D,CAAC,EAAI,GAAK,EAAI,KAAK,IAAI,CAACwD,EAAKxD,CAAC,CAAC,GAI3C,MAAM8D,EAAS,IAAI,WAAWR,EAASC,CAAK,EAC5C,IAAIQ,EAAiB,EACrB,QAAS/D,EAAI,EAAGA,EAAIsD,EAASC,EAAOvD,IAChC8D,EAAO9D,CAAC,EAAI6D,EAAQ7D,CAAC,EAAI,KAAK,OAAO,cAAgB,IAAM,EACvD8D,EAAO9D,CAAC,IAAM,KAAK+D,IAE3B,QAAQ,IAAI,oBAAoBA,CAAc,WAAWT,EAASC,CAAK,MAAMQ,GAAkBT,EAASC,GAAS,KAAK,QAAQ,CAAC,CAAC,IAAI,EACpI,QAAQ,IAAI,wBAAwB,KAAK,OAAO,aAAa,EAAE,EAG/D,MAAMS,EAAc,CAAA,EACpB,QAAShE,EAAI,EAAGA,EAAI,KAAK,IAAI,GAAI6D,EAAQ,MAAM,EAAG7D,GAAK,KAAK,MAAM6D,EAAQ,OAAS,EAAE,EACjFG,EAAY,KAAKH,EAAQ7D,CAAC,EAAE,QAAQ,CAAC,CAAC,EAE1C,QAAQ,IAAI,6BAA8BgE,CAAW,EAGzD,MAAM7D,EAAQ,CAAA,EACR8D,EAAU,IAAI,IACpB,IAAIC,EAAc,EACdC,EAAkB,EAClBC,EAAkB,EAClBC,EAAiB,EAErB,QAASC,EAAI,EAAGA,EAAIhB,GAAUY,EAAc,KAAK,OAAO,sBAAuBI,IAC3E,QAASC,EAAI,EAAGA,EAAIhB,GAASW,EAAc,KAAK,OAAO,sBAAuBK,IAAK,CAC/E,MAAMC,EAAMF,EAAIf,EAAQgB,EACxB,GAAIT,EAAOU,CAAG,IAAM,KAAO,CAACP,EAAQ,IAAIO,CAAG,EAAG,CAC1C,MAAMC,EAAM,KAAK,uBAAuBX,EAAQP,EAAOD,EAAQiB,EAAGD,EAAGL,EAASJ,CAAO,EACrF,GAAIY,EAEA,GADAN,IACIM,EAAI,OAAS,KAAK,OAAO,kBAAmB,CAE5CA,EAAI,OAASA,EAAI,OAAO,IAAIC,GAAK,CAC7B,KAAK,MAAMA,EAAE,CAAC,EAAIpE,CAAK,EACvB,KAAK,MAAMoE,EAAE,CAAC,EAAIpE,CAAK,CACvD,CAA6B,EAGD,MAAMqE,EAAO,KAAK,qBAAqBF,EAAI,MAAM,EAC7CE,EAAO,KAAK,OAAO,iBACnBxE,EAAM,KAAKsE,CAAG,EACdP,MAEAG,IACA,QAAQ,IAAI,+BAA+BM,CAAI,MAAM,KAAK,OAAO,eAAe,EAAE,EAE1F,MACIP,IACA,QAAQ,IAAI,gCAAgCK,EAAI,MAAM,QAAQ,CAAC,CAAC,MAAM,KAAK,OAAO,iBAAiB,EAAE,CAGjH,CACJ,CAGJ,eAAQ,IAAI,sBAAsBN,CAAe,sBAAsBD,CAAW,cAAcE,CAAe,uBAAuBC,CAAc,mBAAmB,EAEhKlE,CACP,OAASP,EAAO,CACZ,cAAQ,MAAM,iCAAkCA,CAAK,EAC/C,IAAI,MAAM,qCAAqCA,EAAM,OAAO,EAAE,CACxE,CACJ,CAEA,uBAAuBkE,EAAQP,EAAOD,EAAQsB,EAAQC,EAAQZ,EAASJ,EAAS,CAC5E,MAAMiB,EAAQ,CAAC,CAACF,EAAQC,CAAM,CAAC,EACzBE,EAAS,CAAA,EACf,IAAIC,EAAa,EACbC,EAAQ,EACZ,MAAMC,EAAqB,IAGrBC,EAAWN,EAAStB,EAAQqB,EAClC,GAAIX,EAAQ,IAAIkB,CAAQ,GAAKrB,EAAOqB,CAAQ,IAAM,IAC9C,OAAO,KAKX,MAAMC,EAAe,IAAI,IAGzB,IAFAA,EAAa,IAAID,CAAQ,EAElBL,EAAM,OAAS,GAAKC,EAAO,OAASG,GAAoB,CAC3D,KAAM,CAACX,EAAGD,CAAC,EAAIQ,EAAM,IAAG,EAClBN,EAAMF,EAAIf,EAAQgB,EAExB,GAAI,CAAAN,EAAQ,IAAIO,CAAG,IACnBP,EAAQ,IAAIO,CAAG,EAEXV,EAAOU,CAAG,IAAM,KAAK,CACrBO,EAAO,KAAK,CAACR,EAAGD,CAAC,CAAC,EAClBU,GAAcnB,EAAQW,CAAG,EACzBS,IAGA,MAAMI,GAAY,CACd,CAACd,EAAGD,EAAI,CAAC,EACT,CAACC,EAAGD,EAAI,CAAC,EACT,CAACC,EAAI,EAAGD,CAAC,EACT,CAACC,EAAI,EAAGD,CAAC,CAC7B,EAEgB,SAAW,CAACgB,EAAIC,CAAE,IAAKF,GACnB,GAAIC,GAAM,GAAKA,EAAK/B,GAASgC,GAAM,GAAKA,EAAKjC,EAAQ,CACjD,MAAMkC,EAAOD,EAAKhC,EAAQ+B,EAC1B,GAAI,CAACrB,EAAQ,IAAIuB,CAAI,GAAK1B,EAAO0B,CAAI,IAAM,IAAK,CAG5C,MAAMC,GAAQ,KAAK,IAAIF,EAAKV,CAAM,EAC5Ba,EAAQ,KAAK,IAAIJ,EAAKV,CAAM,GAG9Ba,GAAQnC,EAAS,KAAQoC,EAAQnC,EAAQ,MACzCuB,EAAM,KAAK,CAACQ,EAAIC,CAAE,CAAC,EACnBH,EAAa,IAAII,CAAI,EAE7B,CACJ,CAER,CACJ,CAEA,GAAIT,EAAO,OAAS,KAAK,OAAO,gBAC5B,OAAO,KAIX,MAAMY,EAAKZ,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,EACzBkB,EAAKb,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,EAC/B,IAAImB,EAAO,KAAK,IAAI,GAAGF,CAAE,EACrBG,EAAO,KAAK,IAAI,GAAGH,CAAE,EACrBI,EAAO,KAAK,IAAI,GAAGH,CAAE,EACrBI,EAAO,KAAK,IAAI,GAAGJ,CAAE,EAGL,KAAK,OAAO,oBAChC,MAAMK,GAAYH,EAAOD,GAAQ,GAC3BK,GAAYF,EAAOD,GAAQ,GAEjC,OAAAF,EAAO,KAAK,IAAI,EAAGA,EAAOI,CAAQ,EAClCH,EAAO,KAAK,IAAIvC,EAAQ,EAAGuC,EAAOG,CAAQ,EAC1CF,EAAO,KAAK,IAAI,EAAGA,EAAOG,CAAQ,EAClCF,EAAO,KAAK,IAAI1C,EAAS,EAAG0C,EAAOE,CAAQ,EAEpC,CACH,OAAQ,CACJ,CAACL,EAAME,CAAI,EACX,CAACD,EAAMC,CAAI,EACX,CAACD,EAAME,CAAI,EACX,CAACH,EAAMG,CAAI,CAC3B,EACY,MAAOhB,EAAaC,CAChC,CACI,CAEA,qBAAqBF,EAAQ,CACzB,IAAIJ,EAAO,EACX,MAAM,EAAII,EAAO,OACjB,QAAS/E,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMmG,GAAKnG,EAAI,GAAK,EACpB2E,GAAQI,EAAO/E,CAAC,EAAE,CAAC,EAAI+E,EAAOoB,CAAC,EAAE,CAAC,EAClCxB,GAAQI,EAAOoB,CAAC,EAAE,CAAC,EAAIpB,EAAO/E,CAAC,EAAE,CAAC,CACtC,CACA,OAAO,KAAK,IAAI2E,CAAI,EAAI,CAC5B,CAGA,MAAM,oBAAoBzE,EAAWI,EAAO,CACxC,QAAQ,IAAI,wCAAwC,EAGpD,KAAK,OAAO,MAAQJ,EAAU,MAC9B,KAAK,OAAO,OAASA,EAAU,OAC/B,KAAK,IAAI,UAAUA,EAAW,EAAG,CAAC,EAGlC,MAAMqC,EADU,KAAK,IAAI,aAAa,EAAG,EAAGrC,EAAU,MAAOA,EAAU,MAAM,EACtD,KAGjBkG,EAAY,IAAI,WAAWlG,EAAU,MAAQA,EAAU,MAAM,EACnE,QAASF,EAAI,EAAGA,EAAIoG,EAAU,OAAQpG,IAAK,CACvC,MAAMwE,EAAMxE,EAAI,EACVqG,EAAO,KAAQ9D,EAAOiC,CAAG,EAAI,KAAQjC,EAAOiC,EAAM,CAAC,EAAI,KAAQjC,EAAOiC,EAAM,CAAC,EACnF4B,EAAUpG,CAAC,EAAIqG,EAAO,IAAM,IAAM,CACtC,CAGA,MAAMlG,EAAQ,CAAA,EACR8D,EAAU,IAAI,IAEpB,QAASK,EAAI,GAAIA,EAAIpE,EAAU,OAAS,GAAIoE,GAAK,GAC7C,QAASC,EAAI,GAAIA,EAAIrE,EAAU,MAAQ,GAAIqE,GAAK,GAAI,CAChD,MAAMC,EAAMF,EAAIpE,EAAU,MAAQqE,EAClC,GAAI6B,EAAU5B,CAAG,IAAM,KAAO,CAACP,EAAQ,IAAIO,CAAG,EAAG,CAE7C,IAAIqB,EAAOtB,EAAGuB,EAAOvB,EAAGwB,EAAOzB,EAAG0B,EAAO1B,EAGzC,MAAMQ,EAAQ,CAAC,CAACP,EAAGD,CAAC,CAAC,EACrB,KAAOQ,EAAM,OAAS,GAAKb,EAAQ,KAAO,KAAO,CAC7C,KAAM,CAACqC,EAAIC,CAAE,EAAIzB,EAAM,IAAG,EACpB0B,EAAOD,EAAKrG,EAAU,MAAQoG,EAEhCA,EAAK,GAAKA,GAAMpG,EAAU,OAASqG,EAAK,GAAKA,GAAMrG,EAAU,QAC7D+D,EAAQ,IAAIuC,CAAI,GAAKJ,EAAUI,CAAI,IAAM,MAE7CvC,EAAQ,IAAIuC,CAAI,EAChBX,EAAO,KAAK,IAAIA,EAAMS,CAAE,EACxBR,EAAO,KAAK,IAAIA,EAAMQ,CAAE,EACxBP,EAAO,KAAK,IAAIA,EAAMQ,CAAE,EACxBP,EAAO,KAAK,IAAIA,EAAMO,CAAE,EAGxBzB,EAAM,KAAK,CAACwB,EAAK,EAAGC,CAAE,EAAG,CAACD,EAAK,EAAGC,CAAE,EAAG,CAACD,EAAIC,EAAK,CAAC,EAAG,CAACD,EAAIC,EAAK,CAAC,CAAC,EACrE,CAGKT,EAAOD,EAAQ,IAAOG,EAAOD,EAAQ,IACtC5F,EAAM,KAAK,CACP,OAAQ,CACJ,CAAC0F,EAAOvF,EAAOyF,EAAOzF,CAAK,EAC3B,CAACwF,EAAOxF,EAAOyF,EAAOzF,CAAK,EAC3B,CAACwF,EAAOxF,EAAO0F,EAAO1F,CAAK,EAC3B,CAACuF,EAAOvF,EAAO0F,EAAO1F,CAAK,CAC3D,EAC4B,MAAO,EACnC,CAAyB,CAET,CACJ,CAGJ,OAAOH,CACX,CAEA,UAAUA,EAAO,CAEb,GAAIA,EAAM,SAAW,EAAG,OAAOA,EAG/BA,EAAM,KAAK,CAACsG,EAAGzD,IAAM,CACjB,MAAM0D,EAAKD,EAAE,OAAO,CAAC,EAAE,CAAC,EAClBE,EAAK3D,EAAE,OAAO,CAAC,EAAE,CAAC,EACxB,OAAO0D,EAAKC,CAChB,CAAC,EAGD,QAAS3G,EAAIG,EAAM,OAAS,EAAGH,EAAI,EAAGA,IAClC,QAASmG,EAAInG,EAAI,EAAGmG,GAAK,IAEjB,KAAK,IAAIhG,EAAMgG,EAAI,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,EAAIhG,EAAMgG,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,EAAI,IAC9DhG,EAAMgG,EAAI,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,EAAIhG,EAAMgG,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,GAH5BA,IAG+B,CAEnD,MAAMS,EAAMzG,EAAMgG,CAAC,EACnBhG,EAAMgG,CAAC,EAAIhG,EAAMgG,EAAI,CAAC,EACtBhG,EAAMgG,EAAI,CAAC,EAAIS,CACnB,CAMR,OAAOzG,CACX,CAEA,MAAM,cAAcD,EAAWC,EAAO,CAClC,GAAI,CAAC,KAAK,mBACN,MAAM,IAAI,MAAM,8BAA8B,EAGlD,MAAMC,EAAU,CAAA,EAGVqD,EAAY,KAAK,OAAO,cAE9B,QAASzD,EAAI,EAAGA,EAAIG,EAAM,OAAQH,GAAKyD,EAAW,CAC9C,MAAMoD,EAAa1G,EAAM,MAAMH,EAAG,KAAK,IAAIA,EAAIyD,EAAWtD,EAAM,MAAM,CAAC,EACjE2G,EAAe,MAAM,KAAK,aAAa5G,EAAW2G,CAAU,EAClEzG,EAAQ,KAAK,GAAG0G,CAAY,CAChC,CAEA,OAAO1G,CACX,CAEA,MAAM,aAAaF,EAAWC,EAAO,CACjC,MAAMC,EAAU,CAAA,EAGV2G,EAAgB,CAAA,EAChBC,EAAc,CAAA,EAEpB,UAAWvC,KAAOtE,EAAO,CACrB,MAAM8G,EAAU,MAAM,KAAK,mBAAmB/G,EAAWuE,CAAG,EACtDnE,EAAQ2G,EAAQ,MAAQA,EAAQ,OACtCF,EAAc,KAAKE,CAAO,EAC1BD,EAAY,KAAK1G,CAAK,CAC1B,CAGA,MAAM4G,EAAU,MAAM,KAAK,CAAC,OAAQ/G,EAAM,MAAM,EAAG,CAACgH,EAAGnH,IAAMA,CAAC,EACzD,KAAK,CAACyG,EAAGzD,IAAMgE,EAAYP,CAAC,EAAIO,EAAYhE,CAAC,CAAC,EAGnD,UAAWwB,KAAO0C,EAAS,CACvB,MAAMD,EAAUF,EAAcvC,CAAG,EAC3BC,EAAMtE,EAAMqE,CAAG,EAGfjE,EAAc,MAAM,KAAK,yBAAyB0G,CAAO,EAGzDzG,EAAQ,CAAE,CAAC,KAAK,mBAAmB,WAAW,CAAC,CAAC,EAAGD,CAAW,EAC9DE,EAAS,MAAM,KAAK,mBAAmB,IAAID,CAAK,EAGhD4G,EAAS,MAAM,KAAK,kBAAkB3G,EAAO,KAAK,mBAAmB,YAAY,CAAC,CAAC,CAAC,EAEtF2G,EAAO,OAAS,KAAK,OAAO,YAC5BhH,EAAQ,KAAK,CACT,KAAMgH,EAAO,KACb,WAAYA,EAAO,MACnB,IAAK3C,EAAI,MAC7B,CAAiB,CAET,CAEA,OAAOrE,CACX,CAEA,MAAM,mBAAmBF,EAAWuE,EAAK,CAErC,MAAMM,EAASN,EAAI,OAGJ,KAAK,KAAK,KAAK,IAAIM,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAG,CAAC,EACzC,KAAK,IAAIA,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAG,CAAC,CAAC,EAChD,KAAK,KAAK,KAAK,IAAIA,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAG,CAAC,EACzC,KAAK,IAAIA,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAG,CAAC,CAAC,EAG/C,KAAK,KAAK,KAAK,IAAIA,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAG,CAAC,EACzC,KAAK,IAAIA,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAG,CAAC,CAAC,EAChD,KAAK,KAAK,KAAK,IAAIA,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAG,CAAC,EACzC,KAAK,IAAIA,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAG,CAAC,CAAC,EAKhE,MAAMc,EAAO,KAAK,IAAI,GAAGd,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,CAAC,EACxCoB,EAAO,KAAK,IAAI,GAAGf,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,CAAC,EACxCqB,EAAO,KAAK,IAAI,GAAGhB,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,CAAC,EACxCsB,EAAO,KAAK,IAAI,GAAGjB,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,CAAC,EAExCnB,EAAQuC,EAAOD,EACfvC,EAAS0C,EAAOD,EAStB,GAPA,KAAK,OAAO,MAAQxC,EACpB,KAAK,OAAO,OAASD,EAErB,KAAK,IAAI,UAAUpD,EAAW2F,EAAME,EAAMxC,EAAOD,EAAQ,EAAG,EAAGC,EAAOD,CAAM,EAIxEA,EAAS,EAAMC,GAAS,IAAK,CAG7B,MAAM8D,EAAgB,SAAS,cAAc,QAAQ,EAC/CC,EAAaD,EAAc,WAAW,KAAM,CAAE,mBAAoB,GAAM,EAC9EA,EAAc,MAAQ/D,EACtB+D,EAAc,OAAS9D,EACvB+D,EAAW,UAAUhE,EAAS,EAAGC,EAAQ,CAAC,EAC1C+D,EAAW,OAAO,KAAK,GAAK,CAAC,EAC7BA,EAAW,UAAU,KAAK,OAAQ,CAAC/D,EAAQ,EAAG,CAACD,EAAS,CAAC,EAGzD,KAAK,OAAO,MAAQA,EACpB,KAAK,OAAO,OAASC,EACrB,KAAK,IAAI,UAAU8D,EAAe,EAAG,CAAC,CAC1C,CAEA,MAAME,EAAa,IAAI,MACvB,OAAO,IAAI,QAASzF,GAAY,CAC5B,KAAK,OAAO,OAAQC,GAAS,CACzB,MAAMC,EAAM,IAAI,gBAAgBD,CAAI,EACpCwF,EAAW,OAAS,IAAM,CACtB,IAAI,gBAAgBvF,CAAG,EACvBF,EAAQyF,CAAU,CACtB,EACAA,EAAW,IAAMvF,CACrB,CAAC,CACL,CAAC,CACL,CAEA,MAAM,yBAAyB9B,EAAW,CAGtC,MAAMmD,EAAY,KAAK,OAAO,iBACxBD,EAAW,KAAK,OAAO,gBAGvBO,EAAIzD,EAAU,OAEdI,EADIJ,EAAU,MACFyD,EAGlB,IAAI6D,EACA,KAAK,KAAKnE,EAAY/C,CAAK,EAAI8C,EAC/BoE,EAAWpE,EAEXoE,EAAW,KAAK,KAAKnE,EAAY/C,CAAK,EAI1C,KAAK,OAAO,MAAQkH,EACpB,KAAK,OAAO,OAASnE,EACrB,KAAK,IAAI,UAAY,QACrB,KAAK,IAAI,SAAS,EAAG,EAAGmE,EAAUnE,CAAS,EAC3C,KAAK,IAAI,UAAUnD,EAAW,EAAG,EAAGsH,EAAUnE,CAAS,EAGvD,MAAMd,EADU,KAAK,IAAI,aAAa,EAAG,EAAGiF,EAAUnE,CAAS,EACxC,KAGjBoE,EAAc,IAAI,aAAa,EAAapE,EAAYD,CAAQ,EAGtE,QAASsE,EAAI,EAAGA,EAAI,EAAYA,IAC5B,QAASpD,EAAI,EAAGA,EAAIjB,EAAWiB,IAC3B,QAASC,EAAI,EAAGA,EAAIiD,EAAUjD,IAAK,CAC/B,MAAMoD,GAAUrD,EAAIkD,EAAWjD,GAAK,EAAImD,EAClCE,EAASF,EAAIrE,EAAYD,EAAWkB,EAAIlB,EAAWmB,EAEzDkD,EAAYG,CAAM,GAAKrF,EAAOoF,CAAM,EAAI,IAAQ,KAAK,OAAO,UAAY,KAAK,OAAO,OACxF,CAIR,OAAO,IAAIzE,GAAW,UAAWuE,EAAa,CAAC,EAAG,EAAYpE,EAAWD,CAAQ,CAAC,CACtF,CAEA,MAAM,kBAAkBD,EAAc,CAElC,KAAM,CAACM,EAAWoE,EAAQC,CAAS,EAAI3E,EAAa,KAC9C4E,EAAQ5E,EAAa,KAGrB6E,EAAW,CAAA,EACXC,EAAS,CAAA,EAEf,QAASC,EAAI,EAAGA,EAAIL,EAAQK,IAAK,CAC7B,IAAIC,EAAS,EACTnH,EAAS+G,EAAMG,EAAIJ,CAAS,EAEhC,QAASJ,EAAI,EAAGA,EAAII,EAAWJ,IAAK,CAChC,MAAMU,EAAML,EAAMG,EAAIJ,EAAYJ,CAAC,EAC/BU,EAAMpH,IACNA,EAASoH,EACTD,EAAST,EAEjB,CACAM,EAAS,KAAKG,CAAM,EACpBF,EAAO,KAAKjH,CAAM,CACtB,CAGA,MAAMqH,EAAU,CAAA,EACVC,EAAgB,CAAA,EACtB,IAAIC,EAAU,GAEd,QAASvI,EAAI,EAAGA,EAAIgI,EAAS,OAAQhI,IAAK,CACtC,MAAMwE,EAAMwD,EAAShI,CAAC,EAGlBwE,IAAQ,GAAKA,IAAQ+D,GACjB/D,EAAM,KAAK,SAAS,SACpB6D,EAAQ,KAAK,KAAK,SAAS7D,CAAG,CAAC,EAC/B8D,EAAc,KAAKL,EAAOjI,CAAC,CAAC,GAGpCuI,EAAU/D,CACd,CAEA,MAAO,CACH,KAAM6D,EAAQ,KAAK,EAAE,EACrB,MAAOC,EAAc,OAAS,EAC1BA,EAAc,OAAO,CAAC7B,EAAGzD,IAAMyD,EAAIzD,CAAC,EAAIsF,EAAc,OAAS,CAC/E,CACI,CAEA,eAAelI,EAAS,CACpB,GAAIA,EAAQ,SAAW,EAAG,OAAOA,EAGjC,IAAIoI,EAAkB,KAAK,cAAcpI,CAAO,EAChD,GAAIoI,EAAgB,SAAW,EAAG,OAAOA,EAGrC,KAAK,OAAO,eACZA,EAAkB,KAAK,uBAAuBA,CAAe,GAIjE,MAAMC,EAAUD,EAAgB,IAAI1F,GAAK,CACrC,MAAM8C,EAAK9C,EAAE,IAAI,IAAI4B,GAAKA,EAAE,CAAC,CAAC,EAC9B,OAAO,KAAK,IAAI,GAAGkB,CAAE,EAAI,KAAK,IAAI,GAAGA,CAAE,CAC3C,CAAC,EACK8C,EAAYD,EAAQ,OAAO,CAAC,EAAGzF,IAAM,EAAIA,CAAC,EAAIyF,EAAQ,OAGtDE,EAAQ,CAAA,EACd,IAAIC,EAAc,CAACJ,EAAgB,CAAC,CAAC,EAErC,QAASxI,EAAI,EAAGA,EAAIwI,EAAgB,OAAQxI,IAAK,CAC7C,MAAM6I,EAAUL,EAAgBxI,CAAC,EAC3B8I,EAAWN,EAAgBxI,EAAI,CAAC,EAEhC+I,EAAQ,KAAK,IAAI,GAAGD,EAAS,IAAI,IAAIpE,GAAKA,EAAE,CAAC,CAAC,CAAC,EAC/CsE,EAAQ,KAAK,IAAI,GAAGH,EAAQ,IAAI,IAAInE,GAAKA,EAAE,CAAC,CAAC,CAAC,EAE9CuE,EAAc,KAAK,IAAID,EAAQD,CAAK,EACpCG,EAAYR,EAAY,KAAK,OAAO,uBAEtCO,GAAeC,EACfN,EAAY,KAAKC,CAAO,GAExBF,EAAM,KAAKC,CAAW,EACtBA,EAAc,CAACC,CAAO,EAE9B,CAEID,EAAY,OAAS,GACrBD,EAAM,KAAKC,CAAW,EAI1B,MAAMO,EAAgB,CAAA,EACtB,UAAWpJ,KAAQ4I,EAAO,CAEtB5I,EAAK,KAAK,CAAC0G,EAAGzD,IAAM,CAChB,MAAMoG,EAAK,KAAK,IAAI,GAAG3C,EAAE,IAAI,IAAI/B,GAAKA,EAAE,CAAC,CAAC,CAAC,EACrC2E,EAAK,KAAK,IAAI,GAAGrG,EAAE,IAAI,IAAI0B,GAAKA,EAAE,CAAC,CAAC,CAAC,EAC3C,OAAO0E,EAAKC,CAChB,CAAC,EAGD,MAAMvJ,EAAOC,EAAK,IAAI+C,GAAKA,EAAE,IAAI,EAAE,KAAK,GAAG,EACrCwG,EAAgBvJ,EAAK,OAAO,CAACwJ,EAAKzG,IAAMyG,EAAMzG,EAAE,WAAY,CAAC,EAAI/C,EAAK,OAGtEyJ,EAAYzJ,EAAK,QAAQ+C,GAAKA,EAAE,GAAG,EACnC6C,EAAK6D,EAAU,IAAI9E,GAAKA,EAAE,CAAC,CAAC,EAC5BkB,EAAK4D,EAAU,IAAI9E,GAAKA,EAAE,CAAC,CAAC,EAElCyE,EAAc,KAAK,CACf,KAAMrJ,EACN,WAAYwJ,EACZ,IAAK,CACD,CAAC,KAAK,IAAI,GAAG3D,CAAE,EAAG,KAAK,IAAI,GAAGC,CAAE,CAAC,EACjC,CAAC,KAAK,IAAI,GAAGD,CAAE,EAAG,KAAK,IAAI,GAAGC,CAAE,CAAC,EACjC,CAAC,KAAK,IAAI,GAAGD,CAAE,EAAG,KAAK,IAAI,GAAGC,CAAE,CAAC,EACjC,CAAC,KAAK,IAAI,GAAGD,CAAE,EAAG,KAAK,IAAI,GAAGC,CAAE,CAAC,CACrD,CACA,CAAa,CACL,CAEA,OAAOuD,CACX,CAEA,cAAc/I,EAAS,CAEnB,MAAMqJ,EAAqB,KAAK,OAAO,WACvC,OAAOrJ,EAAQ,OAAOgH,GAEdA,EAAO,WAAaqC,EACb,GAIJrC,EAAO,MAAQA,EAAO,KAAK,KAAI,EAAG,OAAS,CACrD,CACL,CAEA,MAAM,WAAWsC,EAAS,CACtB,MAAMC,EAAc,MAAMD,EAAQ,YAAW,EACvCE,EAAM,MAAMC,GAAAA,YAAqB,CAAE,KAAMF,CAAW,CAAE,EAAE,QACxDG,EAAWF,EAAI,SACfG,EAAa,CAAA,EAEnB,QAASC,EAAU,EAAGA,GAAWF,EAAUE,IAAW,CAClD,MAAMC,EAAO,MAAML,EAAI,QAAQI,CAAO,EAChCE,EAAWD,EAAK,YAAY,CAAE,MAAO,CAAG,CAAE,EAG1CE,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAMD,EAAO,WAAW,IAAI,EAClCA,EAAO,MAAQD,EAAS,MACxBC,EAAO,OAASD,EAAS,OAEzB,MAAMD,EAAK,OAAO,CACd,cAAeG,EACf,SAAUF,CAC1B,CAAa,EAAE,QAGH,MAAMnI,EAAO,MAAM,IAAI,QAAQD,GAAWqI,EAAO,OAAOrI,CAAO,CAAC,EAG1DuI,EAAc,MAAM,KAAK,QAAQtI,CAAI,EAE3CgI,EAAW,KAAK,CACZ,KAAMC,EACN,QAASK,CACzB,CAAa,CACL,CAEA,OAAON,CACX,CAEA,MAAM,YAAYhI,EAAM,CACpB,OAAO,IAAI,QAAQ,CAACD,EAASwI,IAAW,CACpC,MAAMC,EAAM,IAAI,MACVvI,EAAM,IAAI,gBAAgBD,CAAI,EAEpCwI,EAAI,OAAS,IAAM,CACf,IAAI,gBAAgBvI,CAAG,EACvBF,EAAQyI,CAAG,CACf,EAEAA,EAAI,QAAU,IAAM,CAChB,IAAI,gBAAgBvI,CAAG,EACvBsI,EAAO,IAAI,MAAM,sBAAsB,CAAC,CAC5C,EAEAC,EAAI,IAAMvI,CACd,CAAC,CACL,CAEA,uBAAuB5B,EAAS,CAE5B,OAAOA,EAAQ,IAAIgH,GAAU,CACzB,IAAItH,EAAOsH,EAAO,KAGlBtH,EAAOA,EACF,QAAQ,kBAAmB,OAAO,EAClC,QAAQ,kBAAmB,OAAO,EAClC,QAAQ,kBAAmB,OAAO,EAClC,QAAQ,OAAQ,GAAG,EACnB,QAAQ,wBAAyB,OAAO,EACxC,KAAI,EAGT,MAAM0K,EAAc,CAChB,IAAO,MACP,KAAQ,OACR,KAAQ,OACR,MAAS,QACT,KAAQ,OACR,KAAO,KACP,MAAO,MACP,MAAO,IACvB,EAEY,SAAW,CAACC,EAAOC,CAAO,IAAK,OAAO,QAAQF,CAAW,EAAG,CACxD,MAAMG,EAAQ,IAAI,OAAOF,EAAO,IAAI,EACpC3K,EAAOA,EAAK,QAAQ6K,EAAOD,CAAO,CACtC,CAEA,MAAO,CACH,GAAGtD,EACH,KAAMtH,CACtB,CACQ,CAAC,CACL,CACJ,CAGO,MAAM8K,GAAsB,IAAIxL,GCxqCvCJ,GAAAA,oBAA6B,UAAY,oCAGzCC,GAAQ,KAAK,UAAY,0BACzBA,GAAQ,KAAK,WAAa,EAG1B,MAAMC,GAAa,0BAmBbC,EAAS,CAEX,mBAAoB,KAEpB,cAAe,IACf,kBAAmB,IACnB,oBAAqB,IAIrB,WAAY,IAGZ,KAAM,CAAC,KAAO,KAAO,IAAK,EAC1B,IAAK,CAAC,KAAO,KAAO,IAAK,CAC7B,EAEO,MAAM0L,EAAY,CACrB,aAAc,CACV,KAAK,iBAAmB,KACxB,KAAK,mBAAqB,KAC1B,KAAK,SAAW,CAAA,EAChB,KAAK,YAAc,GACnB,KAAK,OAAS,KACd,KAAK,IAAM,KACX,KAAK,YAAc,CACf,UAAW,iCACX,YAAa,oCACb,WAAY,aACxB,CACI,CAEA,eAAexL,EAAQ,CAEfA,EAAO,YAAW,KAAK,YAAY,UAAYA,EAAO,WACtDA,EAAO,cAAa,KAAK,YAAY,YAAcA,EAAO,aAC1DA,EAAO,aAAY,KAAK,YAAY,WAAaA,EAAO,YAG5D,KAAK,YAAc,EACvB,CAEA,MAAM,WAAWC,EAAkB,CAE/B,KAAK,YAAc,GAEnB,GAAI,CAEA,KAAK,OAAS,SAAS,cAAc,QAAQ,EAC7C,KAAK,IAAM,KAAK,OAAO,WAAW,KAAM,CAAE,mBAAoB,GAAM,EAGpEA,GAAA,MAAAA,EAAmB,CAAE,OAAQ,UAAW,QAAS,wBAAyB,SAAU,KACpF,MAAM,KAAK,eAAc,EAGzB,MAAMC,EAAgB,KAAK,YAAY,UAAU,QAAQ,QAAS,EAAE,EAAE,QAAQ,KAAM,GAAG,EACvFD,GAAA,MAAAA,EAAmB,CAAE,OAAQ,UAAW,QAAS,WAAWC,CAAa,MAAO,SAAU,EAAE,GAGxF,KAAK,kBACL,MAAM,KAAK,iBAAiB,QAAO,EAGvC,KAAK,iBAAmB,MAAMI,GAAqB,OAC/CT,GAAa,KAAK,YAAY,UAC9B,CACI,mBAAoB,CAAC,MAAM,EAC3B,uBAAwB,KAC5C,CACA,EACY,QAAQ,IAAI,0BAA2B,KAAK,iBAAiB,WAAY,KAAK,iBAAiB,WAAW,EAG1G,MAAMW,EAAkB,KAAK,YAAY,YAAY,QAAQ,QAAS,EAAE,EAAE,QAAQ,KAAM,GAAG,EAC3FP,GAAA,MAAAA,EAAmB,CAAE,OAAQ,UAAW,QAAS,WAAWO,CAAe,MAAO,SAAU,EAAE,GAG1F,KAAK,oBACL,MAAM,KAAK,mBAAmB,QAAO,EAGzC,KAAK,mBAAqB,MAAMF,GAAqB,OACjDT,GAAa,KAAK,YAAY,YAC9B,CACI,mBAAoB,CAAC,MAAM,EAC3B,uBAAwB,KAC5C,CACA,EACY,QAAQ,IAAI,4BAA6B,KAAK,mBAAmB,WAAY,KAAK,mBAAmB,WAAW,EAEhH,KAAK,YAAc,GACnBI,GAAA,MAAAA,EAAmB,CAAE,OAAQ,QAAS,QAAS,qCAAsC,SAAU,KACnG,OAASM,EAAO,CACZ,cAAQ,MAAM,sCAAuCA,CAAK,EACpDA,CACV,CACJ,CAEA,MAAM,gBAAiB,CACnB,GAAI,CAEA,MAAME,EAAO,MADI,MAAM,MAAMZ,GAAa,KAAK,YAAY,UAAU,GACzC,KAAI,EAChC,KAAK,SAAWY,EAAK,MAAM;AAAA,CAAI,EAAE,OAAOC,GAAQA,EAAK,MAAM,EAE3D,KAAK,SAAS,QAAQ,GAAG,EACzB,QAAQ,IAAI,qBAAqB,KAAK,YAAY,UAAU,SAAS,KAAK,SAAS,MAAM,aAAa,CAC1G,OAASH,EAAO,CACZ,QAAQ,MAAM,6BAA8BA,CAAK,EAEjD,KAAK,SAAW,CAAC,GAAG,EACpB,QAASI,EAAI,GAAIA,EAAI,IAAKA,IACtB,KAAK,SAAS,KAAK,OAAO,aAAaA,CAAC,CAAC,CAEjD,CACJ,CAEA,MAAM,QAAQC,EAAW,CACrB,GAAI,CAAC,KAAK,YACN,MAAM,IAAI,MAAM,4BAA4B,EAIhD,GAAIA,EAAU,OAAS,kBACnB,OAAO,MAAM,KAAK,WAAWA,CAAS,EAI1C,MAAMC,EAAY,MAAM,KAAK,YAAYD,CAAS,EAG5CE,EAAQ,MAAM,KAAK,WAAWD,CAAS,EAK7C,OAFgB,MAAM,KAAK,cAAcA,EAAWC,CAAK,CAG7D,CAEA,MAAM,WAAWD,EAAW,CACxB,GAAI,CAAC,KAAK,iBACN,MAAM,IAAI,MAAM,4BAA4B,EAIhD,KAAM,CAAE,aAAAG,EAAc,MAAAC,CAAK,EAAK,MAAM,KAAK,mBAAmBJ,CAAS,EAGjEK,EAAc,MAAM,KAAK,uBAAuBF,CAAY,EAG5DG,EAAQ,CAAE,CAAC,KAAK,iBAAiB,WAAW,CAAC,CAAC,EAAGD,CAAW,EAI5D4C,GAHU,MAAM,KAAK,iBAAiB,IAAI3C,CAAK,GAGxB,KAAK,iBAAiB,YAAY,CAAC,CAAC,EAGjE,OAFc,MAAM,KAAK,qBAAqB2C,EAAc9C,EAAa,MAAOA,EAAa,OAAQC,CAAK,CAG9G,CAEA,MAAM,mBAAmBJ,EAAW,CAChC,MAAM4K,EAAQ3L,EAAO,mBAGrB,IAAIyE,EAAI1D,EAAU,MACdyD,EAAIzD,EAAU,OAGdI,EAAQ,EAEJ,KAAK,IAAIqD,EAAGC,CAAC,EAAIkH,IACjBxK,EAAQwK,EAAQ,KAAK,IAAInH,EAAGC,CAAC,GAQrC,MAAMpC,EAAO,KAAK,KAAKoC,EAAItD,CAAK,EAC1BmB,EAAO,KAAK,KAAKkC,EAAIrD,CAAK,EAG1BqB,EAAU,KAAK,KAAKH,EAAO,EAAE,EAAI,GACjCI,EAAU,KAAK,KAAKH,EAAO,EAAE,EAAI,GAGvC,KAAK,OAAO,MAAQE,EACpB,KAAK,OAAO,OAASC,EACrB,KAAK,IAAI,UAAY,QACrB,KAAK,IAAI,SAAS,EAAG,EAAGD,EAASC,CAAO,EACxC,KAAK,IAAI,UAAU1B,EAAW,EAAG,EAAGsB,EAAMC,CAAI,EAE9C,MAAMpB,EAAe,IAAI,MACzB,OAAO,IAAI,QAASyB,GAAY,CAC5B,KAAK,OAAO,OAAQC,GAAS,CACzB,MAAMC,EAAM,IAAI,gBAAgBD,CAAI,EACpC1B,EAAa,OAAS,IAAM,CACxB,IAAI,gBAAgB2B,CAAG,EACvBF,EAAQ,CAAE,aAAAzB,EAAc,MAAAC,EAAO,CACnC,EACAD,EAAa,IAAM2B,CACvB,CAAC,CACL,CAAC,CACL,CAEA,MAAM,uBAAuB9B,EAAW,CAEpC,KAAK,OAAO,MAAQA,EAAU,MAC9B,KAAK,OAAO,OAASA,EAAU,OAC/B,KAAK,IAAI,UAAUA,EAAW,EAAG,CAAC,EAGlC,MAAMqC,EADU,KAAK,IAAI,aAAa,EAAG,EAAGrC,EAAU,MAAOA,EAAU,MAAM,EACtD,KAGjBuC,EAAOvC,EAAU,MAAQA,EAAU,OACnCwC,EAAY,IAAI,aAAa,EAAID,CAAI,EAG3C,QAASzC,EAAI,EAAGA,EAAIyC,EAAMzC,IAAK,CAC3B,MAAM6C,EAAa7C,EAAI,EACvB0C,EAAU1C,CAAC,GAAKuC,EAAOM,CAAU,EAAI,IAAQ1D,EAAO,KAAK,CAAC,GAAKA,EAAO,IAAI,CAAC,EAC3EuD,EAAUD,EAAOzC,CAAC,GAAKuC,EAAOM,EAAa,CAAC,EAAI,IAAQ1D,EAAO,KAAK,CAAC,GAAKA,EAAO,IAAI,CAAC,EACtFuD,EAAU,EAAID,EAAOzC,CAAC,GAAKuC,EAAOM,EAAa,CAAC,EAAI,IAAQ1D,EAAO,KAAK,CAAC,GAAKA,EAAO,IAAI,CAAC,CAC9F,CAEA,OAAO,IAAI+D,GAAW,UAAWR,EAAW,CAAC,EAAG,EAAGxC,EAAU,OAAQA,EAAU,KAAK,CAAC,CACzF,CAEA,MAAM,qBAAqBiD,EAAcC,EAAUC,EAAW/C,EAAO,CACjE,KAAM,CAACmD,EAAWC,EAAUJ,EAAQC,CAAK,EAAIJ,EAAa,KACpDK,EAAOL,EAAa,KAGpBU,EAAU,IAAI,aAAaP,EAASC,CAAK,EAC/C,QAASvD,EAAI,EAAGA,EAAIsD,EAASC,EAAOvD,IAChC6D,EAAQ7D,CAAC,EAAI,GAAK,EAAI,KAAK,IAAI,CAACwD,EAAKxD,CAAC,CAAC,GAI3C,MAAM8D,EAAS,IAAI,WAAWR,EAASC,CAAK,EACtCwH,EAAS5L,EAAO,cAEtB,QAASa,EAAI,EAAGA,EAAIsD,EAASC,EAAOvD,IAChC8D,EAAO9D,CAAC,EAAI6D,EAAQ7D,CAAC,EAAI+K,EAAS,EAAI,EAI1C,MAAM5K,EAAQ,CAAA,EACR8D,EAAU,IAAI,IAEpB,QAASK,EAAI,EAAGA,EAAIhB,EAAQgB,IACxB,QAASC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAAMF,EAAIf,EAAQgB,EACxB,GAAIT,EAAOU,CAAG,IAAM,GAAK,CAACP,EAAQ,IAAIO,CAAG,GAAKX,EAAQW,CAAG,EAAIrF,EAAO,kBAAmB,CACnF,MAAMsF,EAAM,KAAK,UAAUX,EAAQD,EAASU,EAAGD,EAAGf,EAAOD,EAAQW,CAAO,EACxE,GAAIQ,EAAK,CAEL,MAAMuG,EAAY,CACd,OAAQvG,EAAI,OAAO,IAAIC,GAAK,CACxB,KAAK,MAAMA,EAAE,CAAC,EAAItB,EAAWG,EAAQjD,CAAK,EAC1C,KAAK,MAAMoE,EAAE,CAAC,EAAIrB,EAAYC,EAAShD,CAAK,CAC5E,CAA6B,EACD,MAAOmE,EAAI,KACvC,EACwBtE,EAAM,KAAK6K,CAAS,CACxB,CACJ,CACJ,CAGJ,OAAO,KAAK,UAAU7K,CAAK,CAC/B,CAEA,UAAU2D,EAAQmE,EAAQrD,EAAQC,EAAQtB,EAAOD,EAAQW,EAAS,CAC9D,IAAI4B,EAAOjB,EAAQkB,EAAOlB,EACtBmB,EAAOlB,EAAQmB,EAAOnB,EACtBG,EAAa,EACbC,EAAQ,EAGZ,MAAMgG,EAAQ,CAAC,CAACrG,EAAQC,CAAM,CAAC,EAG/B,IAFAZ,EAAQ,IAAIY,EAAStB,EAAQqB,CAAM,EAE5BqG,EAAM,OAAS,GAAG,CACrB,KAAM,CAAC1G,EAAGD,CAAC,EAAI2G,EAAM,MAAK,EAC1BjG,GAAciD,EAAO3D,EAAIf,EAAQgB,CAAC,EAClCU,IAGA,QAASiG,EAAK,GAAIA,GAAM,EAAGA,IACvB,QAASC,EAAK,GAAIA,GAAM,EAAGA,IAAM,CAC7B,MAAM7F,EAAKf,EAAI4G,EACT5F,EAAKjB,EAAI4G,EACT1F,EAAOD,EAAKhC,EAAQ+B,EAEtBA,GAAM,GAAKA,EAAK/B,GAASgC,GAAM,GAAKA,EAAKjC,GACzCQ,EAAO0B,CAAI,IAAM,GAAK,CAACvB,EAAQ,IAAIuB,CAAI,IACvCvB,EAAQ,IAAIuB,CAAI,EAChByF,EAAM,KAAK,CAAC3F,EAAIC,CAAE,CAAC,EACnBM,EAAO,KAAK,IAAIA,EAAMP,CAAE,EACxBQ,EAAO,KAAK,IAAIA,EAAMR,CAAE,EACxBS,EAAO,KAAK,IAAIA,EAAMR,CAAE,EACxBS,EAAO,KAAK,IAAIA,EAAMT,CAAE,EAEhC,CAER,CAGA,GAAKO,EAAOD,EAAQ,GAAMG,EAAOD,EAAQ,EACrC,OAAO,KAIX,MAAMqF,EAAcjM,EAAO,oBACrBkM,EAAU,KAAK,IAAKvF,EAAOD,EAAQG,EAAOD,CAAI,GAAMqF,EAAc,GAAK,EAE7E,OAAAvF,EAAO,KAAK,IAAI,EAAGA,EAAOwF,CAAO,EACjCvF,EAAO,KAAK,IAAIvC,EAAQ,EAAGuC,EAAOuF,CAAO,EACzCtF,EAAO,KAAK,IAAI,EAAGA,EAAOsF,CAAO,EACjCrF,EAAO,KAAK,IAAI1C,EAAS,EAAG0C,EAAOqF,CAAO,EAEnC,CACH,OAAQ,CACJ,CAACxF,EAAME,CAAI,EACX,CAACD,EAAMC,CAAI,EACX,CAACD,EAAME,CAAI,EACX,CAACH,EAAMG,CAAI,CAC3B,EACY,MAAOhB,EAAaC,CAChC,CACI,CAEA,UAAU9E,EAAO,CAEb,OAAOA,EAAM,KAAK,CAACsG,EAAGzD,IAAM,CACxB,MAAM0D,EAAK,KAAK,IAAI,GAAGD,EAAE,OAAO,IAAI/B,GAAKA,EAAE,CAAC,CAAC,CAAC,EACxCiC,EAAK,KAAK,IAAI,GAAG3D,EAAE,OAAO,IAAI0B,GAAKA,EAAE,CAAC,CAAC,CAAC,EAE9C,GAAI,KAAK,IAAIgC,EAAKC,CAAE,EAAI,GAAI,CACxB,MAAMyC,EAAK,KAAK,IAAI,GAAG3C,EAAE,OAAO,IAAI/B,GAAKA,EAAE,CAAC,CAAC,CAAC,EACxC2E,EAAK,KAAK,IAAI,GAAGrG,EAAE,OAAO,IAAI0B,GAAKA,EAAE,CAAC,CAAC,CAAC,EAC9C,OAAO0E,EAAKC,CAChB,CACA,OAAO3C,EAAKC,CAChB,CAAC,CACL,CAEA,MAAM,cAAczG,EAAWC,EAAO,CAClC,GAAI,CAAC,KAAK,mBACN,MAAM,IAAI,MAAM,8BAA8B,EAGlD,MAAMC,EAAU,CAAA,EAEhB,UAAWqE,KAAOtE,EAAO,CAErB,MAAM8G,EAAU,MAAM,KAAK,UAAU/G,EAAWuE,CAAG,EAG7ClE,EAAc,MAAM,KAAK,yBAAyB0G,CAAO,EAGzDzG,EAAQ,CAAE,CAAC,KAAK,mBAAmB,WAAW,CAAC,CAAC,EAAGD,CAAW,EAC9DE,EAAS,MAAM,KAAK,mBAAmB,IAAID,CAAK,EAGhD4G,EAAS,MAAM,KAAK,kBAAkB3G,EAAO,KAAK,mBAAmB,YAAY,CAAC,CAAC,CAAC,EAEtF2G,EAAO,OAASjI,EAAO,YACvBiB,EAAQ,KAAK,CACT,KAAMgH,EAAO,KACb,WAAYA,EAAO,MACnB,IAAK3C,EAAI,MAC7B,CAAiB,CAET,CAEA,OAAOrE,CACX,CAEA,MAAM,UAAUF,EAAWuE,EAAK,CAC5B,MAAMM,EAASN,EAAI,OACboB,EAAO,KAAK,IAAI,GAAGd,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,CAAC,EACxCoB,EAAO,KAAK,IAAI,GAAGf,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,CAAC,EACxCqB,EAAO,KAAK,IAAI,GAAGhB,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,CAAC,EACxCsB,EAAO,KAAK,IAAI,GAAGjB,EAAO,IAAIL,GAAKA,EAAE,CAAC,CAAC,CAAC,EAExCnB,EAAQuC,EAAOD,EACfvC,EAAS0C,EAAOD,EAEtB,KAAK,OAAO,MAAQxC,EACpB,KAAK,OAAO,OAASD,EAErB,KAAK,IAAI,UAAUpD,EAAW2F,EAAME,EAAMxC,EAAOD,EAAQ,EAAG,EAAGC,EAAOD,CAAM,EAE5E,MAAMiE,EAAa,IAAI,MACvB,OAAO,IAAI,QAASzF,GAAY,CAC5B,KAAK,OAAO,OAAQC,GAAS,CACzB,MAAMC,EAAM,IAAI,gBAAgBD,CAAI,EACpCwF,EAAW,OAAS,IAAM,CACtB,IAAI,gBAAgBvF,CAAG,EACvBF,EAAQyF,CAAU,CACtB,EACAA,EAAW,IAAMvF,CACrB,CAAC,CACL,CAAC,CACL,CAEA,MAAM,yBAAyB9B,EAAW,CAGtC,MAAMoL,EAAcpL,EAAU,MAAQA,EAAU,OAChD,IAAIqL,EAAc,KAAK,MAAM,GAAeD,CAAW,EAGvDC,EAAc,KAAK,IAAIA,EAAa,EAAE,EAGtC,KAAK,OAAO,MAAQA,EACpB,KAAK,OAAO,OAAS,GACrB,KAAK,IAAI,UAAY,QACrB,KAAK,IAAI,SAAS,EAAG,EAAGA,EAAa,EAAY,EACjD,KAAK,IAAI,UAAUrL,EAAW,EAAG,EAAGqL,EAAa,EAAY,EAG7D,MAAMhJ,EADU,KAAK,IAAI,aAAa,EAAG,EAAGgJ,EAAa,EAAY,EAC9C,KAGjB9I,EAAO8I,EAAc,GACrB7I,EAAY,IAAI,aAAa,EAAID,CAAI,EAG3C,QAASzC,EAAI,EAAGA,EAAIyC,EAAMzC,IAAK,CAC3B,MAAM6C,EAAa7C,EAAI,EACvB0C,EAAU1C,CAAC,GAAKuC,EAAOM,CAAU,EAAI,IAAQ,IAAO,GACpDH,EAAUD,EAAOzC,CAAC,GAAKuC,EAAOM,EAAa,CAAC,EAAI,IAAQ,IAAO,GAC/DH,EAAU,EAAID,EAAOzC,CAAC,GAAKuC,EAAOM,EAAa,CAAC,EAAI,IAAQ,IAAO,EACvE,CAEA,OAAO,IAAIK,GAAW,UAAWR,EAAW,CAAC,EAAG,EAAG,GAAc6I,CAAW,CAAC,CACjF,CAEA,MAAM,kBAAkBpI,EAAc,CAElC,KAAM,CAACM,EAAWoE,EAAQC,CAAS,EAAI3E,EAAa,KAC9C4E,EAAQ5E,EAAa,KAGrB6E,EAAW,CAAA,EACXC,EAAS,CAAA,EAEf,QAASC,EAAI,EAAGA,EAAIL,EAAQK,IAAK,CAC7B,IAAIC,EAAS,EACTnH,EAAS+G,EAAMG,EAAIJ,CAAS,EAEhC,QAASJ,EAAI,EAAGA,EAAII,EAAWJ,IAAK,CAChC,MAAMU,EAAML,EAAMG,EAAIJ,EAAYJ,CAAC,EAC/BU,EAAMpH,IACNA,EAASoH,EACTD,EAAST,EAEjB,CACAM,EAAS,KAAKG,CAAM,EACpBF,EAAO,KAAKjH,CAAM,CACtB,CAGA,MAAMqH,EAAU,CAAA,EACVC,EAAgB,CAAA,EACtB,IAAIC,EAAU,GAEd,QAASvI,EAAI,EAAGA,EAAIgI,EAAS,OAAQhI,IAAK,CACtC,MAAMwE,EAAMwD,EAAShI,CAAC,EAGlBwE,IAAQ,GAAKA,IAAQ+D,GACjB/D,EAAM,KAAK,SAAS,SACpB6D,EAAQ,KAAK,KAAK,SAAS7D,CAAG,CAAC,EAC/B8D,EAAc,KAAKL,EAAOjI,CAAC,CAAC,GAGpCuI,EAAU/D,CACd,CAEA,MAAO,CACH,KAAM6D,EAAQ,KAAK,EAAE,EACrB,MAAOC,EAAc,OAAS,EAC1BA,EAAc,OAAO,CAAC7B,EAAGzD,IAAMyD,EAAIzD,CAAC,EAAIsF,EAAc,OAAS,CAC/E,CACI,CAEA,MAAM,WAAWoB,EAAS,CACtB,MAAMC,EAAc,MAAMD,EAAQ,YAAW,EACvCE,EAAM,MAAMC,GAAAA,YAAqB,CAAE,KAAMF,CAAW,CAAE,EAAE,QACxDG,EAAWF,EAAI,SACfG,EAAa,CAAA,EAEnB,QAASC,EAAU,EAAGA,GAAWF,EAAUE,IAAW,CAClD,MAAMC,EAAO,MAAML,EAAI,QAAQI,CAAO,EAChCE,EAAWD,EAAK,YAAY,CAAE,MAAO,CAAG,CAAE,EAG1CE,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAMD,EAAO,WAAW,IAAI,EAClCA,EAAO,MAAQD,EAAS,MACxBC,EAAO,OAASD,EAAS,OAEzB,MAAMD,EAAK,OAAO,CACd,cAAeG,EACf,SAAUF,CAC1B,CAAa,EAAE,QAGH,MAAMnI,EAAO,MAAM,IAAI,QAAQD,GAAWqI,EAAO,OAAOrI,EAAS,WAAW,CAAC,EACvE0J,EAAY,MAAM,KAAK,YAAYzJ,CAAI,EAGvC5B,EAAQ,MAAM,KAAK,WAAWqL,CAAS,EACvCnB,EAAc,MAAM,KAAK,cAAcmB,EAAWrL,CAAK,EAE7D4J,EAAW,KAAK,CACZ,KAAMC,EACN,QAASK,CACzB,CAAa,CACL,CAEA,OAAON,CACX,CAEA,MAAM,YAAYhI,EAAM,CACpB,OAAO,IAAI,QAAQ,CAACD,EAASwI,IAAW,CACpC,MAAMC,EAAM,IAAI,MAChBA,EAAI,OAAS,IAAMzI,EAAQyI,CAAG,EAC9BA,EAAI,QAAUD,EACdC,EAAI,IAAM,IAAI,gBAAgBxI,CAAI,CACtC,CAAC,CACL,CACJ,CAGO,MAAM0J,GAAc,IAAIZ,oCCvjB/B,IAAIa,EAAW,SAAUC,EAAS,CAGhC,IAAIC,EAAK,OAAO,UACZC,EAASD,EAAG,eACZE,EAAiB,OAAO,gBAAkB,SAAUC,EAAKC,EAAKC,EAAM,CAAEF,EAAIC,CAAG,EAAIC,EAAK,KAAM,EAC5FC,EACAC,EAAU,OAAO,QAAW,WAAa,OAAS,CAAA,EAClDC,EAAiBD,EAAQ,UAAY,aACrCE,EAAsBF,EAAQ,eAAiB,kBAC/CG,EAAoBH,EAAQ,aAAe,gBAE/C,SAASI,EAAOR,EAAKC,EAAKQ,EAAO,CAC/B,cAAO,eAAeT,EAAKC,EAAK,CAC9B,MAAOQ,EACP,WAAY,GACZ,aAAc,GACd,SAAU,EAChB,CAAK,EACMT,EAAIC,CAAG,CAClB,CACE,GAAI,CAEFO,EAAO,CAAA,EAAI,EAAE,CACjB,MAAgB,CACZA,EAAS,SAASR,EAAKC,EAAKQ,EAAO,CACjC,OAAOT,EAAIC,CAAG,EAAIQ,CACxB,CACA,CAEE,SAASC,EAAKC,EAASC,EAASC,EAAMC,EAAa,CAEjD,IAAIC,EAAiBH,GAAWA,EAAQ,qBAAqBI,EAAYJ,EAAUI,EAC/EC,EAAY,OAAO,OAAOF,EAAe,SAAS,EAClDG,EAAU,IAAIC,GAAQL,GAAe,CAAA,CAAE,EAI3C,OAAAf,EAAekB,EAAW,UAAW,CAAE,MAAOG,EAAiBT,EAASE,EAAMK,CAAO,EAAG,EAEjFD,CACX,CACErB,EAAQ,KAAOc,EAYf,SAASW,EAASC,EAAItB,EAAKuB,EAAK,CAC9B,GAAI,CACF,MAAO,CAAE,KAAM,SAAU,IAAKD,EAAG,KAAKtB,EAAKuB,CAAG,CAAC,CACrD,OAAaC,EAAK,CACZ,MAAO,CAAE,KAAM,QAAS,IAAKA,CAAG,CACtC,CACA,CAEE,IAAIC,EAAyB,iBACzBC,EAAyB,iBACzBC,EAAoB,YACpBC,EAAoB,YAIpBC,EAAmB,CAAA,EAMvB,SAASb,GAAY,CAAA,CACrB,SAASc,GAAoB,CAAA,CAC7B,SAASC,GAA6B,CAAA,CAItC,IAAIC,EAAoB,CAAA,EACxBxB,EAAOwB,EAAmB3B,EAAgB,UAAY,CACpD,OAAO,IACX,CAAG,EAED,IAAI4B,EAAW,OAAO,eAClBC,EAA0BD,GAAYA,EAASA,EAASE,GAAO,CAAA,CAAE,CAAC,CAAC,EACnED,GACAA,IAA4BrC,GAC5BC,EAAO,KAAKoC,EAAyB7B,CAAc,IAGrD2B,EAAoBE,GAGtB,IAAIE,EAAKL,EAA2B,UAClCf,EAAU,UAAY,OAAO,OAAOgB,CAAiB,EACvDF,EAAkB,UAAYC,EAC9BhC,EAAeqC,EAAI,cAAe,CAAE,MAAOL,EAA4B,aAAc,GAAM,EAC3FhC,EACEgC,EACA,cACA,CAAE,MAAOD,EAAmB,aAAc,EAAI,CAClD,EACEA,EAAkB,YAActB,EAC9BuB,EACAxB,EACA,mBACJ,EAIE,SAAS8B,GAAsBC,EAAW,CACxC,CAAC,OAAQ,QAAS,QAAQ,EAAE,QAAQ,SAASC,EAAQ,CACnD/B,EAAO8B,EAAWC,EAAQ,SAAShB,EAAK,CACtC,OAAO,KAAK,QAAQgB,EAAQhB,CAAG,CACvC,CAAO,CACP,CAAK,CACL,CAEE3B,EAAQ,oBAAsB,SAAS4C,EAAQ,CAC7C,IAAIC,EAAO,OAAOD,GAAW,YAAcA,EAAO,YAClD,OAAOC,EACHA,IAASX,IAGRW,EAAK,aAAeA,EAAK,QAAU,oBACpC,EACR,EAEE7C,EAAQ,KAAO,SAAS4C,EAAQ,CAC9B,OAAI,OAAO,eACT,OAAO,eAAeA,EAAQT,CAA0B,GAExDS,EAAO,UAAYT,EACnBvB,EAAOgC,EAAQjC,EAAmB,mBAAmB,GAEvDiC,EAAO,UAAY,OAAO,OAAOJ,CAAE,EAC5BI,CACX,EAME5C,EAAQ,MAAQ,SAAS2B,EAAK,CAC5B,MAAO,CAAE,QAASA,CAAG,CACzB,EAEE,SAASmB,EAAczB,EAAW0B,EAAa,CAC7C,SAASC,EAAOL,EAAQhB,EAAKxL,EAASwI,EAAQ,CAC5C,IAAIsE,EAASxB,EAASJ,EAAUsB,CAAM,EAAGtB,EAAWM,CAAG,EACvD,GAAIsB,EAAO,OAAS,QAClBtE,EAAOsE,EAAO,GAAG,MACZ,CACL,IAAIxH,EAASwH,EAAO,IAChBpC,EAAQpF,EAAO,MACnB,OAAIoF,GACA,OAAOA,GAAU,UACjBX,EAAO,KAAKW,EAAO,SAAS,EACvBkC,EAAY,QAAQlC,EAAM,OAAO,EAAE,KAAK,SAASA,EAAO,CAC7DmC,EAAO,OAAQnC,EAAO1K,EAASwI,CAAM,CACjD,EAAa,SAASiD,EAAK,CACfoB,EAAO,QAASpB,EAAKzL,EAASwI,CAAM,CAChD,CAAW,EAGIoE,EAAY,QAAQlC,CAAK,EAAE,KAAK,SAASqC,EAAW,CAIzDzH,EAAO,MAAQyH,EACf/M,EAAQsF,CAAM,CACxB,EAAW,SAASxH,EAAO,CAGjB,OAAO+O,EAAO,QAAS/O,EAAOkC,EAASwI,CAAM,CACvD,CAAS,CACT,CACA,CAEI,IAAIwE,EAEJ,SAASC,EAAQT,EAAQhB,EAAK,CAC5B,SAAS0B,GAA6B,CACpC,OAAO,IAAIN,EAAY,SAAS5M,EAASwI,EAAQ,CAC/CqE,EAAOL,EAAQhB,EAAKxL,EAASwI,CAAM,CAC7C,CAAS,CACT,CAEM,OAAOwE,EAaLA,EAAkBA,EAAgB,KAChCE,EAGAA,GACEA,EAA0B,CACtC,CAIIlD,EAAe,KAAM,UAAW,CAAE,MAAOiD,CAAO,CAAE,CACtD,CAEEX,GAAsBK,EAAc,SAAS,EAC7ClC,EAAOkC,EAAc,UAAWpC,EAAqB,UAAY,CAC/D,OAAO,IACX,CAAG,EACDV,EAAQ,cAAgB8C,EAKxB9C,EAAQ,MAAQ,SAASe,EAASC,EAASC,EAAMC,EAAa6B,EAAa,CACrEA,IAAgB,SAAQA,EAAc,SAE1C,IAAIO,EAAO,IAAIR,EACbhC,EAAKC,EAASC,EAASC,EAAMC,CAAW,EACxC6B,CACN,EAEI,OAAO/C,EAAQ,oBAAoBgB,CAAO,EACtCsC,EACAA,EAAK,KAAI,EAAG,KAAK,SAAS7H,EAAQ,CAChC,OAAOA,EAAO,KAAOA,EAAO,MAAQ6H,EAAK,KAAI,CACvD,CAAS,CACT,EAEE,SAAS9B,EAAiBT,EAASE,EAAMK,EAAS,CAChD,IAAIiC,EAAQ1B,EAEZ,OAAO,SAAgBc,EAAQhB,EAAK,CAClC,GAAI4B,IAAUxB,EACZ,MAAM,IAAI,MAAM,8BAA8B,EAGhD,GAAIwB,IAAUvB,EAAmB,CAC/B,GAAIW,IAAW,QACb,MAAMhB,EAKR,OAAO6B,GAAU,CACzB,CAKM,IAHAlC,EAAQ,OAASqB,EACjBrB,EAAQ,IAAMK,IAED,CACX,IAAI8B,EAAWnC,EAAQ,SACvB,GAAImC,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUnC,CAAO,EAC1D,GAAIoC,EAAgB,CAClB,GAAIA,IAAmBzB,EAAkB,SACzC,OAAOyB,CACnB,CACA,CAEQ,GAAIpC,EAAQ,SAAW,OAGrBA,EAAQ,KAAOA,EAAQ,MAAQA,EAAQ,YAE9BA,EAAQ,SAAW,QAAS,CACrC,GAAIiC,IAAU1B,EACZ,MAAA0B,EAAQvB,EACFV,EAAQ,IAGhBA,EAAQ,kBAAkBA,EAAQ,GAAG,CAE/C,MAAmBA,EAAQ,SAAW,UAC5BA,EAAQ,OAAO,SAAUA,EAAQ,GAAG,EAGtCiC,EAAQxB,EAER,IAAIkB,EAASxB,EAASV,EAASE,EAAMK,CAAO,EAC5C,GAAI2B,EAAO,OAAS,SAAU,CAO5B,GAJAM,EAAQjC,EAAQ,KACZU,EACAF,EAEAmB,EAAO,MAAQhB,EACjB,SAGF,MAAO,CACL,MAAOgB,EAAO,IACd,KAAM3B,EAAQ,IAC1B,CAEA,MAAmB2B,EAAO,OAAS,UACzBM,EAAQvB,EAGRV,EAAQ,OAAS,QACjBA,EAAQ,IAAM2B,EAAO,IAE/B,CACA,CACA,CAME,SAASU,EAAoBF,EAAUnC,EAAS,CAC9C,IAAIsC,EAAatC,EAAQ,OACrBqB,EAASc,EAAS,SAASG,CAAU,EACzC,GAAIjB,IAAWpC,EAOb,OAHAe,EAAQ,SAAW,KAGfsC,IAAe,SAAWH,EAAS,SAAS,SAG9CnC,EAAQ,OAAS,SACjBA,EAAQ,IAAMf,EACdoD,EAAoBF,EAAUnC,CAAO,EAEjCA,EAAQ,SAAW,UAMrBsC,IAAe,WACjBtC,EAAQ,OAAS,QACjBA,EAAQ,IAAM,IAAI,UAChB,oCAAsCsC,EAAa,UAAU,GAG1D3B,EAGT,IAAIgB,EAASxB,EAASkB,EAAQc,EAAS,SAAUnC,EAAQ,GAAG,EAE5D,GAAI2B,EAAO,OAAS,QAClB,OAAA3B,EAAQ,OAAS,QACjBA,EAAQ,IAAM2B,EAAO,IACrB3B,EAAQ,SAAW,KACZW,EAGT,IAAI4B,EAAOZ,EAAO,IAElB,GAAI,CAAEY,EACJ,OAAAvC,EAAQ,OAAS,QACjBA,EAAQ,IAAM,IAAI,UAAU,kCAAkC,EAC9DA,EAAQ,SAAW,KACZW,EAGT,GAAI4B,EAAK,KAGPvC,EAAQmC,EAAS,UAAU,EAAII,EAAK,MAGpCvC,EAAQ,KAAOmC,EAAS,QAQpBnC,EAAQ,SAAW,WACrBA,EAAQ,OAAS,OACjBA,EAAQ,IAAMf,OAKhB,QAAOsD,EAKT,OAAAvC,EAAQ,SAAW,KACZW,CACX,CAIEQ,GAAsBD,CAAE,EAExB5B,EAAO4B,EAAI7B,EAAmB,WAAW,EAOzCC,EAAO4B,EAAI/B,EAAgB,UAAW,CACpC,OAAO,IACX,CAAG,EAEDG,EAAO4B,EAAI,WAAY,UAAW,CAChC,MAAO,oBACX,CAAG,EAED,SAASsB,GAAaC,EAAM,CAC1B,IAAIC,EAAQ,CAAE,OAAQD,EAAK,CAAC,CAAC,EAEzB,KAAKA,IACPC,EAAM,SAAWD,EAAK,CAAC,GAGrB,KAAKA,IACPC,EAAM,WAAaD,EAAK,CAAC,EACzBC,EAAM,SAAWD,EAAK,CAAC,GAGzB,KAAK,WAAW,KAAKC,CAAK,CAC9B,CAEE,SAASC,EAAcD,EAAO,CAC5B,IAAIf,EAASe,EAAM,YAAc,CAAA,EACjCf,EAAO,KAAO,SACd,OAAOA,EAAO,IACde,EAAM,WAAaf,CACvB,CAEE,SAAS1B,GAAQL,EAAa,CAI5B,KAAK,WAAa,CAAC,CAAE,OAAQ,MAAM,CAAE,EACrCA,EAAY,QAAQ4C,GAAc,IAAI,EACtC,KAAK,MAAM,EAAI,CACnB,CAEE9D,EAAQ,KAAO,SAASvD,EAAK,CAC3B,IAAIyH,EAAS,OAAOzH,CAAG,EACnB0H,EAAO,CAAA,EACX,QAAS9D,KAAO6D,EACdC,EAAK,KAAK9D,CAAG,EAEf,OAAA8D,EAAK,QAAO,EAIL,SAASC,GAAO,CACrB,KAAOD,EAAK,QAAQ,CAClB,IAAI9D,EAAM8D,EAAK,IAAG,EAClB,GAAI9D,KAAO6D,EACT,OAAAE,EAAK,MAAQ/D,EACb+D,EAAK,KAAO,GACLA,CAEjB,CAKM,OAAAA,EAAK,KAAO,GACLA,CACb,CACA,EAEE,SAAS7B,GAAO8B,EAAU,CACxB,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAS5D,CAAc,EAC5C,GAAI6D,EACF,OAAOA,EAAe,KAAKD,CAAQ,EAGrC,GAAI,OAAOA,EAAS,MAAS,WAC3B,OAAOA,EAGT,GAAI,CAAC,MAAMA,EAAS,MAAM,EAAG,CAC3B,IAAIhQ,EAAI,GAAI+P,EAAO,SAASA,GAAO,CACjC,KAAO,EAAE/P,EAAIgQ,EAAS,QACpB,GAAInE,EAAO,KAAKmE,EAAUhQ,CAAC,EACzB,OAAA+P,EAAK,MAAQC,EAAShQ,CAAC,EACvB+P,EAAK,KAAO,GACLA,EAIX,OAAAA,EAAK,MAAQ7D,EACb6D,EAAK,KAAO,GAELA,CACjB,EAEQ,OAAOA,EAAK,KAAOA,CAC3B,CACA,CAGI,MAAO,CAAE,KAAMZ,EAAU,CAC7B,CACExD,EAAQ,OAASuC,GAEjB,SAASiB,IAAa,CACpB,MAAO,CAAE,MAAOjD,EAAW,KAAM,EAAI,CACzC,CAEE,OAAAgB,GAAQ,UAAY,CAClB,YAAaA,GAEb,MAAO,SAASgD,EAAe,CAc7B,GAbA,KAAK,KAAO,EACZ,KAAK,KAAO,EAGZ,KAAK,KAAO,KAAK,MAAQhE,EACzB,KAAK,KAAO,GACZ,KAAK,SAAW,KAEhB,KAAK,OAAS,OACd,KAAK,IAAMA,EAEX,KAAK,WAAW,QAAQ0D,CAAa,EAEjC,CAACM,EACH,QAASvP,KAAQ,KAEXA,EAAK,OAAO,CAAC,IAAM,KACnBkL,EAAO,KAAK,KAAMlL,CAAI,GACtB,CAAC,MAAM,CAACA,EAAK,MAAM,CAAC,CAAC,IACvB,KAAKA,CAAI,EAAIuL,EAIzB,EAEI,KAAM,UAAW,CACf,KAAK,KAAO,GAEZ,IAAIiE,EAAY,KAAK,WAAW,CAAC,EAC7BC,EAAaD,EAAU,WAC3B,GAAIC,EAAW,OAAS,QACtB,MAAMA,EAAW,IAGnB,OAAO,KAAK,IAClB,EAEI,kBAAmB,SAASC,EAAW,CACrC,GAAI,KAAK,KACP,MAAMA,EAGR,IAAIpD,EAAU,KACd,SAASqD,EAAOC,EAAKC,EAAQ,CAC3B,OAAA5B,EAAO,KAAO,QACdA,EAAO,IAAMyB,EACbpD,EAAQ,KAAOsD,EAEXC,IAGFvD,EAAQ,OAAS,OACjBA,EAAQ,IAAMf,GAGT,CAAC,CAAEsE,CAClB,CAEM,QAASxQ,EAAI,KAAK,WAAW,OAAS,EAAGA,GAAK,EAAG,EAAEA,EAAG,CACpD,IAAI2P,EAAQ,KAAK,WAAW3P,CAAC,EACzB4O,EAASe,EAAM,WAEnB,GAAIA,EAAM,SAAW,OAInB,OAAOW,EAAO,KAAK,EAGrB,GAAIX,EAAM,QAAU,KAAK,KAAM,CAC7B,IAAIc,EAAW5E,EAAO,KAAK8D,EAAO,UAAU,EACxCe,EAAa7E,EAAO,KAAK8D,EAAO,YAAY,EAEhD,GAAIc,GAAYC,EAAY,CAC1B,GAAI,KAAK,KAAOf,EAAM,SACpB,OAAOW,EAAOX,EAAM,SAAU,EAAI,EAC7B,GAAI,KAAK,KAAOA,EAAM,WAC3B,OAAOW,EAAOX,EAAM,UAAU,CAG5C,SAAqBc,GACT,GAAI,KAAK,KAAOd,EAAM,SACpB,OAAOW,EAAOX,EAAM,SAAU,EAAI,UAG3Be,GACT,GAAI,KAAK,KAAOf,EAAM,WACpB,OAAOW,EAAOX,EAAM,UAAU,MAIhC,OAAM,IAAI,MAAM,wCAAwC,CAEpE,CACA,CACA,EAEI,OAAQ,SAASgB,EAAMrD,EAAK,CAC1B,QAAStN,EAAI,KAAK,WAAW,OAAS,EAAGA,GAAK,EAAG,EAAEA,EAAG,CACpD,IAAI2P,EAAQ,KAAK,WAAW3P,CAAC,EAC7B,GAAI2P,EAAM,QAAU,KAAK,MACrB9D,EAAO,KAAK8D,EAAO,YAAY,GAC/B,KAAK,KAAOA,EAAM,WAAY,CAChC,IAAIiB,EAAejB,EACnB,KACV,CACA,CAEUiB,IACCD,IAAS,SACTA,IAAS,aACVC,EAAa,QAAUtD,GACvBA,GAAOsD,EAAa,aAGtBA,EAAe,MAGjB,IAAIhC,EAASgC,EAAeA,EAAa,WAAa,CAAA,EAItD,OAHAhC,EAAO,KAAO+B,EACd/B,EAAO,IAAMtB,EAETsD,GACF,KAAK,OAAS,OACd,KAAK,KAAOA,EAAa,WAClBhD,GAGF,KAAK,SAASgB,CAAM,CACjC,EAEI,SAAU,SAASA,EAAQiC,EAAU,CACnC,GAAIjC,EAAO,OAAS,QAClB,MAAMA,EAAO,IAGf,OAAIA,EAAO,OAAS,SAChBA,EAAO,OAAS,WAClB,KAAK,KAAOA,EAAO,IACVA,EAAO,OAAS,UACzB,KAAK,KAAO,KAAK,IAAMA,EAAO,IAC9B,KAAK,OAAS,SACd,KAAK,KAAO,OACHA,EAAO,OAAS,UAAYiC,IACrC,KAAK,KAAOA,GAGPjD,CACb,EAEI,OAAQ,SAASkD,EAAY,CAC3B,QAAS9Q,EAAI,KAAK,WAAW,OAAS,EAAGA,GAAK,EAAG,EAAEA,EAAG,CACpD,IAAI2P,EAAQ,KAAK,WAAW3P,CAAC,EAC7B,GAAI2P,EAAM,aAAemB,EACvB,YAAK,SAASnB,EAAM,WAAYA,EAAM,QAAQ,EAC9CC,EAAcD,CAAK,EACZ/B,CAEjB,CACA,EAEI,MAAS,SAASmD,EAAQ,CACxB,QAAS/Q,EAAI,KAAK,WAAW,OAAS,EAAGA,GAAK,EAAG,EAAEA,EAAG,CACpD,IAAI2P,EAAQ,KAAK,WAAW3P,CAAC,EAC7B,GAAI2P,EAAM,SAAWoB,EAAQ,CAC3B,IAAInC,EAASe,EAAM,WACnB,GAAIf,EAAO,OAAS,QAAS,CAC3B,IAAIoC,EAASpC,EAAO,IACpBgB,EAAcD,CAAK,CAC/B,CACU,OAAOqB,CACjB,CACA,CAIM,MAAM,IAAI,MAAM,uBAAuB,CAC7C,EAEI,cAAe,SAAShB,EAAUiB,EAAYC,EAAS,CACrD,YAAK,SAAW,CACd,SAAUhD,GAAO8B,CAAQ,EACzB,WAAYiB,EACZ,QAASC,CACjB,EAEU,KAAK,SAAW,SAGlB,KAAK,IAAMhF,GAGN0B,CACb,CACA,EAMSjC,CAET,EAK+BwF,EAAO,OACtC,EAEA,GAAI,CACF,mBAAqBzF,CACvB,MAA+B,CAWzB,OAAO,YAAe,SACxB,WAAW,mBAAqBA,EAEhC,SAAS,IAAK,wBAAwB,EAAEA,CAAO,CAEnD,QCxvBA,IAAA0F,GAAiB,CAACC,EAAQC,IACxB,GAAGD,CAAM,IAAIC,CAAG,IAAI,KAAK,SAAS,SAAS,EAAE,EAAE,MAAM,EAAG,CAAC,CAAC,GCD5D,MAAMF,GAAQG,GAEd,IAAIC,GAAa,EAEjB,IAAAC,GAAiB,CAAC,CAChB,GAAIC,EACJ,OAAAC,EACA,QAAAC,EAAU,CAAA,CACZ,IAAM,CACJ,IAAIC,EAAKH,EACT,OAAI,OAAOG,EAAO,MAChBA,EAAKT,GAAM,MAAOI,EAAU,EAC5BA,IAAc,GAGT,CACL,GAAAK,EACA,OAAAF,EACA,QAAAC,CACJ,CACA,QCpBA,IAAIE,GAAU,GAEdC,GAAA,QAAkBD,GAElBC,GAAA,WAAsBC,GAAa,CACjCF,GAAUE,CACZ,EAEAD,GAAA,IAAc,IAAIE,IAAUH,GAAU,QAAQ,IAAI,MAAMI,OAAMD,CAAI,EAAI,KCRtE,MAAMR,GAAYF,GACZ,CAAA,IAAEQ,EAAG,EAAKI,GACVf,GAAQgB,GAEd,IAAIC,GAAmB,EAEvB,IAAAC,GAAiB,IAAM,CACrB,MAAMT,EAAKT,GAAM,YAAaiB,EAAgB,EACxCE,EAAU,CAAA,EACVC,EAAiB,CAAA,EACvB,IAAIC,EAAW,CAAA,EAEfJ,IAAoB,EAEpB,MAAMK,EAAc,IAAMD,EAAS,OAC7BE,EAAgB,IAAM,OAAO,KAAKJ,CAAO,EAAE,OAE3CK,EAAU,IAAM,CACpB,GAAIH,EAAS,SAAW,EAAG,CACzB,MAAMI,EAAO,OAAO,KAAKN,CAAO,EAChC,QAASvS,EAAI,EAAGA,EAAI6S,EAAK,OAAQ7S,GAAK,EACpC,GAAI,OAAOwS,EAAeK,EAAK7S,CAAC,CAAC,EAAM,IAAa,CAClDyS,EAAS,CAAC,EAAEF,EAAQM,EAAK7S,CAAC,CAAC,CAAC,EAC5B,KACV,CAEA,CACA,EAEQiL,EAAQ,CAAC0G,EAAQC,IACrB,IAAI,QAAQ,CAAC9P,EAASwI,IAAW,CAC/B,MAAMwI,EAAMrB,GAAU,CAAE,OAAAE,EAAQ,QAAAC,CAAO,CAAE,EACzCa,EAAS,KAAK,MAAO7O,GAAM,CACzB6O,EAAS,MAAK,EACdD,EAAe5O,EAAE,EAAE,EAAIkP,EACvB,GAAI,CACFhR,EAAQ,MAAM8B,EAAE+N,CAAM,EAAE,MAAMO,OAAM,CAAC,GAAGN,EAASkB,EAAI,EAAE,CAAC,CAAC,CACnE,OAAiBvF,EAAK,CACZjD,EAAOiD,CAAG,CACpB,QAAS,CACC,OAAOiF,EAAe5O,EAAE,EAAE,EAC1BgP,EAAO,CACjB,CACA,CAAO,EACDb,GAAI,IAAIF,CAAE,UAAUiB,EAAI,EAAE,cAAc,EACxCf,GAAI,IAAIF,CAAE,sBAAsBY,EAAS,MAAM,EAAE,EACjDG,EAAO,CACb,CAAK,EAyBH,MAAO,CACL,UAvBiBhP,IACjB2O,EAAQ3O,EAAE,EAAE,EAAIA,EAChBmO,GAAI,IAAIF,CAAE,UAAUjO,EAAE,EAAE,EAAE,EAC1BmO,GAAI,IAAIF,CAAE,wBAAwBc,EAAa,CAAE,EAAE,EACnDC,EAAO,EACAhP,EAAE,IAmBT,OAhBa,MAAO+N,KAAWC,IAAY,CAC3C,GAAIe,EAAa,IAAO,EACtB,MAAM,MAAM,IAAId,CAAE,4DAA4D,EAEhF,OAAO5G,EAAM0G,EAAQC,CAAO,CAChC,EAYI,UAVgB,SAAY,CAC5B,OAAO,KAAKW,CAAO,EAAE,QAAQ,MAAOQ,GAAQ,CAC1C,MAAMR,EAAQQ,CAAG,EAAE,UAAS,CAClC,CAAK,EACDN,EAAW,CAAA,CACf,EAMI,YAAAC,EACA,cAAAC,CACJ,CACA,EC9EA,SAASK,IAAa,CAYlB,MAVI,UAAO,OAAW,KAAe,OAAO,OAAO,SAAY,UAAY,OAAO,QAAQ,OAAS,YAK/F,OAAO,QAAY,KAAe,OAAO,QAAQ,UAAa,UAAc,QAAQ,SAAS,UAK7F,OAAO,WAAc,UAAY,OAAO,UAAU,WAAc,UAAY,UAAU,UAAU,QAAQ,UAAU,GAAK,EAK/H,CAEA,IAAAC,GAAiBD,GCpBjB,MAAMA,GAAazB,OAEnB2B,GAAkBlH,GAAQ,CACxB,MAAMmH,EAAM,CAAA,EAYZ,OAVI,OAAO,kBAAsB,IAC/BA,EAAI,KAAO,YACFH,KACTG,EAAI,KAAO,WACF,OAAO,UAAa,SAC7BA,EAAI,KAAO,UACF,OAAO,SAAY,UAAY,OAAOC,IAAY,aAC3DD,EAAI,KAAO,QAGT,OAAOnH,EAAQ,IACVmH,EAGFA,EAAInH,CAAG,CAChB,ECpBA,MAAMqH,GAAY9B,GAA4B,MAAM,IAAM,UAEpD+B,GAAaD,GAAYE,GAAM,IAAI,IAAIA,EAAG,OAAO,SAAS,IAAI,EAAG,KAAOA,GAAKA,MAEnFC,GAAkBC,GAAY,CAC5B,MAAMC,EAAO,CAAE,GAAGD,CAAO,EACzB,OAAC,WAAY,aAAc,UAAU,EAAE,QAASzH,GAAQ,CAClDyH,EAAQzH,CAAG,IACb0H,EAAK1H,CAAG,EAAIsH,GAAWI,EAAK1H,CAAG,CAAC,EAEtC,CAAG,EACM0H,CACT,ECKAC,GAAkB1J,GAAS,CACzB,MAAM2J,EAAS,CAAA,EACTC,EAAa,CAAA,EACblL,EAAQ,CAAA,EACRmL,EAAQ,CAAA,EACRC,EAAU,CAAA,EAEhB,OAAI9J,EAAK,QACPA,EAAK,OAAO,QAAS+J,GAAU,CAC7BA,EAAM,WAAW,QAASC,GAAc,CACtCA,EAAU,MAAM,QAASlU,GAAS,CAChCA,EAAK,MAAM,QAASmU,GAAS,CAC3BA,EAAK,QAAQ,QAASC,GAAQ,CAC5BJ,EAAQ,KAAK,CACX,GAAGI,EAAK,KAAAlK,EAAM,MAAA+J,EAAO,UAAAC,EAAW,KAAAlU,EAAM,KAAAmU,CACtD,CAAe,CACf,CAAa,EACDJ,EAAM,KAAK,CACT,GAAGI,EAAM,KAAAjK,EAAM,MAAA+J,EAAO,UAAAC,EAAW,KAAAlU,CAC/C,CAAa,CACb,CAAW,EACD4I,EAAM,KAAK,CACT,GAAG5I,EAAM,KAAAkK,EAAM,MAAA+J,EAAO,UAAAC,CAClC,CAAW,CACX,CAAS,EACDJ,EAAW,KAAK,CACd,GAAGI,EAAW,KAAAhK,EAAM,MAAA+J,CAC9B,CAAS,CACT,CAAO,EACDJ,EAAO,KAAK,CACV,GAAGI,EAAO,KAAA/J,CAClB,CAAO,CACP,CAAK,EAGI,CACL,GAAGA,EAAM,OAAA2J,EAAQ,WAAAC,EAAY,MAAAlL,EAAO,MAAAmL,EAAO,QAAAC,CAC/C,CACA,ECjDAK,GAAiB,CACf,eAAgB,EAChB,UAAW,EACX,wBAAyB,EACzB,QAAS,CACX,mCCXA,IAAAC,GAAiB,CAMf,cAAe,GACf,OAAQ,IAAM,CAAA,CAChB,ECRA,MAAMC,GAAU/C,GAAiC,QAC3C8C,GAAiBlC,GAKvB,IAAAoC,GAAiB,CACf,GAAGF,GACH,WAAY,8CAA8CC,EAAO,qBACnE,ECFAE,GAAiB,CAAC,CAAE,WAAAC,EAAY,cAAAC,KAAoB,CAClD,IAAIC,EACJ,GAAI,MAAQ,KAAOD,EAAe,CAChC,MAAM3S,EAAO,IAAI,KAAK,CAAC,kBAAkB0S,CAAU,KAAK,EAAG,CACzD,KAAM,wBACZ,CAAK,EACDE,EAAS,IAAI,OAAO,IAAI,gBAAgB5S,CAAI,CAAC,CACjD,MACI4S,EAAS,IAAI,OAAOF,CAAU,EAGhC,OAAOE,CACT,ECZAC,GAAkBD,GAAW,CAC3BA,EAAO,UAAS,CAClB,ECTAE,GAAiB,CAACF,EAAQG,IAAY,CACpCH,EAAO,UAAY,CAAC,CAAE,KAAAnR,KAAW,CAC/BsR,EAAQtR,CAAI,CAChB,CACA,ECGAuR,GAAiB,MAAOJ,EAAQK,IAAW,CACzCL,EAAO,YAAYK,CAAM,CAC3B,ECFA,MAAMC,GAAsBlT,GAC1B,IAAI,QAAQ,CAACD,EAASwI,IAAW,CAC/B,MAAM4K,EAAa,IAAI,WACvBA,EAAW,OAAS,IAAM,CACxBpT,EAAQoT,EAAW,MAAM,CAC/B,EACIA,EAAW,QAAU,CAAC,CAAE,OAAQ,CAAE,MAAO,CAAE,KAAAC,CAAI,CAAE,KAAS,CACxD7K,EAAO,MAAM,gCAAgC6K,CAAI,EAAE,CAAC,CAC1D,EACID,EAAW,kBAAkBnT,CAAI,CACrC,CAAG,EAUGqT,GAAY,MAAOC,GAAU,CACjC,IAAI7R,EAAO6R,EACX,GAAI,OAAOA,EAAU,IACnB,MAAO,YAGT,GAAI,OAAOA,GAAU,SAEf,yCAAyC,KAAKA,CAAK,EACrD7R,EAAO,KAAK6R,EAAM,MAAM,GAAG,EAAE,CAAC,CAAC,EAC5B,MAAM,EAAE,EACR,IAAK3N,GAAMA,EAAE,WAAW,CAAC,CAAC,EAG7BlE,EAAO,MADM,MAAM,MAAM6R,CAAK,GACZ,YAAW,UAEtB,OAAO,YAAgB,KAAeA,aAAiB,YAC5DA,EAAM,UAAY,QACpB7R,EAAO,MAAM4R,GAAUC,EAAM,GAAG,GAE9BA,EAAM,UAAY,UACpB7R,EAAO,MAAM4R,GAAUC,EAAM,MAAM,GAEjCA,EAAM,UAAY,UACpB,MAAM,IAAI,QAASvT,GAAY,CAC7BuT,EAAM,OAAO,MAAOtT,GAAS,CAC3ByB,EAAO,MAAMyR,GAAmBlT,CAAI,EACpCD,EAAO,CACjB,CAAS,CACT,CAAO,UAEM,OAAO,gBAAoB,KAAeuT,aAAiB,gBAAiB,CACrF,MAAMtT,EAAO,MAAMsT,EAAM,cAAa,EACtC7R,EAAO,MAAMyR,GAAmBlT,CAAI,CACxC,MAAasT,aAAiB,MAAQA,aAAiB,QACnD7R,EAAO,MAAMyR,GAAmBI,CAAK,GAGvC,OAAO,IAAI,WAAW7R,CAAI,CAC5B,EAEA,IAAA8R,GAAiBF,GC3DjB,MAAMf,GAAiB9C,GACjBiD,GAAcrC,GACdyC,GAAkBxC,GAClByC,GAAYU,GACZR,GAAOS,GACPJ,GAAYK,GAElB,IAAAC,GAAiB,CACjB,eAAErB,GACF,YAAEG,GACF,gBAAEI,GACF,UAAEC,GACF,KAAEE,GACF,UAAEK,EACF,ECvBA,MAAM5B,GAAejC,GACfoC,GAAcxB,GACdV,EAAYW,GACZ,CAAE,IAAAL,EAAG,EAAKwD,GACVnE,GAAQoE,GACRpB,GAAMqB,GACN,CACJ,eAAApB,GACA,YAAAG,GACA,gBAAAI,GACA,UAAAC,GACA,UAAAO,GACA,KAAAL,EACF,EAAIY,GAEJ,IAAIC,GAAgB,EAEpB,IAAAC,GAAiB,MAAOC,EAAQ,MAAOC,EAAM3B,GAAI,UAAW4B,EAAW,CAAA,EAAI3W,EAAS,KAAO,CACzF,MAAMwS,EAAKT,GAAM,SAAUwE,EAAa,EAClC,CACJ,OAAAK,EACA,aAAAC,EACA,GAAGzC,CACP,EAAMD,GAAa,CACf,GAAGa,GACH,GAAG2B,CACP,CAAG,EACKG,EAAW,CAAA,EACXC,EAAU,CAAA,EAIVC,EAAe,OAAOP,GAAU,SAAWA,EAAM,MAAM,GAAG,EAAIA,EACpE,IAAIQ,EAAaP,EACbQ,EAAgBlX,EACpB,MAAMmX,EAAe,CAACpC,GAAI,QAASA,GAAI,SAAS,EAAE,SAAS2B,CAAG,GAAK,CAACtC,EAAQ,WAE5E,IAAIgD,EACAC,EACJ,MAAMC,EAAY,IAAI,QAAQ,CAAC7U,EAASwI,IAAW,CACjDoM,EAAmB5U,EACnB2U,EAAkBnM,CACtB,CAAG,EACKsM,EAAeC,GAAU,CAAEJ,EAAgBI,EAAM,OAAO,GAE9D,IAAIlC,EAASH,GAAYf,CAAO,EAChCkB,EAAO,QAAUiC,EAEjBhB,IAAiB,EAEjB,MAAMkB,EAAa,CAACC,EAAWC,IAAQ,CACrCb,EAASY,CAAS,EAAIC,CAC1B,EAEQC,EAAY,CAACF,EAAWG,IAAQ,CACpCd,EAAQW,CAAS,EAAIG,CACzB,EAEQC,EAAW,CAAC,CAAE,GAAIC,EAAO,OAAAzF,EAAQ,QAAAC,CAAO,IAC5C,IAAI,QAAQ,CAAC9P,EAASwI,IAAW,CAC/ByH,GAAI,IAAIF,CAAE,YAAYuF,CAAK,YAAYzF,CAAM,EAAE,EAE/C,MAAMoF,EAAY,GAAGpF,CAAM,IAAIyF,CAAK,GACpCN,EAAWC,EAAWjV,CAAO,EAC7BmV,EAAUF,EAAWzM,CAAM,EAC3ByK,GAAKJ,EAAQ,CACX,SAAU9C,EACV,MAAAuF,EACA,OAAAzF,EACA,QAAAC,CACR,CAAO,CACP,CAAK,EAGGyF,EAAO,IACX,QAAQ,KAAK,qFAAqF,EAG9FC,EAAgBF,GACpBD,EAAS1F,EAAU,CACjB,GAAI2F,EAAO,OAAQ,OAAQ,QAAS,CAAE,QAAS,CAAE,SAAUZ,EAAc,SAAU/C,EAAQ,SAAU,QAASA,EAAQ,QAAS,CACrI,CAAK,CAAC,EAGE8D,EAAY,CAACC,EAAM1X,EAAMsX,IAC7BD,EAAS1F,EAAU,CACjB,GAAI2F,EACJ,OAAQ,KACR,QAAS,CAAE,OAAQ,YAAa,KAAM,CAACI,EAAM1X,CAAI,CAAC,CACxD,CAAK,CAAC,EAGE2X,EAAW,CAACD,EAAMJ,IACtBD,EAAS1F,EAAU,CACjB,GAAI2F,EACJ,OAAQ,KACR,QAAS,CAAE,OAAQ,WAAY,KAAM,CAACI,EAAM,CAAE,SAAU,MAAM,CAAE,CAAC,CACvE,CAAK,CAAC,EAGEE,GAAa,CAACF,EAAMJ,IACxBD,EAAS1F,EAAU,CACjB,GAAI2F,EACJ,OAAQ,KACR,QAAS,CAAE,OAAQ,SAAU,KAAM,CAACI,CAAI,CAAC,CAC/C,CAAK,CAAC,EAGEG,EAAK,CAACrJ,EAAQ2D,EAAMmF,IACxBD,EAAS1F,EAAU,CACjB,GAAI2F,EACJ,OAAQ,KACR,QAAS,CAAE,OAAA9I,EAAQ,KAAA2D,CAAI,CAC7B,CAAK,CAAC,EAGE2F,EAAe,IACnB,QAAQ,KAAK,2GAA2G,EAGpHC,EAAuB,CAACC,EAAQV,IAAUD,EAAS1F,EAAU,CACjE,GAAI2F,EACJ,OAAQ,eACR,QAAS,CACP,MAAOU,EACP,QAAS,CACP,SAAUrE,EAAQ,SAClB,SAAUA,EAAQ,SAClB,UAAWA,EAAQ,UACnB,YAAaA,EAAQ,YACrB,KAAMA,EAAQ,KACd,SAAU,CAACW,GAAI,QAASA,GAAI,SAAS,EAAE,SAASkC,CAAU,GACrD,CAAC7C,EAAQ,UACtB,CACA,CACA,CAAG,CAAC,EAEIsE,GAAa,IACjB,QAAQ,KAAK,gGAAgG,EAGzGC,EAAqB,CAACF,EAAQG,EAAMC,EAASd,IACjDD,EAAS1F,EAAU,CACjB,GAAI2F,EACJ,OAAQ,aACR,QAAS,CAAE,MAAOU,EAAQ,IAAKG,EAAM,OAAQC,CAAO,CAC1D,CAAK,CAAC,EAGEC,GAAe,CAACrC,EAAQ,MAAOC,EAAK1W,EAAQ+X,IAAU,CAE1D,GAAIZ,GAAgB,CAACpC,GAAI,eAAgBA,GAAI,uBAAuB,EAAE,SAAS2B,CAAG,EAAG,MAAM,MAAM,0CAA0C,EAE3I,MAAMkC,EAAOlC,GAAOO,EACpBA,EAAa2B,EAEb,MAAMC,EAAU7Y,GAAUkX,EAC1BA,EAAgB2B,EAQhB,MAAMJ,GADW,OAAOhC,GAAU,SAAWA,EAAM,MAAM,GAAG,EAAIA,GACxC,OAAQvR,GAAM,CAAC8R,EAAa,SAAS9R,CAAC,CAAC,EAG/D,OAFA8R,EAAa,KAAK,GAAGyB,CAAM,EAEvBA,EAAO,OAAS,EACXD,EAAqBC,EAAQV,CAAK,EACtC,KAAK,IAAMY,EAAmBlC,EAAOmC,EAAMC,EAASd,CAAK,CAAC,EAGxDY,EAAmBlC,EAAOmC,EAAMC,EAASd,CAAK,CACzD,EAEQgB,GAAgB,CAACC,EAAS,CAAA,EAAIjB,IAClCD,EAAS1F,EAAU,CACjB,GAAI2F,EACJ,OAAQ,gBACR,QAAS,CAAE,OAAAiB,CAAM,CACvB,CAAK,CAAC,EAGEC,GAAY,MAAOjD,EAAO3B,EAAO,CAAA,EAAIjT,EAAS,CAClD,OAAQ,GAAM,KAAM,GAAM,KAAM,GAAM,IAAK,EAC/C,EAAK2W,IACDD,EAAS1F,EAAU,CACjB,GAAI2F,EACJ,OAAQ,YACR,QAAS,CAAE,MAAO,MAAMhC,GAAUC,CAAK,EAAG,QAAS3B,EAAM,OAAAjT,CAAM,CACrE,CAAK,CAAC,EAGE8X,EAAS,CAACC,EAAQ,uBAAwBC,EAAW,GAAOrB,KAChE,QAAQ,IAAI,wFAAwF,EAC7FD,EAAS1F,EAAU,CACxB,GAAI2F,EACJ,OAAQ,SACR,QAAS,CAAE,MAAAoB,EAAO,SAAAC,CAAQ,CAChC,CAAK,CAAC,GAGEC,EAAS,MAAOrD,EAAO+B,IAAU,CACrC,GAAIZ,EAAc,MAAM,MAAM,8DAA8D,EAE5F,OAAOW,EAAS1F,EAAU,CACxB,GAAI2F,EACJ,OAAQ,SACR,QAAS,CAAE,MAAO,MAAMhC,GAAUC,CAAK,CAAC,CAC9C,CAAK,CAAC,CACN,EAEQsD,EAAY,UACZhE,IAAW,OAObC,GAAgBD,CAAM,EACtBA,EAAS,MAEJ,QAAQ,QAAO,GAGxBE,GAAUF,EAAQ,CAAC,CACjB,SAAAiE,EAAU,MAAAxB,EAAO,OAAAyB,EAAQ,OAAAlH,EAAQ,KAAAnO,CACrC,IAAQ,CACJ,MAAMuT,EAAY,GAAGpF,CAAM,IAAIyF,CAAK,GACpC,GAAIyB,IAAW,UAAW,CACxB9G,GAAI,IAAI6G,CAAQ,eAAexB,CAAK,EAAE,EACtC,IAAI0B,EAAItV,EACJmO,IAAW,YACbmH,EAAInF,GAAYnQ,CAAI,EACXmO,IAAW,WACpBmH,EAAI,MAAM,KAAK,CAAE,GAAGtV,EAAM,OAAQ,OAAO,KAAKA,CAAI,EAAE,MAAM,CAAE,GAE9D2S,EAASY,CAAS,EAAE,CAAE,MAAAK,EAAO,KAAM0B,CAAC,CAAE,CAC5C,SAAeD,IAAW,SAGpB,GAFAzC,EAAQW,CAAS,EAAEvT,CAAI,EACnBmO,IAAW,QAAQ8E,EAAgBjT,CAAI,EACvC0S,EACFA,EAAa1S,CAAI,MAEjB,OAAM,MAAMA,CAAI,OAETqV,IAAW,YACpB5C,EAAO,CAAE,GAAGzS,EAAM,UAAW4T,CAAK,CAAE,CAE1C,CAAG,EAED,MAAM2B,EAAa,CACjB,GAAAlH,EACA,OAAA8C,EACA,WAAAmC,EACA,UAAAG,EACA,KAAAI,EACA,UAAAE,EACA,SAAAE,EACA,WAAAC,GACA,GAAAC,EACA,aAAAC,EACA,WAAAG,GACA,aAAAI,GACA,cAAAC,GACA,UAAAE,GACA,OAAAC,EACA,OAAAG,EACA,UAAAC,CACJ,EAEE,OAAArB,EAAY,EACT,KAAK,IAAMO,EAAqB/B,CAAK,CAAC,EACtC,KAAK,IAAMkC,EAAmBlC,EAAOC,EAAK1W,CAAM,CAAC,EACjD,KAAK,IAAMqX,EAAiBqC,CAAU,CAAC,EACvC,MAAM,IAAM,CAAA,CAAE,EAEVpC,CACT,ECxRA,MAAMd,GAAetE,GAEf+G,GAAY,MAAOjD,EAAOS,EAAOrC,IAAY,CACjD,MAAMkB,EAAS,MAAMkB,GAAaC,EAAO,EAAGrC,CAAO,EACnD,OAAOkB,EAAO,UAAUU,CAAK,EAC1B,QAAQ,SAAY,CACnB,MAAMV,EAAO,UAAS,CAC5B,CAAK,CACL,EAEM+D,GAAS,MAAOrD,EAAO5B,IAAY,CACvC,MAAMkB,EAAS,MAAMkB,GAAa,MAAO,EAAGpC,CAAO,EACnD,OAAOkB,EAAO,OAAOU,CAAK,EACvB,QAAQ,SAAY,CACnB,MAAMV,EAAO,UAAS,CAC5B,CAAK,CACL,EAEA,IAAAqE,GAAiB,CACf,UAAAV,GACA,OAAAI,EACF,EC6FAO,GAAiB,CACf,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,SAAU,WACV,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,QAAS,UACT,QAAS,UACT,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,QAAS,UACT,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,QAAS,UACT,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,QAAS,UACT,IAAK,MACL,IAAK,MACL,SAAU,WACV,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,SAAU,WACV,IAAK,MACL,IAAK,KACP,ECtNAC,GAAiB,CACf,SAAU,IACV,SAAU,IACV,UAAW,IACX,KAAM,IACN,cAAe,IACf,uBAAwB,IACxB,aAAc,IACd,YAAa,IACb,YAAa,IACb,YAAa,IACb,YAAa,KACb,YAAa,KACb,gBAAiB,KACjB,SAAU,IACZ,ECRA,MAAM5G,GAAkBH,GAClB0D,GAAezD,GACf4G,GAAYzD,GACZ0D,GAAYzD,GACZpB,GAAMqB,GACNyD,GAAMvD,GACN,CAAE,WAAAwD,EAAU,EAAKC,GAEvB,IAAAC,GAAiB,CACf,UAAAJ,GACA,IAAA7E,GACA,IAAA8E,GACA,gBAAA5G,GACA,aAAAuD,GACA,WAAAsD,GACA,GAAGH,EACL,kBCtBAha,GAAAA,oBAA6B,UAAY,2EAElC,MAAMsa,EAAmB,CAC5B,aAAc,CACV,KAAK,YAAc,GACnB,KAAK,OAAS,IAClB,CAEA,MAAM,WAAWha,EAAkB,CAC/B,GAAI,MAAK,YAET,GAAI,CACAA,GAAA,MAAAA,EAAmB,CACf,OAAQ,UACR,QAAS,kCACT,SAAU,EAC1B,GAGY,KAAK,OAAS,MAAM0Z,GAAU,aAAa,MAAO,EAAG,CACjD,OAASO,GAAM,CACPA,EAAE,SAAW,yBACbja,GAAA,MAAAA,EAAmB,CACf,OAAQ,UACR,QAAS,sBACT,SAAU,EACtC,GAC+Bia,EAAE,SAAW,+BACpBja,GAAA,MAAAA,EAAmB,CACf,OAAQ,UACR,QAAS,oCACT,SAAU,EACtC,GAC+Bia,EAAE,SAAW,0BACpBja,GAAA,MAAAA,EAAmB,CACf,OAAQ,UACR,QAAS,6BACT,SAAU,EACtC,GAEgB,EACA,aAAeM,GAAU,CACrB,QAAQ,MAAM,mBAAoBA,CAAK,CAC3C,CAChB,CAAa,EAGD,MAAM,KAAK,OAAO,cAAc,CAC5B,yBAA0BoZ,GAAU,IAAI,UACxC,0BAA2B,IAC3B,sBAAuBA,GAAU,IAAI,IACrD,CAAa,EAED,KAAK,YAAc,GACnB1Z,GAAA,MAAAA,EAAmB,CACf,OAAQ,QACR,QAAS,4CACT,SAAU,GAC1B,EACQ,OAASM,EAAO,CACZ,cAAQ,MAAM,kCAAmCA,CAAK,EAChDA,CACV,CACJ,CAEA,MAAM,QAAQK,EAAW,CACrB,GAAI,CAAC,KAAK,YACN,MAAM,IAAI,MAAM,4BAA4B,EAIhD,GAAIA,EAAU,OAAS,kBACnB,OAAO,MAAM,KAAK,WAAWA,CAAS,EAI1C,MAAMmH,EAAS,MAAM,KAAK,OAAO,UAAUnH,CAAS,EAGpD,OAAO,KAAK,cAAcmH,CAAM,CACpC,CAEA,cAAcoS,EAAiB,CAC3B,MAAMpZ,EAAU,CAAA,EAGhB,UAAW8T,KAAQsF,EAAgB,KAAK,MAChCtF,EAAK,WAAa,IAClB9T,EAAQ,KAAK,CACT,IAAK,CACD,CAAC8T,EAAK,KAAK,GAAIA,EAAK,KAAK,EAAE,EAC3B,CAACA,EAAK,KAAK,GAAIA,EAAK,KAAK,EAAE,EAC3B,CAACA,EAAK,KAAK,GAAIA,EAAK,KAAK,EAAE,EAC3B,CAACA,EAAK,KAAK,GAAIA,EAAK,KAAK,EAAE,CACnD,EACoB,KAAMA,EAAK,KACX,WAAYA,EAAK,WAAa,GAClD,CAAiB,EAOT,OAFc,KAAK,oBAAoB9T,CAAO,CAGlD,CAEA,oBAAoB0T,EAAO,CACvB,GAAIA,EAAM,SAAW,EAAG,MAAO,CAAA,EAG/BA,EAAM,KAAK,CAACrN,EAAGzD,IAAMyD,EAAE,IAAI,CAAC,EAAE,CAAC,EAAIzD,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAE9C,MAAM2F,EAAQ,CAAA,EACd,IAAIC,EAAc,CACd,MAAO,CAACkL,EAAM,CAAC,CAAC,EAChB,KAAMA,EAAM,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,EACvB,KAAMA,EAAM,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CACnC,EAEQ,QAAS9T,EAAI,EAAGA,EAAI8T,EAAM,OAAQ9T,IAAK,CACnC,MAAMkU,EAAOJ,EAAM9T,CAAC,EACdyZ,EAAQvF,EAAK,IAAI,CAAC,EAAE,CAAC,EAGvBuF,GAAS7Q,EAAY,MAAQ6Q,GAAS7Q,EAAY,KAAO,GACzDA,EAAY,MAAM,KAAKsL,CAAI,EAC3BtL,EAAY,KAAO,KAAK,IAAIA,EAAY,KAAM6Q,CAAK,EACnD7Q,EAAY,KAAO,KAAK,IAAIA,EAAY,KAAMsL,EAAK,IAAI,CAAC,EAAE,CAAC,CAAC,IAG5DvL,EAAM,KAAK,KAAK,UAAUC,CAAW,CAAC,EACtCA,EAAc,CACV,MAAO,CAACsL,CAAI,EACZ,KAAMuF,EACN,KAAMvF,EAAK,IAAI,CAAC,EAAE,CAAC,CACvC,EAEQ,CAGA,OAAItL,EAAY,MAAM,OAAS,GAC3BD,EAAM,KAAK,KAAK,UAAUC,CAAW,CAAC,EAGnCD,CACX,CAEA,UAAU5I,EAAM,CAEZA,EAAK,MAAM,KAAK,CAAC,EAAGiD,IAAM,EAAE,IAAI,CAAC,EAAE,CAAC,EAAIA,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAGnD,MAAM6C,EAAO,KAAK,IAAI,GAAG9F,EAAK,MAAM,IAAI6D,GAAKA,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EACnDkC,EAAO,KAAK,IAAI,GAAG/F,EAAK,MAAM,IAAI6D,GAAKA,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EACnDmC,EAAO,KAAK,IAAI,GAAGhG,EAAK,MAAM,IAAI6D,GAAKA,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EACnDoC,EAAO,KAAK,IAAI,GAAGjG,EAAK,MAAM,IAAI6D,GAAKA,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAGnD9D,EAAOC,EAAK,MAAM,IAAI6D,GAAKA,EAAE,IAAI,EAAE,KAAK,GAAG,EAG3C8V,EAAa3Z,EAAK,MAAM,OAAO,CAACwJ,EAAK3F,IAAM2F,EAAM3F,EAAE,WAAY,CAAC,EAAI7D,EAAK,MAAM,OAErF,MAAO,CACH,IAAK,CACD,CAAC8F,EAAME,CAAI,EACX,CAACD,EAAMC,CAAI,EACX,CAACD,EAAME,CAAI,EACX,CAACH,EAAMG,CAAI,CAC3B,EACY,KAAMlG,EACN,WAAY4Z,CACxB,CACI,CAEA,MAAM,WAAWhQ,EAAS,CACtB,MAAMC,EAAc,MAAMD,EAAQ,YAAW,EACvCE,EAAM,MAAMC,GAAAA,YAAqB,CAAE,KAAMF,CAAW,CAAE,EAAE,QACxDG,EAAWF,EAAI,SACfG,EAAa,CAAA,EAEnB,QAASC,EAAU,EAAGA,GAAWF,EAAUE,IAAW,CAClD,MAAMC,EAAO,MAAML,EAAI,QAAQI,CAAO,EAChCE,EAAWD,EAAK,YAAY,CAAE,MAAO,CAAG,CAAE,EAG1CE,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAMD,EAAO,WAAW,IAAI,EAClCA,EAAO,MAAQD,EAAS,MACxBC,EAAO,OAASD,EAAS,OAEzB,MAAMD,EAAK,OAAO,CACd,cAAeG,EACf,SAAUF,CAC1B,CAAa,EAAE,QAGH,MAAMnI,EAAO,MAAM,IAAI,QAAQD,GAAWqI,EAAO,OAAOrI,EAAS,WAAW,CAAC,EAGvEsF,EAAS,MAAM,KAAK,OAAO,UAAUrF,CAAI,EACzCsI,EAAc,KAAK,cAAcjD,CAAM,EAE7C2C,EAAW,KAAK,CACZ,KAAMC,EACN,QAASK,CACzB,CAAa,CACL,CAEA,OAAON,CACX,CAEA,MAAM,SAAU,CACR,KAAK,SACL,MAAM,KAAK,OAAO,UAAS,EAC3B,KAAK,OAAS,KACd,KAAK,YAAc,GAE3B,CACJ,CAGO,MAAM4P,GAAqB,IAAIL,GClOzBM,EAAyB,CAElC,UAAW,CAEP,mBAAoB,KAIpB,cAAe,IACf,kBAAmB,GACnB,oBAAqB,EACrB,gBAAiB,EACjB,sBAAuB,IAOvB,UAAW,EAGX,gBAAiB,EAErB,EAGA,YAAa,CAGT,cAAe,GACf,WAAY,EAKhB,CAqFJ,EA4NO,SAASC,GAAsBC,EAAgB,CAElDA,EAAe,OAAO,mBAAqBF,EAAuB,UAAU,mBAC5EE,EAAe,OAAO,cAAgBF,EAAuB,UAAU,cACvEE,EAAe,OAAO,kBAAoBF,EAAuB,UAAU,kBAC3EE,EAAe,OAAO,oBAAsBF,EAAuB,UAAU,oBAC7EE,EAAe,OAAO,gBAAkBF,EAAuB,UAAU,gBACzEE,EAAe,OAAO,sBAAwBF,EAAuB,UAAU,sBAC/EE,EAAe,OAAO,UAAYF,EAAuB,UAAU,UACnEE,EAAe,OAAO,gBAAkBF,EAAuB,UAAU,gBAGzEE,EAAe,OAAO,cAAgBF,EAAuB,YAAY,cACzEE,EAAe,OAAO,WAAaF,EAAuB,YAAY,WAEtE,QAAQ,IAAI,4DAA4D,CAC5E,CCrWO,MAAMG,GAAsB,CAE/B,UAAW,CAEP,mBAAoB,KAIpB,cAAe,GACf,kBAAmB,IACnB,oBAAqB,IACrB,gBAAiB,EACjB,sBAAuB,IAOvB,UAAW,EACX,gBAAiB,CAErB,EAGA,YAAa,CAGT,cAAe,GACf,WAAY,EAShB,CAoGJ,EAGaC,GAAqB,CAE9B,UAAW,CAEP,mBAAoB,KAIpB,cAAe,IACf,kBAAmB,IACnB,oBAAqB,IACrB,gBAAiB,EACjB,sBAAuB,IAOvB,UAAW,EACX,gBAAiB,CAErB,EAGA,YAAa,CAGT,cAAe,GACf,WAAY,GAYhB,CAqFJ,EA0dO,SAASC,GAA4BH,EAAgBI,EAAU,UAAW,CAC7E,MAAM7a,EAAS6a,IAAY,SAAWH,GACvBG,IAAY,UAAYF,GACxBD,GAGfD,EAAe,OAAO,mBAAqBza,EAAO,UAAU,mBAC5Dya,EAAe,OAAO,cAAgBza,EAAO,UAAU,cACvDya,EAAe,OAAO,kBAAoBza,EAAO,UAAU,kBAC3Dya,EAAe,OAAO,oBAAsBza,EAAO,UAAU,oBAC7Dya,EAAe,OAAO,gBAAkBza,EAAO,UAAU,gBACzDya,EAAe,OAAO,sBAAwBza,EAAO,UAAU,sBAC/Dya,EAAe,OAAO,UAAYza,EAAO,UAAU,UACnDya,EAAe,OAAO,gBAAkBza,EAAO,UAAU,gBAGzDya,EAAe,OAAO,cAAgBza,EAAO,YAAY,cACzDya,EAAe,OAAO,WAAaza,EAAO,YAAY,WAEtD,QAAQ,IAAI,uCAAuC6a,CAAO,aAAa,CAC3E,CChvBAlb,GAAAA,oBAA6B,UAAY,oCAGzC,IAAImb,GAAmB,KACnBC,EAAgB,YAChBC,EAAuB,WACvBC,EAAmBX,GACnBY,EAAkB,GAClBC,EAAe,GACfC,GAAc,GAIlB,OAAO,eAAe,OAAQ,gBAAiB,CAC3C,IAAK,IAAML,EACX,IAAM5N,GAAU,CACZ,QAAQ,KAAK,0EAA0E,CAC3F,CACJ,CAAC,EAGD,MAAMkO,GAAY,SAAS,eAAe,WAAW,EAC/CC,GAAa,SAAS,eAAe,YAAY,EACjDC,GAAiB,SAAS,eAAe,gBAAgB,EACzDC,EAAe,SAAS,eAAe,cAAc,EACrDC,GAAa,SAAS,eAAe,YAAY,EACjDC,GAAiB,SAAS,eAAe,gBAAgB,EACzDC,GAAmB,SAAS,eAAe,kBAAkB,EAC7DC,GAAa,SAAS,eAAe,YAAY,EACjDC,GAAU,SAAS,eAAe,SAAS,EAC3CC,GAAc,SAAS,eAAe,aAAa,EACnDC,GAAW,SAAS,eAAe,UAAU,EAGnD,eAAeC,IAAgB,SAC3B,QAAQ,IAAI,6BAA6B,EACzCC,EAAW,yBAA0B,MAAM,EAE3C,GAAI,CAEA,MAAM,QAAQ,IAAI,CACd1Q,GAAoB,WAAY2Q,GAAa,CACrCnB,IAAkB,UAAYC,IAAyB,YACvDiB,EAAWC,EAAS,QAASA,EAAS,SAAW,QAAU,UAAY,MAAM,EAIjF,MAAMC,EAAc,SAAS,cAAc,qBAAqB,EAC5DA,GAAeD,EAAS,WAAa,QAAanB,IAAkB,UAAYC,IAAyB,aACzGmB,EAAY,YAAc,GAAGD,EAAS,OAAO,KAAKA,EAAS,QAAQ,KAE3E,CAAC,EACD9P,GAAY,WAAY8P,GAAa,CAC7BnB,IAAkB,UAAYC,IAAyB,YACvDiB,EAAWC,EAAS,QAASA,EAAS,SAAW,QAAU,UAAY,MAAM,CAErF,CAAC,EACD5B,GAAmB,WAAY4B,GAAa,CACpCnB,IAAkB,aAClBkB,EAAWC,EAAS,QAASA,EAAS,SAAW,QAAU,UAAY,MAAM,CAErF,CAAC,CACb,CAAS,EAED,QAAQ,IAAI,kCAAkC,EAC9CD,EAAW,0BAA2B,SAAS,EAC/CG,GAAmB,EAGnB,MAAMC,EAAgB,SAAS,cAAc,iCAAiC,EAC1EA,IACAtB,EAAgBsB,EAAc,MAC1BtB,IAAkB,UAClBE,EAAmBD,IAAyB,WAAazP,GAAsBa,GAC/E,SAAS,eAAe,eAAe,EAAE,MAAM,QAAU,UAEzD6O,EAAmBX,GACnB,SAAS,eAAe,eAAe,EAAE,MAAM,QAAU,QAE7D,QAAQ,IAAI,yBAA0BS,CAAa,EACnD,QAAQ,IAAI,6BAA8BE,CAAgB,EAElE,OAAS1a,EAAO,CAWZ,GAVA,QAAQ,MAAM,oCAAqCA,CAAK,GAGpDsB,EAAAtB,EAAM,UAAN,MAAAsB,EAAe,SAAS,UAAWC,EAAAvB,EAAM,UAAN,MAAAuB,EAAe,SAAS,QAC3Dwa,EAAU,0HAA0H,EAEpIA,EAAU,yFAAyF,EAInGhC,GAAmB,YAAa,CAChC2B,EAAW,mDAAoD,SAAS,EAExElB,EAAgB,YAChBE,EAAmBX,GACnB,MAAMiC,EAAiB,SAAS,eAAe,iBAAiB,EAC5DA,IACAA,EAAe,QAAU,GAEjC,CACJ,CACJ,CAGA,SAASH,IAAsB,CAE3Bd,GAAW,iBAAiB,QAAS,IAAMD,GAAU,MAAK,CAAE,EAC5DA,GAAU,iBAAiB,SAAUmB,EAAgB,EAGrDlB,GAAW,iBAAiB,WAAYmB,EAAc,EACtDnB,GAAW,iBAAiB,YAAaoB,EAAe,EACxDpB,GAAW,iBAAiB,OAAQqB,EAAU,EAG9ClB,GAAW,iBAAiB,QAASmB,EAAY,EACjDf,GAAQ,iBAAiB,QAASgB,EAAQ,EAC1Cf,GAAY,iBAAiB,QAASgB,EAAY,EAClDf,GAAS,iBAAiB,QAASgB,EAAK,EAGxC,SAAS,iBAAiB,yBAAyB,EAAE,QAAQC,GAAS,CAClE,QAAQ,IAAI,kCAAmCA,EAAM,MAAOA,CAAK,EACjEA,EAAM,iBAAiB,SAAUC,EAAkB,CACvD,CAAC,EAGD,MAAMZ,EAAgB,SAAS,cAAc,iCAAiC,EAC9E,QAAQ,IAAI,0BAA2BA,GAAA,YAAAA,EAAe,KAAK,EAG3D,SAAS,iBAAiB,6BAA6B,EAAE,QAAQW,GAAS,CACtEA,EAAM,iBAAiB,SAAUE,EAAyB,CAC9D,CAAC,EAGD,SAAS,eAAe,gBAAgB,EAAE,iBAAiB,SAAUC,EAAiB,EACtF,SAAS,eAAe,kBAAkB,EAAE,iBAAiB,SAAUA,EAAiB,EACxF,SAAS,eAAe,YAAY,EAAE,iBAAiB,SAAUA,EAAiB,EAGlF,SAAS,eAAe,iBAAiB,EAAE,iBAAiB,SAAUC,EAA2B,EAGjG,SAAS,eAAe,cAAc,EAAE,iBAAiB,SAAUC,EAAwB,EAG3F,SAAS,eAAe,aAAa,EAAE,iBAAiB,SAAUC,EAAuB,CAC7F,CAGA,eAAeL,GAAmBzF,EAAO,CACrC,MAAM+F,EAAY/F,EAAM,OAAO,MAC/B,QAAQ,IAAI,mCAAoC+F,CAAS,EACzD,QAAQ,IAAI,2CAA4CxC,CAAa,EAErEA,EAAgBwC,EAGZxC,IAAkB,UAClBE,EAAmBD,IAAyB,WAAazP,GAAsBa,GAC/E,QAAQ,IAAI,qCAAsC4O,CAAoB,EACtE,QAAQ,IAAI,2BAA4BC,CAAgB,IAExDA,EAAmBX,GACnB,QAAQ,IAAI,mCAAmC,GAInD,MAAMkD,EAAgB,SAAS,eAAe,eAAe,EAC7DA,EAAc,MAAM,QAAUzC,IAAkB,SAAW,QAAU,OAErEkB,EAAW,eAAelB,IAAkB,SAAW,YAAc,cAAc,GAAI,MAAM,EAG7F,QAAQ,IAAI,uBAAwBA,CAAa,EACjD,QAAQ,IAAI,0BAA2BE,CAAgB,CAC3D,CAGA,eAAeiC,GAA0B1F,EAAO,CAI5C,GAHAwD,EAAuBxD,EAAM,OAAO,MAGhCuD,IAAkB,SAAU,CAI5B,GAHAE,EAAmBD,IAAyB,WAAazP,GAAsBa,GAG3E4O,IAAyB,WAAY,CACrC,MAAMyC,EAAiB,SAAS,eAAe,gBAAgB,EAAE,MAC3DC,EAAmB,SAAS,eAAe,kBAAkB,EAAE,MAC/DC,EAAa,SAAS,eAAe,YAAY,EAAE,MAEzDvR,GAAY,eAAe,CACvB,UAAWqR,EACX,YAAaC,EACb,WAAYC,CAC5B,CAAa,EAGD1B,EAAW,2CAA4C,MAAM,EAC7D,GAAI,CACA,MAAM7P,GAAY,WAAY8P,GAAa,CACvCD,EAAWC,EAAS,QAASA,EAAS,SAAW,QAAU,UAAY,MAAM,CACjF,CAAC,EACDD,EAAW,gCAAiC,SAAS,CACzD,OAAS1b,EAAO,CACZ,QAAQ,MAAM,+CAAgDA,CAAK,EACnE+b,EAAU,8CAA8C,EAExDtB,EAAuB,WACvBC,EAAmB1P,GACnB,SAAS,eAAe,oBAAoB,EAAE,QAAU,EAC5D,CACJ,CAEA0Q,EAAW,eAAejB,IAAyB,WAAa,iBAAmB,UAAU,iBAAkB,MAAM,CACzH,CACJ,CAGA,eAAemC,IAAoB,CAC/B,GAAIpC,IAAkB,SAAU,OAEhC,MAAM0C,EAAiB,SAAS,eAAe,gBAAgB,EAAE,MAC3DC,EAAmB,SAAS,eAAe,kBAAkB,EAAE,MAC/DC,EAAa,SAAS,eAAe,YAAY,EAAE,MAGrD3C,IAAyB,WACzBzP,GAAoB,eAAe,CAC/B,UAAWkS,EACX,YAAaC,EACb,WAAYC,CACxB,CAAS,EAEDvR,GAAY,eAAe,CACvB,UAAWqR,EACX,YAAaC,EACb,WAAYC,CACxB,CAAS,EAIL1B,EAAW,wBAAyB,MAAM,EAC1C,GAAI,CACA,MAAMhB,EAAiB,WAAYiB,GAAa,CAC5CD,EAAWC,EAAS,QAASA,EAAS,SAAW,QAAU,UAAY,MAAM,CACjF,CAAC,EACDD,EAAW,+BAAgC,SAAS,CACxD,OAAS1b,EAAO,CACZ,QAAQ,MAAM,6BAA8BA,CAAK,EACjD+b,EAAU,8CAA8C,CAC5D,CACJ,CAGA,SAASE,GAAiBhF,EAAO,CAC7B,MAAMoG,EAAOpG,EAAM,OAAO,MAAM,CAAC,EAC7BoG,IAASA,EAAK,KAAK,WAAW,QAAQ,GAAKA,EAAK,OAAS,mBACzDC,GAASD,CAAI,EAEbtB,EAAU,yCAAyC,CAE3D,CAEA,SAASG,GAAejF,EAAO,CAC3BA,EAAM,eAAc,EACpB8D,GAAW,UAAU,IAAI,UAAU,CACvC,CAEA,SAASoB,GAAgBlF,EAAO,CAC5BA,EAAM,eAAc,EACpB8D,GAAW,UAAU,OAAO,UAAU,CAC1C,CAEA,SAASqB,GAAWnF,EAAO,CACvBA,EAAM,eAAc,EACpB8D,GAAW,UAAU,OAAO,UAAU,EAEtC,MAAMsC,EAAOpG,EAAM,aAAa,MAAM,CAAC,EACnCoG,IAASA,EAAK,KAAK,WAAW,QAAQ,GAAKA,EAAK,OAAS,mBACzDC,GAASD,CAAI,EAEbtB,EAAU,uCAAuC,CAEzD,CAGA,eAAeuB,GAASD,EAAM,CAE1B,GAAI9C,GAAkB,CAElB,MAAMgD,EAAgBtC,EAAa,IAC/BsC,GAAiBA,EAAc,WAAW,OAAO,GACjD,IAAI,gBAAgBA,CAAa,EAErChD,GAAmB,IACvB,CAYA,GATAc,GAAW,UAAY,GACvBF,GAAe,MAAM,QAAU,OAG/BZ,GAAmB8C,EAEnBrC,GAAe,MAAM,QAAU,QAC/BG,GAAe,MAAM,QAAU,OAE3BkC,EAAK,OAAS,kBAAmB,CAEjCpC,EAAa,MAAM,QAAU,OAC7B,MAAMuC,EAAmBvC,EAAa,cACtCuC,EAAiB,UAAY,GAG7B,MAAMC,EAAa,SAAS,cAAc,KAAK,EAC/CA,EAAW,UAAY,cACvBA,EAAW,UAAY;AAAA;AAAA,sBAETJ,EAAK,IAAI;AAAA;AAAA;AAAA;AAAA,UAKvBG,EAAiB,YAAYC,CAAU,EAGvC,GAAI,CACA,MAAM1T,EAAc,MAAMsT,EAAK,YAAW,EACpCrT,EAAM,MAAMC,GAAAA,YAAqB,CAAE,KAAMF,CAAW,CAAE,EAAE,QACxDG,EAAWF,EAAI,SAEf0T,EAAUD,EAAW,cAAc,WAAW,EACpDC,EAAQ,YAAc,GAAGxT,CAAQ,QAAQA,EAAW,EAAI,IAAM,EAAE,GAEhE,MAAMyT,EAAiB,SAAS,eAAe,UAAU,EAGnDC,EAAgB,KAAK,IAAI1T,EAAU,CAAC,EAE1C,QAASE,EAAU,EAAGA,GAAWwT,EAAexT,IAAW,CACvD,MAAMC,EAAO,MAAML,EAAI,QAAQI,CAAO,EAChCE,EAAWD,EAAK,YAAY,CAAE,MAAO,EAAG,CAAE,EAE1CwT,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,mBAEpB,MAAMtT,EAAS,SAAS,cAAc,QAAQ,EACxC8C,EAAU9C,EAAO,WAAW,IAAI,EACtCA,EAAO,OAASD,EAAS,OACzBC,EAAO,MAAQD,EAAS,MAExB,MAAMwT,EAAgB,CAClB,cAAezQ,EACf,SAAU/C,CAC9B,EAEgB,MAAMD,EAAK,OAAOyT,CAAa,EAAE,QAEjCD,EAAQ,UAAY,WAAWzT,CAAO,OACtCyT,EAAQ,YAAYtT,CAAM,EAC1BoT,EAAe,YAAYE,CAAO,CACtC,CAEI3T,EAAW,IACXyT,EAAe,WAAa,iCAAiCzT,EAAW,CAAC,kBAEjF,OAASlK,EAAO,CACZ,QAAQ,MAAM,+BAAgCA,CAAK,EACnDyd,EAAW,cAAc,WAAW,EAAE,YAAc,2BACxD,CACJ,KAAO,CAEH,MAAMM,EAAsB,SAAS,cAAc,kBAAkB,EACjEA,GACAA,EAAoB,OAAM,EAE9B9C,EAAa,MAAM,QAAU,QAE7B,MAAM+C,EAAY,IAAI,gBAAgBX,CAAI,EAC1CpC,EAAa,IAAM+C,EAEnB/C,EAAa,OAAS,IAAM,CACxBS,EAAW,iDAAkD,SAAS,CAC1E,EACAT,EAAa,QAAU,IAAM,CACzB,IAAI,gBAAgB+C,CAAS,EAC7BjC,EAAU,sBAAsB,CACpC,CACJ,CACJ,CAGA,eAAeM,IAAe,CAC1B,GAAI,CAAC9B,GAAkB,CACnBwB,EAAU,8BAA8B,EACxC,MACJ,CAEAZ,GAAe,MAAM,QAAU,QAC/BC,GAAiB,MAAM,QAAU,OACjCC,GAAW,UAAY,GAGvB,MAAMO,EAAc,SAAS,cAAc,qBAAqB,EAChE,IAAIqC,EAAazD,IAAkB,SAAW,YAAc,eACxDA,IAAkB,WAClByD,GAAc,KAAKxD,IAAyB,WAAa,eAAiB,UAAU,KAEpFmB,IACAA,EAAY,YAAc,yBAAyBqC,CAAU,OAGjE,GAAI,CACA,QAAQ,IAAI,yBAAyBA,CAAU,KAAK,EACpD,QAAQ,IAAI,2BAA4BzD,CAAa,EACrD,QAAQ,IAAI,6BAA8BE,CAAgB,EAC1D,QAAQ,IAAI,2BAA4BA,EAAiB,YAAY,IAAI,EACzEgB,EAAW,oCAAqC,MAAM,EAEtD,MAAMwC,EAAY,YAAY,IAAG,EAG7B1D,IAAkB,UAAYE,IAAqBX,KACnD,QAAQ,MAAM,gEAAgE,EAE9EW,EAAmBD,IAAyB,WAAazP,GAAsBa,GAC/E,QAAQ,IAAI,oBAAqB6O,CAAgB,GAIrD,MAAMla,EAAU,MAAMka,EAAiB,QAAQH,EAAgB,EAEzD4D,EAAiB,YAAY,IAAG,EAAKD,EAC3C,QAAQ,IAAI,2BAA2BC,EAAe,QAAQ,CAAC,CAAC,IAAI,EACpE,QAAQ,IAAI,eAAgB3d,CAAO,EAGnC4a,GAAiB,MAAM,QAAU,OAE7B5a,GAAWA,EAAQ,OAAS,GAC5B4d,GAAe5d,EAAS2d,EAAgBF,CAAU,EAClDvC,EAAW,mCAAmClb,EAAQ,MAAM,iBAAkB,SAAS,IAEvF4d,GAAe,CAAA,EAAID,EAAgBF,CAAU,EAC7CvC,EAAW,6BAA8B,SAAS,EAG1D,OAAS1b,EAAO,CAMZ,GALA,QAAQ,MAAM,wBAAyBA,CAAK,EAC5C,QAAQ,MAAM,cAAeA,EAAM,IAAI,EACvCob,GAAiB,MAAM,QAAU,OAG7BZ,IAAkB,WAAaxa,EAAM,OAAS,UAAYA,EAAM,QAAQ,SAAS,UAAU,IAM3F,GALA+b,EAAU,wGAAwG,EAClHL,EAAW,uDAAwD,SAAS,EAGlD,QAAQ,0FAA0F,EACrG,CAEnB,MAAMM,EAAiB,SAAS,eAAe,iBAAiB,EAC5DA,IACAA,EAAe,QAAU,GACzBA,EAAe,cAAc,IAAI,MAAM,QAAQ,CAAC,EAExD,OAEAD,EAAU,4BAA8B/b,EAAM,OAAO,CAE7D,CACJ,CAGA,SAASoe,GAAe5d,EAAS2d,EAAgBF,EAAa,YAAa,OAEvE,MAAMI,EAAQ,MAAM,QAAQ7d,CAAO,KAAKc,EAAAd,EAAQ,CAAC,IAAT,YAAAc,EAAY,QAAS,OAGvDgd,EAAoB9D,IAAkB,UAAYha,EAAQ,OAAS,GAAKA,EAAQ,CAAC,GAAKA,EAAQ,CAAC,EAAE,IAGvG,GAFA,QAAQ,IAAI,iCAAkCga,EAAe,qBAAsB8D,EAAmB,WAAY9d,CAAO,EAErH6d,EAAO,CAEP,IAAIE,EAAU,GACVC,EAAe,EACfC,EAAc,GAElBje,EAAQ,QAAQke,GAAc,CAC1B,MAAMC,EAAWD,EAAW,QAAQ,IAAIxb,GAAKA,EAAE,IAAI,EAAE,KAAK;AAAA,CAAI,EAC9Dqb,GAAW;AAAA,WAAcG,EAAW,IAAI;AAAA,EAASC,CAAQ;AAAA,EACzDH,GAAgBE,EAAW,QAAQ,OAEnCD,GAAe;AAAA;AAAA,+BAEIC,EAAW,IAAI;AAAA;AAAA,0BAEpBA,EAAW,QAAQ,IAAI,CAAClX,EAAQoX,IAAU;AAAA,8CACtBA,CAAK;AAAA,gEACaA,EAAQ,CAAC;AAAA,+DACVC,GAAWrX,EAAO,IAAI,CAAC;AAAA,sEAChBA,EAAO,WAAa,KAAK,QAAQ,CAAC,CAAC;AAAA;AAAA,yBAEhF,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,aAI3B,CAAC,EAED6T,GAAW,UAAY;AAAA;AAAA,wDAEyB8C,EAAiB,KAAM,QAAQ,CAAC,CAAC;AAAA,uDAClC3d,EAAQ,MAAM;AAAA,0DACXge,CAAY;AAAA,8CACxBP,CAAU;AAAA;AAAA;AAAA;AAAA,+DAIOY,GAAWN,GAAW,kBAAkB,CAAC;AAAA;AAAA;AAAA;AAAA,kBAItFE,CAAW;AAAA;AAAA,SAGzB,SAAWH,EAEPQ,GAAwBte,EAAS2d,EAAgBF,CAAU,MACxD,CAEH,MAAMM,EAAU/d,EAAQ,IAAI0C,GAAKA,EAAE,IAAI,EAAE,KAAK;AAAA,CAAI,EAElDmY,GAAW,UAAY;AAAA;AAAA,wDAEyB8C,EAAiB,KAAM,QAAQ,CAAC,CAAC;AAAA,0DAC/B3d,EAAQ,MAAM;AAAA,8CAC1Byd,CAAU;AAAA;AAAA;AAAA;AAAA,+DAIOY,GAAWN,GAAW,kBAAkB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKlF/d,EAAQ,IAAI,CAACgH,EAAQoX,IAAU;AAAA;AAAA,4DAEOA,EAAQ,CAAC;AAAA,2DACVC,GAAWrX,EAAO,IAAI,CAAC;AAAA,kEAChBA,EAAO,WAAa,KAAK,QAAQ,CAAC,CAAC;AAAA;AAAA,qBAEhF,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,SAI3B,CACJ,CAGA,SAASsX,GAAwBte,EAAS2d,EAAgBF,EAAY,CAClE,MAAMM,EAAU/d,EAAQ,IAAI0C,GAAKA,EAAE,IAAI,EAAE,KAAK;AAAA,CAAI,EAG5C6b,EAAiBC,GAAmBxe,CAAO,EAGjD6a,GAAW,UAAY;AAAA;AAAA,oDAEyB8C,EAAiB,KAAM,QAAQ,CAAC,CAAC;AAAA,sDAC/B3d,EAAQ,MAAM;AAAA,0CAC1Byd,CAAU;AAAA,sDACEgB,GAA2Bze,CAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAYxCya,EAAa,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAMvCza,EAAQ,IAAI,CAACgH,EAAQoX,IAAU,CAC7B,MAAMM,EAAkBC,GAAmB3X,EAAO,UAAU,EAC5D,MAAO;AAAA,kDACeoX,CAAK,+BAA+BA,CAAK,iCAAiCA,CAAK,yBAAyBA,CAAK;AAAA,oEAC3FA,EAAQ,CAAC;AAAA,mEACVC,GAAWrX,EAAO,IAAI,CAAC;AAAA,wEAClB0X,CAAe,MAAM1X,EAAO,WAAa,KAAK,QAAQ,CAAC,CAAC;AAAA;AAAA,6BAGxG,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAQgCqX,GAAWN,GAAW,kBAAkB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAM1FQ,EAAe,IAAI,CAACK,EAAOC,IAAe;AAAA;AAAA;AAAA,8DAGEA,EAAa,CAAC;AAAA;AAAA;AAAA,iFAGKD,EAAM,aAAa;AAAA;AAAA,gEAEpCA,EAAM,cAAc,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,6BAGjEP,GAAWO,EAAM,IAAI,CAAC;AAAA;AAAA,iBAElC,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,MAMvB,WAAW,IAAME,GAAkB9e,CAAO,EAAG,GAAG,CACpD,CAGA,eAAe8b,IAAW,CACtB,MAAMiD,EAAc,SAAS,eAAe,eAAe,EAC3D,GAAIA,EACA,GAAI,CACA,MAAM,UAAU,UAAU,UAAUA,EAAY,WAAW,EAC3DC,GAAY,2BAA2B,CAC3C,MAAgB,CACZzD,EAAU,qBAAqB,CACnC,CAER,CAGA,SAASQ,IAAe,CACpB,MAAMgD,EAAc,SAAS,eAAe,eAAe,EAC3D,GAAIA,EAAa,CACb,MAAMrf,EAAOqf,EAAY,YACnBpd,EAAO,IAAI,KAAK,CAACjC,CAAI,EAAG,CAAE,KAAM,aAAc,EAC9CkC,EAAM,IAAI,gBAAgBD,CAAI,EAC9B0E,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,KAAOzE,EACTyE,EAAE,SAAW,mBAAmB,KAAK,IAAG,CAAE,OAC1CA,EAAE,MAAK,EACP,IAAI,gBAAgBzE,CAAG,CAC3B,CACJ,CAGA,SAASoa,IAAQ,CAEb,GAAIjC,GAAkB,CAElB,MAAMkF,EAAaxE,EAAa,IAC5BwE,GAAcA,EAAW,WAAW,OAAO,GAC3C,IAAI,gBAAgBA,CAAU,EAElClF,GAAmB,IACvB,CAGAO,GAAU,MAAQ,GAClBE,GAAe,MAAM,QAAU,OAC/BG,GAAe,MAAM,QAAU,OAC/BE,GAAW,UAAY,GACvBJ,EAAa,IAAM,GAGnB,MAAMuC,EAAmBvC,EAAa,cACtCuC,EAAiB,UAAY,wCAE7B,OAAO,aAAe,SAAS,eAAe,cAAc,EAE5D9B,EAAW,+BAAgC,MAAM,CACrD,CAGA,SAASmD,GAAW3e,EAAM,CACtB,MAAMwf,EAAM,SAAS,cAAc,KAAK,EACxC,OAAAA,EAAI,YAAcxf,EACXwf,EAAI,SACf,CAEA,SAAS3D,EAAU4D,EAAS,CACxBjE,EAAWiE,EAAS,OAAO,EAG3B,MAAMC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,cAClBA,EAAM,YAAcD,EACpB,SAAS,KAAK,YAAYC,CAAK,EAE/B,WAAW,IAAM,CACbA,EAAM,OAAM,CAChB,EAAG,GAAI,CACX,CAEA,SAASJ,GAAYG,EAAS,CAE1B,MAAMC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,gBAClBA,EAAM,YAAcD,EACpB,SAAS,KAAK,YAAYC,CAAK,EAE/B,WAAW,IAAM,CACbA,EAAM,OAAM,CAChB,EAAG,GAAI,CACX,CAEA,SAASlE,EAAWiE,EAAS5O,EAAO,OAAQ,CACxC,QAAQ,IAAI,IAAIA,EAAK,aAAa,KAAK4O,CAAO,EAAE,EAGhD,MAAME,EAAgB,SAAS,eAAe,QAAQ,EAClDA,IACAA,EAAc,YAAcF,EAC5BE,EAAc,UAAY,UAAU9O,CAAI,GAEhD,CAGA,SAASkO,GAA2Bze,EAAS,CACzC,OAAIA,EAAQ,SAAW,EAAU,GACrBA,EAAQ,OAAO,CAACsf,EAAK5c,IAAM4c,EAAM5c,EAAE,WAAY,CAAC,EAC9C1C,EAAQ,OAAS,KAAK,QAAQ,CAAC,CACjD,CAEA,SAAS2e,GAAmBrF,EAAY,CACpC,MAAMiG,EAAUjG,EAAa,IAC7B,OAAIiG,GAAW,GAAW,kBACtBA,GAAW,GAAW,oBACnB,gBACX,CAEA,SAASf,GAAmBxe,EAAS,CACjC,GAAIA,EAAQ,SAAW,EAAG,MAAO,CAAA,EAGjC,MAAMwf,EAAS,CAAC,GAAGxf,CAAO,EAAE,KAAK,CAACqG,EAAGzD,IAAM,CACvC,MAAM0D,EAAK,KAAK,IAAI,GAAGD,EAAE,IAAI,IAAI/B,GAAKA,EAAE,CAAC,CAAC,CAAC,EACrCiC,EAAK,KAAK,IAAI,GAAG3D,EAAE,IAAI,IAAI0B,GAAKA,EAAE,CAAC,CAAC,CAAC,EAC3C,OAAOgC,EAAKC,CAChB,CAAC,EAEKkZ,EAAS,CAAA,EACf,IAAIC,EAAe,CAACF,EAAO,CAAC,CAAC,EAE7B,QAAS5f,EAAI,EAAGA,EAAI4f,EAAO,OAAQ5f,IAAK,CACpC,MAAM+I,EAAQ,KAAK,IAAI,GAAG6W,EAAO5f,EAAE,CAAC,EAAE,IAAI,IAAI0E,GAAKA,EAAE,CAAC,CAAC,CAAC,EAClDsE,EAAQ,KAAK,IAAI,GAAG4W,EAAO5f,CAAC,EAAE,IAAI,IAAI0E,GAAKA,EAAE,CAAC,CAAC,CAAC,EAGlD,KAAK,IAAIsE,EAAQD,CAAK,EAAI,GAC1B+W,EAAa,KAAKF,EAAO5f,CAAC,CAAC,GAE3B6f,EAAO,KAAKC,CAAY,EACxBA,EAAe,CAACF,EAAO5f,CAAC,CAAC,EAEjC,CAEA,OAAI8f,EAAa,OAAS,GACtBD,EAAO,KAAKC,CAAY,EAIrBD,EAAO,IAAIb,GAAS,CAEvBA,EAAM,KAAK,CAACvY,EAAGzD,IAAM,CACjB,MAAMoG,EAAK,KAAK,IAAI,GAAG3C,EAAE,IAAI,IAAI/B,GAAKA,EAAE,CAAC,CAAC,CAAC,EACrC2E,EAAK,KAAK,IAAI,GAAGrG,EAAE,IAAI,IAAI0B,GAAKA,EAAE,CAAC,CAAC,CAAC,EAC3C,OAAO0E,EAAKC,CAChB,CAAC,EAED,MAAMvJ,EAAOkf,EAAM,IAAIlc,GAAKA,EAAE,IAAI,EAAE,KAAK,GAAG,EACtCwG,EAAgB0V,EAAM,OAAO,CAACzV,EAAKzG,IAAMyG,EAAMzG,EAAE,WAAY,CAAC,EAAIkc,EAAM,OAAS,IAEvF,MAAO,CAAE,KAAAlf,EAAM,cAAAwJ,EAAe,MAAO0V,CAAK,CAC9C,CAAC,CACL,CAEA,SAASE,GAAkB9e,EAAS,CAChC,MAAM2f,EAAU,SAAS,eAAe,oBAAoB,EACtD1K,EAAQ,SAAS,eAAe,aAAa,EAEnD,GAAI,CAAC0K,GAAW,CAAC1K,EAAO,OAMxB,GAHA0K,EAAQ,UAAY,GAGhB,CAAC1K,EAAM,SAAU,CACjBA,EAAM,OAAS,IAAM6J,GAAkB9e,CAAO,EAC9C,MACJ,CAEA,MAAM4f,EAAO3K,EAAM,sBAAqB,EAClC4K,EAAS5K,EAAM,aAAe2K,EAAK,MACnCE,EAAS7K,EAAM,cAAgB2K,EAAK,OAE1C5f,EAAQ,QAAQ,CAACgH,EAAQoX,IAAU,CAC/B,MAAM/Z,EAAM2C,EAAO,IACbvB,EAAO,KAAK,IAAI,GAAGpB,EAAI,IAAIC,GAAKA,EAAE,CAAC,CAAC,CAAC,EAAIub,EACzCla,EAAO,KAAK,IAAI,GAAGtB,EAAI,IAAIC,GAAKA,EAAE,CAAC,CAAC,CAAC,EAAIwb,EACzCpa,EAAO,KAAK,IAAI,GAAGrB,EAAI,IAAIC,GAAKA,EAAE,CAAC,CAAC,CAAC,EAAIub,EACzCja,EAAO,KAAK,IAAI,GAAGvB,EAAI,IAAIC,GAAKA,EAAE,CAAC,CAAC,CAAC,EAAIwb,EAEzCC,EAAa,SAAS,cAAc,KAAK,EAC/CA,EAAW,UAAY,YAAYpB,GAAmB3X,EAAO,UAAU,CAAC,GACxE+Y,EAAW,QAAQ,MAAQ3B,EAC3B2B,EAAW,MAAM,KAAO,GAAGta,CAAI,KAC/Bsa,EAAW,MAAM,IAAM,GAAGpa,CAAI,KAC9Boa,EAAW,MAAM,MAAQ,GAAGra,EAAOD,CAAI,KACvCsa,EAAW,MAAM,OAAS,GAAGna,EAAOD,CAAI,KAGxC,MAAMqa,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,iBAClBA,EAAM,YAAc,GAAG5B,EAAQ,CAAC,MAAMpX,EAAO,WAAa,KAAK,QAAQ,CAAC,CAAC,IACzE+Y,EAAW,YAAYC,CAAK,EAG5BD,EAAW,QAAU,IAAM,UAAU3B,CAAK,EAE1CuB,EAAQ,YAAYI,CAAU,CAClC,CAAC,CACL,CAGA,OAAO,cAAgB,SAASE,EAAS,CAErC,SAAS,iBAAiB,aAAa,EAAE,QAAQC,GAAO,CACpDA,EAAI,UAAU,OAAO,QAAQ,CACjC,CAAC,EACD,MAAM,OAAO,UAAU,IAAI,QAAQ,EAGnC,SAAS,iBAAiB,cAAc,EAAE,QAAQC,GAAW,CACzDA,EAAQ,UAAU,OAAO,QAAQ,CACrC,CAAC,EAEGF,IAAY,SACZ,SAAS,eAAe,eAAe,EAAE,UAAU,IAAI,QAAQ,EACxDA,IAAY,OACnB,SAAS,eAAe,aAAa,EAAE,UAAU,IAAI,QAAQ,EACtDA,IAAY,WACnB,SAAS,eAAe,gBAAgB,EAAE,UAAU,IAAI,QAAQ,CAExE,EAGA,OAAO,aAAe,SAAS7B,EAAO,CAClC,MAAM/Z,EAAM,SAAS,cAAc,yBAAyB+Z,CAAK,IAAI,EAC/DgC,EAAW,SAAS,cAAc,uCAAuChC,CAAK,IAAI,EAEpF/Z,GAAKA,EAAI,UAAU,IAAI,OAAO,EAC9B+b,GAAUA,EAAS,UAAU,IAAI,aAAa,CACtD,EAEA,OAAO,eAAiB,SAAShC,EAAO,CACpC,MAAM/Z,EAAM,SAAS,cAAc,yBAAyB+Z,CAAK,IAAI,EAC/DgC,EAAW,SAAS,cAAc,uCAAuChC,CAAK,IAAI,EAEpF/Z,GAAKA,EAAI,UAAU,OAAO,OAAO,EACjC+b,GAAUA,EAAS,UAAU,OAAO,aAAa,CACzD,EAEA,OAAO,UAAY,SAAShC,EAAO,CAE/B,SAAS,iBAAiB,oBAAoB,EAAE,QAAQ/Z,GAAO,CAC3DA,EAAI,UAAU,OAAO,UAAU,CACnC,CAAC,EAGD,MAAMA,EAAM,SAAS,cAAc,yBAAyB+Z,CAAK,IAAI,EACrE,GAAI/Z,EAAK,CACLA,EAAI,UAAU,IAAI,UAAU,EAG5B,MAAM+b,EAAW,SAAS,cAAc,uCAAuChC,CAAK,IAAI,EACpFgC,IACAA,EAAS,eAAe,CAAE,SAAU,SAAU,MAAO,SAAU,EAG/DA,EAAS,UAAU,IAAI,aAAa,EACpC,WAAW,IAAMA,EAAS,UAAU,OAAO,aAAa,EAAG,GAAI,EAEvE,CACJ,EAGA,SAAS/D,GAA4B5F,EAAO,CACxC0D,EAAkB1D,EAAM,OAAO,QAC/B,QAAQ,IAAI,oBAAqB0D,EAAkB,UAAY,UAAU,EAGrEA,GAAmBC,IACnBA,EAAe,GACf,SAAS,eAAe,cAAc,EAAE,QAAU,IAGlDD,GAAmBH,IAAkB,UAErCP,GAAsBS,CAAgB,EACtCgB,EAAW,2DAA4D,MAAM,GACtE,CAACf,GAAmBH,IAAkB,UAE7CkB,EAAW,4BAA6B,MAAM,CAEtD,CAGA,SAASoB,GAAyB7F,EAAO,CACrC2D,EAAe3D,EAAM,OAAO,QAC5B,QAAQ,IAAI,iBAAkB2D,EAAe,UAAY,UAAU,EAG/DA,GAAgBD,IAChBA,EAAkB,GAClB,SAAS,eAAe,iBAAiB,EAAE,QAAU,IAGrDC,GAAgBJ,IAAkB,UAElCH,GAA4BK,EAAkB,SAAS,EACvDgB,EAAW,wEAAyE,MAAM,GACnF,CAACd,GAAgBJ,IAAkB,UAE1CkB,EAAW,yBAA0B,MAAM,CAEnD,CAGA,SAASqB,GAAwB9F,EAAO,CACpC4D,GAAc5D,EAAM,OAAO,QAC3B,QAAQ,IAAI,gBAAiB4D,GAAc,UAAY,UAAU,EAG7DA,KACIF,IACAA,EAAkB,GAClB,SAAS,eAAe,iBAAiB,EAAE,QAAU,IAErDC,IACAA,EAAe,GACf,SAAS,eAAe,cAAc,EAAE,QAAU,KAItDC,IAAeL,IAAkB,UAEjCH,GAA4BK,EAAkB,SAAS,EACvDgB,EAAW,6EAA8E,MAAM,GACxF,CAACb,IAAeL,IAAkB,UAEzCkB,EAAW,wBAAyB,MAAM,CAElD,CAkCA,SAAS,iBAAiB,mBAAoBD,EAAa","x_google_ignoreList":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}